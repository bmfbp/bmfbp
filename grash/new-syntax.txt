an FD describes a position in a certain file
each *nix command has an array of FD's
by convention fd[0] is the standard input (stdin) for a command - a command reads from its own fd[0],
by convention, fd[1] is the standard output for a command - it writes to its own fd[1],
by convention, fd[2] is the error output for a command - it writes error messages to its own fd[2]

a pipe is a pair of file descriptors (FD), the type of a pipe is int [][];

by convention, the 0'th entry of the pair is the "input" of the pipe and the 1'st entry is the output of the pipe

for example "cmd1 | cmd2" is set up by creating a pipe - a pair of FD's, cmd1 writes to the FD in pipe[1] and cmd2 reads from the FD in pipe[0]

First, we make a (shared) pipe and put two FDs into it, e.g. FD0 <= a unique file descriptor (to a file with no name), FD1 <= another unique (anonymous) file descriptor, then the pipe is pipe[FD0][FD1]

Next, we map stdout and stdin appropriately, FD0 is put into the local fd[1] of cmd1 and FD1 is put into the ocal fd[0] of cmd1.

To do this mapping, DUP2() is used, e.g. dup2(pipe[FD1],fd[1]) is done in cmd1 and dup2(pipd[FD0],fd[0]) is done in cmd2.

In reality, the shell creates an array of pipes, one row (of pairs) for every "|" in a shell pipeline.

  
