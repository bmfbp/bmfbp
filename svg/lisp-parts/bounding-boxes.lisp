(in-package :arrowgram)

(defun create-bb (id x y right bottom)
  (paiprolog::add-clause `((bounding_box_left ,id ,x)))
  (paiprolog::add-clause `((bounding_box_top ,id ,y)))
  (paiprolog::add-clause `((bounding_box_right ,id ,right)))
  (paiprolog::add-clause `((bounding_box_bottom ,id ,bottom))))
    
(defun create-rect-bb (id x y w h)
  (let ((right (+ x w))
        (bottom (+ y h)))
    (create-bb id x y right bottom)))

(defun make-bounding-boxes-for-rectangles ()
  (let ((answers (paiprolog:prolog-collect (?id ?X ?Y ?W ?H)
                     (rect ?id)
                     (geometry_top_y ?id ?Y)
                     (geometry_left_x ?id ?X)
                     (geometry_w ?id ?W)
                     (geometry_h ?id ?H))))
    (format *error-output* "~&rect length of answers=~S" (length answers))
    (mapc #'(lambda (a)
              (destructuring-bind (id x y w h) a
                (create-rect-bb id x y w h)))
          answers)))
          

(defun make-bounding-boxes-for-speech-bubbles ()
  (let ((answers (paiprolog:prolog-collect (?ID ?X ?Y ?W ?H)
                   (speechbubble ?id)
                   (geometry_top_y ?id ?Y)
                   (geometry_left_x ?id ?X)
                   (geometry_w ?id ?W)
                   (geometry_h ?id ?H))))
    (format *error-output* "~&speech length of answers=~S" (length answers))
    (mapc #'(lambda (a)
              (destructuring-bind (id x y w h) a
                (create-rect-bb id x y w h)))
          answers)))

(defun create-text-bb (id x y w h)
  (let ((right (+ x w))
        (bottom (+ y h))
        (left (- x w))
        (top (- y h)))
    (create-bb id left top right bottom)))
       
(defun make-bounding-boxes-for-text ()
  (let ((answers (paiprolog:prolog-collect (?ID ?X ?Y ?W ?H)
                   (text ?id ?str)
                   (geometry_top_y ?id ?Y)
                   (geometry_center_x ?id ?X)
                   (geometry_w ?id ?W)
                   (geometry_h ?id ?H))))
    (format *error-output* "~&text length of answers=~S" (length answers))
    (mapc #'(lambda (a)
              (destructuring-bind (id x y w h) a
                (create-text-bb id x y w h)))
          answers)))


(defun create-ellipse-bb (id x y w h)
  (let ((right (+ x w))
        (bottom (+ y h))
        (left (- x w))
        (top (- y h)))
    (create-bb id left top right bottom)))
       
(defun make-bounding-boxes-for-ellipses ()
  (let ((answers (paiprolog:prolog-collect (?ID ?X ?Y ?W ?H)
                   (ellipse ?id)
                   (geometry_center_y ?id ?Y)
                   (geometry_center_x ?id ?X)
                   (geometry_w ?id ?W)
                   (geometry_h ?id ?H))))
    (format *error-output* "~&ellipse length of answers=~S" (length answers))
    (mapc #'(lambda (a)
              (destructuring-bind (id x y w h) a
                (create-ellipse-bb id x y w h)))
          answers)))


(defun bounding-boxes ()
  (make-bounding-boxes-for-rectangles)
  (make-bounding-boxes-for-text)
  (make-bounding-boxes-for-speech-bubbles)
  (make-bounding-boxes-for-ellipses))
