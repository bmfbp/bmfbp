(defun fetch-value (var alist)
  (let ((cell (assoc var alist)))
    (when cell
      (cdr cell))))

(defun create-bb (id x y right bottom)
  (unless id (break))
  (add-clause `((bounding_box_left ,id ,x)))
  (add-clause `((bounding_box_top ,id ,y)))
  (add-clause `((bounding_box_right ,id ,right)))
  (add-clause `((bounding_box_bottom ,id ,bottom))))
    
(defun create-rect-bb (alist)
  (let ((x (fetch-value '?x alist))
        (y (fetch-value '?y alist)) 
        (w (fetch-value '?w alist)) 
        (h (fetch-value '?h alist))
        (id (fetch-value '?id alist)))
    (let ((right (+ x w))
          (bottom (+ y h)))
      (create-bb id x y right bottom))))

(defun make-bounding-boxes-for-rectangles ()
  (let ((rect-list (prove-all '((rect ?id)
                                (geometry_top_y ?id ?Y)
                                (geometry_left_x ?id ?X)
                                (geometry_w ?id ?W)
                                (geometry_h ?id ?H))
                              no-bindings)))
    (format *error-output* "~&rect-list=~S" (length rect-list))
    (mapc #'(lambda (alist)
              (create-rect-bb alist))
          rect-list)))

(defun make-bounding-boxes-for-speech-bubbles ()
  (let ((speech-list (prove-all '((speechbubble ?id)
                                (geometry_top_y ?id ?Y)
                                (geometry_left_x ?id ?X)
                                (geometry_w ?id ?W)
                                (geometry_h ?id ?H))
                              no-bindings)))
    (format *error-output* "~&speech-list=~S" (length speech-list))
    (mapc #'(lambda (alist)
              (create-rect-bb alist))
          speech-list)))


(defun create-text-bb (alist)
  (let ((x (fetch-value '?x alist))
        (y (fetch-value '?y alist)) 
        (w (fetch-value '?w alist)) 
        (h (fetch-value '?h alist))
        (id (fetch-value '?id alist)))
    (let ((right (+ x w))
          (bottom (+ y h))
	  (left (- x w))
	  (top (- y h)))
      (create-bb id left top right bottom))))
       
(defun make-bounding-boxes-for-text ()
  (let ((text-list (prove-all '((text ?id ?str)
                                (geometry_top_y ?id ?Y)
                                (geometry_center_x ?id ?X)
                                (geometry_w ?id ?W)
                                (geometry_h ?id ?H))
                              no-bindings)))
    (format *error-output* "~&text-list=~S" (length text-list))
    (mapc #'(lambda (alist)
              (create-text-bb alist))
          text-list)))


(defun create-ellipse-bb (alist)
  (let ((x (fetch-value '?x alist))
        (y (fetch-value '?y alist)) 
        (w (fetch-value '?w alist)) 
        (h (fetch-value '?h alist))
        (id (fetch-value '?id alist)))
    (let ((right (+ x w))
          (bottom (+ y h))
	  (left (- x w))
	  (top (- y h)))
      (create-bb id left top right bottom))))
       
(defun make-bounding-boxes-for-ellipses ()
  (let ((ellipse-list (prove-all '((ellipse ?id)
                                (geometry_center_y ?id ?Y)
                                (geometry_center_x ?id ?X)
                                (geometry_w ?id ?W)
                                (geometry_h ?id ?H))
                              no-bindings)))
    (format *error-output* "~&ellipse-list=~S" (length ellipse-list))
    (mapc #'(lambda (alist)
              (create-ellipse-bb alist))
          ellipse-list)))


(defun bounding-boxes ()
  (make-bounding-boxes-for-rectangles)
  (make-bounding-boxes-for-text)
  (make-bounding-boxes-for-speech-bubbles)
  (make-bounding-boxes-for-ellipses))
