(in-package :arrowgrams/compiler/util)

(defmethod find-all-text ((self e/part:part))
  (let ((all-text-rules '((:text-id (:? id) (:? str) (:? bb-left) (:? bb-top) (:? bb-right) (:? bb-bottom))
                          (:text (:? id) (:? str))
                          (:bounding-box_left (:? id) (:? bb-left))
                          (:bounding-box_top (:? id) (:? bb-top))
                          (:bounding-box_right (:? id) (:? bb-right))
                          (:bounding-box_bottom (:? id) (:? bb-bottom)))))
    (let ((fb (cons all-text-rules fb (cl-event-passing-user::@get-instance-var self :fb))))
      (hprolog:prove nil '((:text-id (:? tid) (:? str))) fb hprolog:*empty* 1 nil fb nil))))

(defmethod find-all-speechbubbles ((self e/part:part))
  (let ((all-speechbubble-rules '((:speechbubble-id (:? id) (:? bb-left) (:? bb-top) (:? bb-right) (:? bb-bottom))
                                  (:speechbubble (:? id))
                                  (:bounding-box_left (:? id) (:? bb-left))
                                  (:bounding-box_top (:? id) (:? bb-top))
                                  (:bounding-box_right (:? id) (:? bb-right))
                                  (:bounding-box_bottom (:? id) (:? bb-bottom)))))
    (let ((fb (cons all-text-rules fb (cl-event-passing-user::@get-instance-var self :fb))))
      (hprolog:prove nil '((:text-id (:? tid) (:? str))) fb hprolog:*empty* 1 nil fb nil))))
