(in-package :arrowgrams/compiler)

(defconstant +rules+
'
(((:CALC_BOUNDS_MAIN)
  (:LISP (TRUE))
  (:CREATEBOUNDINGBOXES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CREATEBOUNDINGBOXES)
  (:CONDITIONALCREATEELLIPSEBB)
  (:CONDRECT)
  (:CONDSPEECH)
  (:CONDTEXT))
 ((:CONDRECT) (:RECT (:? ID)) (:CREATERECTBOUNDINGBOX (:? ID)))
 ((:CONDSPEECH)
  (:SPEECHBUBBLE (:? ID))
  (:CREATERECTBOUNDINGBOX (:? ID)))
 ((:CONDTEXT) (:TEXT (:? ID) (:? _)) (:CREATETEXTBOUNDINGBOX (:? ID)))
 ((:CONDITIONALCREATEELLIPSEBB)
  (:ELLIPSE (:? _))
  (:ELLIPSE (:? ID))
  (:CREATEELLIPSEBOUNDINGBOX (:? ID)))
 ((:CREATERECTBOUNDINGBOX (:? ID))
  (:GEOMETRY_LEFT_X (:? ID) (:? X))
  (:GEOMETRY_TOP_Y (:? ID) (:? Y))
  (:GEOMETRY_W (:? ID) (:? WIDTH))
  (:GEOMETRY_H (:? ID) (:? HEIGHT))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? X))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? Y))))
  (:LISPV (:? RIGHT) (+ (:? X) (:? WIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
 ((:CREATETEXTBOUNDINGBOX (:? ID))
  (:GEOMETRY_CENTER_X (:? ID) (:? CX))
  (:GEOMETRY_TOP_Y (:? ID) (:? Y))
  (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
  (:GEOMETRY_H (:? ID) (:? HEIGHT))
  (:LISPV (:? X) (PRIMARY (- (:? CX) :? HALFWIDTH) NIL))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? X))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? Y))))
  (:LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
 ((:CREATEELLIPSEBOUNDINGBOX (:? ID))
  (:GEOMETRY_CENTER_X (:? ID) (:? CX))
  (:GEOMETRY_CENTER_Y (:? ID) (:? CY))
  (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
  (:GEOMETRY_H (:? ID) (:? HALFHEIGHT))
  (:LISPV (:? LEFT) (- (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? TOP) (- (:? CY) (:? HALFHEIGHT)))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? LEFT))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? TOP))))
  (:LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? CY) (:? HALFHEIGHT)))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
  (:LISP-METHOD (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
 ((:ASSIGN_PARENTS_TO_ELLISPSES_MAIN)
  (:LISP (TRUE))
  (:ELLIPSE (:? ELLIPSEID))
  (:MAKEPARENTFORELLIPSE (:? ELLIPSEID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MAKEPARENTFORELLIPSE (:? ELLIPSEID))
  (:COMPONENT (:? COMP))
  (:LISP-METHOD (ASSERTA '(:PARENT (:? COMP) (:? ELLIPSEID)))))
 ((:FIND_COMMENTS_MAIN)
  (:LISP (TRUE))
  (:CONDCOMMENT)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDCOMMENT) (:SPEECHBUBBLE (:? ID)) (:CREATECOMMENTS (:? ID)))
 ((:CREATECOMMENTS (:? BUBBLEID))
  (:TEXT (:? TEXTID) (:? _))
  (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID))
  :!
  (:LISP-METHOD (ASSERTA '(:USED (:? TEXTID))))
  (:LISP-METHOD (ASSERTA '(:COMMENT (:? TEXTID)))))
 ((:CREATECOMMENTS (:? _))
  (:LISP-METHOD (ASSERTA '(:LOG "fATAL" :COMMENTFINDERFAILED)))
  (:LISP (TRUE)))
 ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID))
  (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BUBBLEID)))
 ((:FIND_METADATA_MAIN)
  (:LISP (TRUE))
  (:CONDMETA)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDMETA)
  (:METADATA (:? MID) (:? _))
  (:CREATEMETADATARECT (:? MID)))
 ((:CREATEMETADATARECT (:? MID))
  (:METADATA (:? MID) (:? TEXTID))
  (:RECT (:? BOXID))
  (:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
  (:LISP-METHOD (ASSERTA '(:USED (:? TEXTID))))
  (:LISP-METHOD (ASSERTA '(:ROUNDEDRECT (:? BOXID))))
  (:COMPONENT (:? MAIN))
  (:LISP-METHOD (ASSERTA '(:PARENT (:? MAIN) (:? BOXID))))
  (:LISP-METHOD (ASSERTA '(:LOG (:? BOXID) :BOX_IS_META_DATA)))
  (:LISP-METHOD (RETRACT '(:RECT (:? BOXID)))))
 ((:CREATEMETADATARECT (:? TEXTID))
  (:WEN " ")
  (:WE "createMetaDataRect failed ")
  (:WEN (:? TEXTID)))
 ((:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
  (:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
 ((:ADD_KINDS_MAIN)
  (:LISP (TRUE))
  (:CONDDOKINDS)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDDOKINDS) (:ELTYPE (:? ID) :BOX) (:CREATEALLKINDS (:? ID)) :!)
 ((:CREATEALLKINDS (:? BOXID))
  (:TEXT (:? TEXTID) (:? _))
  (:CREATEONEKIND (:? BOXID) (:? TEXTID)))
 ((:CREATEONEKIND (:? BOXID) (:? TEXTID))
  (:TEXT (:? TEXTID) (:? STR))
  (:NOT-USED (:? TEXTID))
  (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
  (:LISP-METHOD (ASSERTA '(:USED (:? TEXTID))))
  (:LISP-METHOD (ASSERTA '(:KIND (:? BOXID) (:? STR)))))
 ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
  (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
 ((:ADD_SELFPORTS_MAIN)
  (:LISP (TRUE))
  (:CONDELLIPSES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDELLIPSES)
  (:ELLIPSE (:? ELLIPSEID))
  (:CREATESELFPORTS (:? ELLIPSEID)))
 ((:CREATESELFPORTS (:? ELLIPSEID))
  (:PORT (:? PORTID))
  (:BOUNDING_BOX_LEFT (:? ELLIPSEID) (:? ELEFTX))
  (:BOUNDING_BOX_TOP (:? ELLIPSEID) (:? ETOPY))
  (:BOUNDING_BOX_RIGHT (:? ELLIPSEID) (:? ERIGHTX))
  (:BOUNDING_BOX_BOTTOM (:? ELLIPSEID) (:? EBOTTOMY))
  (:BOUNDING_BOX_LEFT (:? PORTID) (:? PORTLEFTX))
  (:BOUNDING_BOX_TOP (:? PORTID) (:? PORTTOPY))
  (:BOUNDING_BOX_RIGHT (:? PORTID) (:? PORTRIGHTX))
  (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? PORTBOTTOMY))
  (:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  (:TEXT (:? NAMEID) (:? NAME))
  (:TEXTCOMPLETELYINSIDE (:? NAMEID) (:? ELLIPSEID))
  :!
  (:LISP-METHOD (ASSERTA '(:PARENT (:? ELLIPSEID) (:? PORTID))))
  (:LISP-METHOD (ASSERTA '(:USED (:? NAMEID))))
  (:LISP-METHOD (ASSERTA '(:PORTNAMEBYID (:? PORTID) (:? NAMEID))))
  (:LISP-METHOD (ASSERTA '(:PORTNAME (:? PORTID) (:? NAME)))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? _)
   (:? EBOTTOMY))
  (:LISP (<= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP (>= (:? PORTRIGHTX) (:? ELEFTX)))
  (:LISP (>= (:? PORTTOPY) (:? ETOPY)))
  (:LISP (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? _))
  (:LISP (<= (:? PORTTOPY) (:? ETOPY)))
  (:LISP (>= (:? PORTBOTTOMY) (:? ETOPY)))
  (:LISP (>= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP (<= (:? PORTRIGHTX) (:? ERIGHTX))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? _)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  (:LISP (<= (:? PORTLEFTX) (:? ERIGHTX)))
  (:LISP (>= (:? PORTRIGHTX) (:? ERIGHTX)))
  (:LISP (>= (:? PORTTOPY) (:? ETOPY)))
  (:LISP (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? _)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  (:LISP (<= (:? PORTTOPY) (:? EBOTTOMY)))
  (:LISP (>= (:? PORTBOTTOMY) (:? EBOTTOMY)))
  (:LISP (>= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP (<= (:? PORTRIGHTX) (:? ERIGHTX))))
 ((:TEXTCOMPLETELYINSIDE (:? TEXTID) (:? OBJID))
  (:BOUNDINGBOXCOMPLETELYINSIDE (:? TEXTID) (:? OBJID)))
 ((:MAKE_UNKNOWN_PORT_NAMES_MAIN)
  (:LISP (TRUE))
  (:UNUSED_TEXT (:? TEXTID))
  (:CREATEPORTNAMEIFNOTAKINDNAME (:? TEXTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:UNUSED_TEXT (:? TEXTID))
  (:TEXT (:? TEXTID) (:? _))
  (:NOT-USED (:? TEXTID)))
 ((:CREATEPORTNAMEIFNOTAKINDNAME (:? TEXTID))
  (:LISP-METHOD (ASSERTA '(:UNASSIGNED (:? TEXTID)))))
 ((:CREATE_CENTERS_MAIN)
  (:LISP (TRUE))
  (:UNASSIGNED (:? TEXTID))
  (:CREATECENTER (:? TEXTID))
  (:CONDITIONALELLIPSECENTERS)
  (:ELTYPE (:? PORTID) "port")
  (:CREATECENTER (:? PORTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDITIONALELLIPSECENTERS)
  (:ELLIPSE (:? _))
  (:ELLIPSE (:? ID))
  (:CREATECENTER (:? ID)))
 ((:CREATECENTER (:? ID))
  (:BOUNDING_BOX_LEFT (:? ID) (:? LEFT))
  (:BOUNDING_BOX_TOP (:? ID) (:? TOP))
  (:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))
  (:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM))
  (:LISPV (:? W) (- (:? RIGHT) (:? LEFT)))
  (:LISPV (:? W) (/ (:? W) 2))
  (:LISPV (:? X) (+ (:? LEFT) (:? W)))
  (:LISP-METHOD (ASSERTA '(:CENTER_X (:? ID) (:? X))))
  (:LISPV (:? H) (- (:? BOTTOM) (:? TOP)))
  (:LISPV (:? H) (/ (:? H) 2))
  (:LISPV (:? Y) (+ (:? TOP) (:? H)))
  (:LISP-METHOD (ASSERTA '(:CENTER_Y (:? ID) (:? Y)))))
 ((:CALCULATE_DISTANCES_MAIN)
  (:LISP (TRUE))
  (:LISP (SET-COUNTER 0))
  (:ELTYPE (:? PORTID) "port")
  (:MAKEALLCENTERPAIRS (:? PORTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MAKEALLCENTERPAIRS (:? PORTID))
  (:UNASSIGNED (:? TEXTID))
  (:MAKECENTERPAIR (:? PORTID) (:? TEXTID)))
 ((:MAKECENTERPAIR (:? PORTID) (:? TEXTID))
  (:MAKEPAIRID (:? PORTID) (:? JOINPAIRID))
  (:CENTER_X (:? PORTID) (:? PX))
  (:CENTER_Y (:? PORTID) (:? PY))
  (:CENTER_X (:? TEXTID) (:? TX))
  (:CENTER_Y (:? TEXTID) (:? TY))
  (:LISPV (:? DX) (- (:? TX) (:? PX)))
  (:LISPV (:? DY) (- (:? TY) (:? PY)))
  (:LISPV (:? DXSQ) (* (:? DX) (:? DX)))
  (:LISPV (:? DYSQ) (* (:? DY) (:? DY)))
  (:LISPV (:? SUM) (+ (:? DXSQ) (:? DYSQ)))
  (:LISPV
   (:? DISTANCE)
   (PREDICATE
    (STRUCTURE (ATOM (IDENT "sqrt")) TERM-LIST (TERM (VAR "Sum")))
    NIL))
  (:LISP-METHOD
   (ASSERTA '(:JOIN_DISTANCE (:? JOINPAIRID) (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA '(:DISTANCE_XY (:? JOINPAIRID) (:? DISTANCE)))))
 ((:MAKEPAIRID (:? PORTID) (:? NEWID))
  (:LISPV (:? NEWID) (READ-COUNTER))
  (:LISP-METHOD (ASSERTA '(:JOIN_CENTERPAIR (:? PORTID) (:? NEWID))))
  (:LISP (INC-COUNTER)))
 ((:MARKINDEXEDPORTS_MAIN)
  (:LISP (TRUE))
  (:PORTNAME (:? P) (:? _))
  (:MARKNAMED (:? P))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MARKNAMED (:? P))
  (:SINK (:? _) (:? P))
  (:LISP-METHOD (ASSERTA '(:NAMEDSINK (:? P)))))
 ((:MARKNAMED (:? P))
  (:SOURCE (:? _) (:? P))
  (:LISP-METHOD (ASSERTA '(:NAMEDSOURCE (:? P)))))
 ((:MARKNAME (:? P)) (:WE "port ") (:WE (:? P)) (:WEN " has no name!"))
 ((:COINCIDENTPORTS_MAIN)
  (:LISP (TRUE))
  (:COINCIDENTSINKS)
  (:COINCIDENTSOURCES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:COINCIDENTSINKS)
  (:NAMEDSINK (:? X))
  (:FINDALLCOINCIDENTSINKS (:? X)))
 ((:FINDALLCOINCIDENTSINKS (:? A))
  (:SINK (:? _) (:? B))
  (:FINDCOINCIDENTSINK (:? A) (:? B)))
 ((:FINDCOINCIDENTSINK (:? A) (:? B))
  (:CENTER_Y (:? A) (:? AY))
  (:CENTER_Y (:? B) (:? BY))
  (:CENTER_X (:? A) (:? AX))
  (:CENTER_X (:? B) (:? BX))
  (:NOT-SAME (:? A) (:? B))
  (:SINK (:? _) (:? B))
  (:NOTNAMEDSINK (:? B))
  (:CLOSETOGETHER (:? AX) (:? BX))
  (:CLOSETOGETHER (:? AY) (:? BY))
  (:PORTNAME (:? A) (:? N))
  (:LISP-METHOD (ASSERTA '(:LOG :COINCIDENTSINK (:? A) (:? B) (:? N))))
  (:LISP-METHOD (ASSERTA '(:PORTNAME (:? B) (:? N)))))
 ((:NOTNAMEDSINK (:? X)) (:NOT-NAMEDSINK (:? X)))
 ((:COINCIDENTSOURCES)
  (:NAMEDSOURCE (:? X))
  (:FINDALLCOINCIDENTSOURCES (:? X)))
 ((:FINDALLCOINCIDENTSOURCES (:? A))
  (:SOURCE (:? _) (:? B))
  (:FINDCOINCIDENTSOURCE (:? A) (:? B)))
 ((:FINDCOINCIDENTSOURCE (:? A) (:? B))
  (:CENTER_Y (:? A) (:? AY))
  (:CENTER_Y (:? B) (:? BY))
  (:CENTER_X (:? A) (:? AX))
  (:CENTER_X (:? B) (:? BX))
  (:NOT-SAME (:? A) (:? B))
  (:SOURCE (:? _) (:? B))
  (:NOTNAMEDSOURCE (:? B))
  (:CLOSETOGETHER (:? AX) (:? BX))
  (:CLOSETOGETHER (:? AY) (:? BY))
  (:PORTNAME (:? A) (:? N))
  (:LISP-METHOD
   (ASSERTA '(:LOG :COINCIDENTSOURCE (:? A) (:? B) (:? N))))
  (:LISP-METHOD (ASSERTA '(:PORTNAME (:? B) (:? N)))))
 ((:NOTNAMEDSOURCE (:? X)) (:NAMEDSOURCE (:? X)) :! :FAIL)
 ((:NOTNAMEDSOURCE (:? X)) (:LISP (TRUE)))
 ((:CLOSETOGETHER (:? X) (:? Y))
  (:LISPV (:? DELTA) (- (:? X) (:? Y)))
  (:LISPV
   (:? ABS)
   (PREDICATE
    (STRUCTURE (ATOM (IDENT "abs")) TERM-LIST (TERM (VAR "Delta")))
    NIL))
  (:LISP (>= 20 (:? ABS))))
 ((:CLOSETOGETHER (:? _) (:? _)) :FAIL)
 ((:MARK_DIRECTIONS_MAIN) (:LISP (TRUE)) (:LISP (TRUE)) (:LISP (TRUE)))
 ((:MATCH_PORTS_TO_COMPONENTS_MAIN)
  (:LISP (TRUE))
  (:MATCH_PORTS)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MATCH_PORTS)
  (:ELTYPE (:? PORTID) :PORT)
  (:ASSIGN_PARENT_FOR_PORT (:? PORTID)))
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:PARENT (:? _) (:? PORTID))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:ELLIPSE (:? PARENTID))
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD (ASSERTA '(:PARENT (:? PARENTID) (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:ELTYPE (:? PARENTID) :BOX)
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD (ASSERTA '(:PARENT (:? PARENTID) (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:PORTNAME (:? PORTID) (:? _))
  (:LISP-METHOD (ASSERTA '(:LOG (:? PORTID) "is_nc")))
  (:LISP-METHOD (ASSERTA '(:N_C (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:LISP-METHOD (ASSERTA '(:LOG (:? PORTID) "is_nc")))
  (:LISP-METHOD (ASSERTA '(:N_C (:? PORTID))))
  :!)
 ((:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:BOUNDING_BOX_LEFT (:? PORTID) (:? LEFT))
  (:BOUNDING_BOX_TOP (:? PORTID) (:? TOP))
  (:BOUNDING_BOX_RIGHT (:? PORTID) (:? RIGHT))
  (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? BOTTOM))
  (:BOUNDING_BOX_LEFT (:? PARENTID) (:? PLEFT))
  (:BOUNDING_BOX_TOP (:? PARENTID) (:? PTOP))
  (:BOUNDING_BOX_RIGHT (:? PARENTID) (:? PRIGHT))
  (:BOUNDING_BOX_BOTTOM (:? PARENTID) (:? PBOTTOM))
  (:INTERSECTS
   (:? LEFT)
   (:? TOP)
   (:? RIGHT)
   (:? BOTTOM)
   (:? PLEFT)
   (:? PTOP)
   (:? PRIGHT)
   (:? PBOTTOM)))
 ((:INTERSECTS
   (:? PORTLEFT)
   (:? PORTTOP)
   (:? PORTRIGHT)
   (:? PORTBOTTOM)
   (:? PARENTLEFT)
   (:? PARENTTOP)
   (:? PARENTRIGHT)
   (:? PARENTBOTTOM))
  (:LISP (<= (:? PORTLEFT) (:? PARENTRIGHT)))
  (:LISP (>= (:? PORTRIGHT) (:? PARENTLEFT)))
  (:LISP (<= (:? PORTTOP) (:? PARENTBOTTOM)))
  (:LISP (>= (:? PORTBOTTOM) (:? PARENTTOP))))
 ((:PINLESS_MAIN)
  (:LISP (TRUE))
  (:ELTYPE (:? PARENTID) :BOX)
  (:CHECK_HAS_PORT (:? PARENTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECK_HAS_PORT (:? PARENTID))
  (:PARENT (:? PARENTID) (:? PORTID))
  (:PORT (:? PORTID))
  :!)
 ((:CHECK_HAS_PORT (:? PARENTID))
  (:ROUNDEDRECT (:? PARENTID))
  (:LISP-METHOD (ASSERTA '(:PINLESS (:? PARENTID)))))
 ((:SEM_PARTSHAVESOMEPORTS_MAIN)
  (:LISP (TRUE))
  (:ELTYPE (:? PARTID) :BOX)
  (:CHECK_HAS_PORT (:? PARTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECK_HAS_PORT (:? PARTID))
  (:PARENT (:? PARTID) (:? PORTID))
  (:PORT (:? PORTID))
  :!)
 ((:CHECK_HAS_PORT (:? PARTID)) (:PINLESS (:? PARTID)) :!)
 ((:CHECK_HAS_PORT (:? PARTID))
  (:LISP-METHOD
   (ASSERTA
    '(:LOG
      (:? PARTID)
      "error_part_has_no_port"
      "partsHaveSomePorts"))))
 ((:SEM_PORTSHAVESINKORSOURCE_MAIN)
  (:LISP (TRUE))
  (:PORT (:? PORTID))
  (:HASSINKORSOURCE (:? PORTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:HASSINKORSOURCE (:? PORTID)) (:SINK (:? _) (:? PORTID)) :!)
 ((:HASSINKORSOURCE (:? PORTID)) (:SOURCE (:? _) (:? PORTID)) :!)
 ((:HASSINKORSOURCE (:? PORTID))
  (:LISP-METHOD
   (ASSERTA
    '(:LOG "fATAL" :PORT_ISNT_MARKED_SINK_OR_SOURCE (:? PORTID))))
  :!)
 ((:SEM_NODUPLICATEKINDS_MAIN)
  (:LISP (TRUE))
  (:ELTYPE (:? RECTID) :BOX)
  (:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:KIND (:? RECTID) (:? KIND1))
  (:KIND (:? RECTID) (:? KIND2))
  (:NOT-SAME (:? KIND1) (:? KIND2))
  :!
  (:LISP-METHOD
   (ASSERTA
    '(:LOG "fATAL_ERRORS_DURING_COMPILATION" "noDuplicateKinds")))
  (:LISP-METHOD (ASSERTA '(:LOG "rect " (:? RECTID))))
  (:LISP-METHOD (ASSERTA '(:LOG (:? KIND1))))
  (:LISP-METHOD (ASSERTA '(:LOG (:? KIND2))))
  (:NLE)
  (:WE "ERROR!!! ")
  (:WE (:? RECTID))
  (:WE " has more than one kind ")
  (:WE (:? KIND1))
  (:WSPC)
  (:WEN (:? KIND2)))
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:KIND (:? RECTID) (:? _))
  :!)
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:ROUNDEDRECT (:? RECTID))
  :!)
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:LISP-METHOD
   (ASSERTA '(:LOG (:? RECTID) "has_no_kind" "noDuplicateKinds")))
  :!)
 ((:SEM_SPEECHVSCOMMENTS_MAIN)
  (:LISP (TRUE))
  (:LISP (SET-COUNTER 0))
  (:SPEECHBUBBLE (:? ID))
  (:INC :COUNTER (:? _))
  (:COMMENT (:? ID))
  (:DEC :COUNTER (:? _))
  (:LISPV (:? COUNTER) (READ-COUNTER))
  (:CHECKZERO (:? COUNTER))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECKZERO 0) :!)
 ((:CHECKZERO (:? N))
  (:LISP-METHOD
   (ASSERTA '(:LOG "fATAL" "speechCountCommentCount" (:? N)))))
 ((:ASSIGN_WIRE_NUMBERS_TO_EDGES_MAIN)
  (:LISP (SET-COUNTER 0))
  (:LISP (TRUE))
  (:EDGE (:? EDGEID))
  (:ASSIGN_WIRE_NUMBER (:? EDGEID))
  (:LISPV (:? N) (READ-COUNTER))
  (:LISP-METHOD (ASSERTA '(:NWIRES (:? N))))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:ASSIGN_WIRE_NUMBER (:? EDGEID))
  (:LISPV (:? OLD) (READ-COUNTER))
  (:LISP-METHOD (ASSERTA '(:WIRENUM (:? EDGEID) (:? OLD))))
  (:LISP (INC-COUNTER)))
 ((:SELFINPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSOURCEELLIPSE)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDSOURCEELLIPSE)
  (:ELLIPSE (:? ELLIPSEID))
  (:MAKESELFINPUTPINS (:? ELLIPSEID))
  :!)
 ((:MAKESELFINPUTPINS (:? ELLIPSEID))
  (:PARENT (:? MAIN) (:? ELLIPSEID))
  (:COMPONENT (:? MAIN))
  (:PORTFOR (:? ELLIPSEID) (:? PORTID))
  (:SOURCE (:? _) (:? PORTID))
  (:LISP-METHOD (ASSERTA '(:SELFINPUTPIN (:? PORTID))))
  :!)
 ((:SELFOUTPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSINKELLIPSE)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDSINKELLIPSE)
  (:ELLIPSE (:? ELLIPSEID))
  (:MAKESELFOUTPUTPINS (:? ELLIPSEID))
  :!)
 ((:MAKESELFOUTPUTPINS (:? ELLIPSEID))
  (:PARENT (:? MAIN) (:? ELLIPSEID))
  (:COMPONENT (:? MAIN))
  (:PORTFOR (:? ELLIPSEID) (:? PORTID))
  (:SINK (:? _) (:? PORTID))
  (:LISP-METHOD (ASSERTA '(:SELFOUTPUTPIN (:? PORTID))))
  :!)
 ((:INPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSINKRECT)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDSINKRECT) (:RECT (:? RECTID)) (:MAKEINPUTPINS (:? RECTID)) :!)
 ((:MAKEINPUTPINS (:? RECTID))
  (:PORTFOR (:? RECTID) (:? PORTID))
  (:SINK (:? _) (:? PORTID))
  (:LISP-METHOD (ASSERTA '(:INPUTPIN (:? PORTID))))
  :!)
 ((:OUTPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSOURCERECT)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDSOURCERECT)
  (:RECT (:? RECTID))
  (:MAKEOUTPUTPINS (:? RECTID))
  :!)
 ((:MAKEOUTPUTPINS (:? RECTID))
  (:PORTFOR (:? RECTID) (:? PORTID))
  (:SOURCE (:? _) (:? PORTID))
  (:LISP-METHOD (ASSERTA '(:OUTPUTPIN (:? PORTID))))
  :!)
 ((:BOUNDINGBOXCOMPLETELYINSIDE (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
  (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP (>= (:? L1) (:? L2)))
  (:LISP (>= (:? T1) (:? T2)))
  (:LISP (>= (:? R2) (:? R1)))
  (:LISP (>= (:? B2) (:? B1))))
 ((:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP (>= (:? L1) (:? L2)))
  (:LISP (>= (:? T1) (:? T2)))
  (:LISP (>= (:? R2) (:? L1)))
  (:LISP (>= (:? B2) (:? T1))))
 ((:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
  (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
  (:LISPV (:? CX) (+ (:? L1) (- (:? R1) :? L1)))
  (:LISPV (:? CY) (+ (:? T1) (- (:? B1) :? T1)))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP (>= (:? CX) (:? L2)))
  (:LISP (<= (:? CX) (:? R2)))
  (:LISP (>= (:? CY) (:? T2)))
  (:LISP (<= (:? CY) (:? B2))))
 ((:DUMPLOG)
  (:LOG (:? X))
  (:DUMPLOG (:? X))
  (:LOG (:? Z) (:? Y))
  (:DUMPLOG (:? Z) (:? Y))
  (:LOG (:? A) (:? B) (:? C))
  (:DUMPLOG (:? A) (:? B) (:? C))
  (:LOG (:? D) (:? E) (:? F) (:? G))
  (:DUMPLOG (:? D) (:? E) (:? F) (:? G))
  (:LOG (:? H) (:? I) (:? J) (:? K) (:? L))
  (:DUMPLOG (:? H) (:? I) (:? J) (:? K) (:? L))
  (:LOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R))
  (:DUMPLOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R))
  (:LOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1))
  (:DUMPLOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1))
  (:LOG
   (:? M2)
   (:? N2)
   (:? O2)
   (:? P2)
   (:? Q2)
   (:? R2)
   (:? S2)
   (:? T2))
  (:DUMPLOG
   (:? M2)
   (:? N2)
   (:? O2)
   (:? P2)
   (:? Q2)
   (:? R2)
   (:? S2)
   (:? T2))
  (:LOG
   (:? L3)
   (:? M3)
   (:? N3)
   (:? O3)
   (:? P3)
   (:? Q3)
   (:? R3)
   (:? S3)
   (:? T3))
  (:DUMPLOG
   (:? L3)
   (:? M3)
   (:? N3)
   (:? O3)
   (:? P3)
   (:? Q3)
   (:? R3)
   (:? S3)
   (:? T3)))
 ((:DUMPLOG (:? W)) (:WEN (:? W)))
 ((:DUMPLOG (:? W) (:? X)) (:WE (:? W)) (:WSPC) (:WEN (:? X)))
 ((:DUMPLOG (:? W) (:? X) (:? Y))
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WEN (:? Y)))
 ((:DUMPLOG (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _)) (:LISP (TRUE)))
 ((:DUMPLOG (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _)) (:LISP (TRUE)))
 ((:DUMPLOG (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _))
  (:LISP (TRUE)))
 ((:DUMPLOG (:? S) (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? S))
  (:WSPC)
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _))
  (:LISP (TRUE)))
 ((:DUMPLOG
   (:? R)
   (:? S)
   (:? T)
   (:? U)
   (:? V)
   (:? W)
   (:? X)
   (:? Y)
   (:? Z))
  (:WE (:? R))
  (:WSPC)
  (:WE (:? S))
  (:WSPC)
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? _)
   (:? _)
   (:? _)
   (:? _)
   (:? _)
   (:? _)
   (:? _)
   (:? _)
   (:? _))
  (:LISP (TRUE)))
 ((:WSPC) (:LISP (FORMAT *STANDARD-ERROR* "~A" " ")))
 ((:NLE) (:LISP (FORMAT *STANDARD-ERROR* "~%")))
 ((:WE (:? X)) (:LISP (FORMAT *STANDARD-ERROR* "~A" (:? X))))
 ((:WEN (:? X)) (:WE (:? X)) (:NLE))
 ((:PORTFOR (:? RECTORELLIPSEID) (:? PORTID))
  (:PARENT (:? RECTORELLIPSEID) (:? PORTID))
  (:PORT (:? PORTID)))))

