(in-package :arrowgrams/compiler)

(defclass rules (compiler-part) ())
(defmethod e/part:busy-p ((self rules)) (call-next-method))
(defmethod e/part:clone ((self rules)) (call-next-method))
(defmethod e/part:first-time ((self rules)) (call-next-method))

(defparameter *rules*
'
(((:NONAME (:? PORT)) (:PORTNAMEBYID (:? PORT) (:? NAMEID)) :! :FAIL)
 ((:NONAME (:? PORT)))
 ((:NOT_SAME (:? X) (:? X)) :! :FAIL)
 ((:NOT_SAME (:? X) (:? Y)))
 ((:NOT_USED (:? X)) (:USED (:? X)) :! :FAIL)
 ((:NOT_USED (:? X)))
 ((:NOT_NAMEDSINK (:? X)) (:NAMEDSINK (:? X)) :! :FAIL)
 ((:NOT_NAMEDSINK (:? X)))
 ((:WSPC) (:LISP (OUT " ")) :!)
 ((:NLE) (:LISP (OUT-NL)) :!)
 ((:WE (:? WE_ARG)) (:LISP (OUT (:? WE_ARG))) :!)
 ((:WEN (:? WEN_ARG)) (:WE (:? WEN_ARG)) (:NLE) :!)
 ((:CALC_BOUNDS_MAIN)
  (:LISP (TRUE))
  (:CREATEBOUNDINGBOXES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CREATEBOUNDINGBOXES)
  (:CONDITIONALCREATEELLIPSEBB)
  (:CONDRECT)
  (:CONDSPEECH)
  (:CONDTEXT))
 ((:CONDRECT)
  (:FORALL (:RECT (:? ID)) (:CREATERECTBOUNDINGBOX (:? ID))))
 ((:CONDSPEECH)
  (:FORALL (:SPEECHBUBBLE (:? ID)) (:CREATERECTBOUNDINGBOX (:? ID))))
 ((:CONDTEXT)
  (:FORALL
   (:TEXT (:? ID) (:? DONTCARE_29530))
   (:CREATETEXTBOUNDINGBOX (:? ID))))
 ((:CONDITIONALCREATEELLIPSEBB)
  (:ELLIPSE (:? DONTCARE_29531))
  (:FORALL (:ELLIPSE (:? ID)) (:CREATEELLIPSEBOUNDINGBOX (:? ID))))
 ((:CREATERECTBOUNDINGBOX (:? ID))
  (:GEOMETRY_LEFT_X (:? ID) (:? X))
  (:GEOMETRY_TOP_Y (:? ID) (:? Y))
  (:GEOMETRY_W (:? ID) (:? WIDTH))
  (:GEOMETRY_H (:? ID) (:? HEIGHT))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_LEFT
                                       (:? ID)
                                       (:? X))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_TOP
                                       (:? ID)
                                       (:? Y))))
  (:LISPV (:? RIGHT) (+ (:? X) (:? WIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_RIGHT
                                       (:? ID)
                                       (:? RIGHT))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_BOTTOM
                                       (:? ID)
                                       (:? BOTTOM)))))
 ((:CREATETEXTBOUNDINGBOX (:? ID))
  (:GEOMETRY_CENTER_X (:? ID) (:? CX))
  (:GEOMETRY_TOP_Y (:? ID) (:? Y))
  (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
  (:GEOMETRY_H (:? ID) (:? HEIGHT))
  (:LISPV (:? X) (- (:? CX) (:? HALFWIDTH)))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_LEFT
                                       (:? ID)
                                       (:? X))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_TOP
                                       (:? ID)
                                       (:? Y))))
  (:LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_RIGHT
                                       (:? ID)
                                       (:? RIGHT))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_BOTTOM
                                       (:? ID)
                                       (:? BOTTOM)))))
 ((:CREATEELLIPSEBOUNDINGBOX (:? ID))
  (:GEOMETRY_CENTER_X (:? ID) (:? CX))
  (:GEOMETRY_CENTER_Y (:? ID) (:? CY))
  (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
  (:GEOMETRY_H (:? ID) (:? HALFHEIGHT))
  (:LISPV (:? LEFT) (- (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? TOP) (- (:? CY) (:? HALFHEIGHT)))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_LEFT
                                       (:? ID)
                                       (:? LEFT))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_TOP
                                       (:? ID)
                                       (:? TOP))))
  (:LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
  (:LISPV (:? BOTTOM) (+ (:? CY) (:? HALFHEIGHT)))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_RIGHT
                                       (:? ID)
                                       (:? RIGHT))))
  (:LISP-METHOD
   (ASSERTA (:BOUNDING_BOX_BOTTOM
                                       (:? ID)
                                       (:? BOTTOM)))))
 ((:ASSIGN_PARENTS_TO_ELLISPSES_MAIN)
  (:LISP (TRUE))
  (:FORALL
   (:ELLIPSE (:? ELLIPSEID))
   (:MAKEPARENTFORELLIPSE (:? ELLIPSEID)))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MAKEPARENTFORELLIPSE (:? ELLIPSEID))
  (:COMPONENT (:? COMP))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? COMP)
                                       (:? ELLIPSEID)))))
 ((:FIND_COMMENTS_MAIN)
  (:LISP (TRUE))
  (:CONDCOMMENT)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDCOMMENT)
  (:FORALL (:SPEECHBUBBLE (:? ID)) (:CREATECOMMENTS (:? ID))))
 ((:CREATECOMMENTS (:? BUBBLEID))
  (:TEXT (:? TEXTID) (:? DONTCARE_29532))
  (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID))
  :!
  (:LISP-METHOD
   (ASSERTA (:USED (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:COMMENT (:? TEXTID)))))
 ((:CREATECOMMENTS (:? DONTCARE_29533))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       "fATAL"
                                       :COMMENTFINDERFAILED)))
  (:LISP (TRUE)))
 ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID))
  (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BUBBLEID)))
 ((:FIND_METADATA_MAIN)
  (:LISP (TRUE))
  (:CONDMETA)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDMETA)
  (:METADATA (:? MID) (:? TEXTID))
  (:RECT (:? BOXID))
  (:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
  :!
  (:LISP-METHOD
   (ASSERTA (:USED (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:ROUNDEDRECT (:? BOXID))))
  (:COMPONENT (:? MAIN))
  (:LISP-METHOD
   (ASSERTA (:PARENT (:? MAIN) (:? BOXID))))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       (:? BOXID)
                                       :BOX_IS_META_DATA)))
  (:LISP-METHOD (RETRACT (:RECT (:? BOXID))))
  :FAIL)
 ((:CREATEMETADATARECT (:? MID))
  (:METADATA (:? MID) (:? TEXTID))
  (:RECT (:? BOXID))
  (:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
  (:LISP-METHOD
   (ASSERTA (:USED (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:ROUNDEDRECT (:? BOXID))))
  (:COMPONENT (:? MAIN))
  (:LISP-METHOD
   (ASSERTA (:PARENT (:? MAIN) (:? BOXID))))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       (:? BOXID)
                                       :BOX_IS_META_DATA)))
  (:LISP-METHOD
   (RETRACT (:RECT (:? BOXID)))))
 ((:CREATEMETADATARECT (:? TEXTID))
  (:WEN " ")
  (:WE "createMetaDataRect failed ")
  (:WEN (:? TEXTID)))
 ((:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
  (:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
 ((:ADD_KINDS_MAIN)
  (:LISP (TRUE))
  (:CONDDOKINDS)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDDOKINDS)
  (:ELTYPE (:? BOXID) :BOX)
  (:TEXT (:? TEXTID) (:? STR))
  (:NOT_USED (:? TEXTID))
  (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
  :!
  (:LISP-METHOD
   (ASSERTA (:USED (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:KIND (:? BOXID) (:? STR)))))
 ((:CREATEALLKINDS (:? BOXID))
  (:TEXT (:? TEXTID) (:? DONTCARE_29534))
  (:CREATEONEKIND (:? BOXID) (:? TEXTID))
  :FAIL)
 ((:CREATEALLKINDS (:? DONTCARE_29535))
  (:LISP (TRUE)))
 ((:CREATEONEKIND (:? BOXID) (:? TEXTID))
  (:TEXT (:? TEXTID) (:? STR))
  (:NOT_USED (:? TEXTID))
  (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
  (:LISP-METHOD
   (ASSERTA (:USED (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:KIND (:? BOXID) (:? STR)))))
 ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
  (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
 ((:ADD_SELFPORTS_MAIN)
  (:LISP (TRUE))
  (:CONDELLIPSES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CONDELLIPSES)
  (:ELLIPSE (:? ELLIPSEID))
  (:PORT (:? PORTID))
  (:BOUNDING_BOX_LEFT (:? ELLIPSEID) (:? ELEFTX))
  (:BOUNDING_BOX_TOP (:? ELLIPSEID) (:? ETOPY))
  (:BOUNDING_BOX_RIGHT (:? ELLIPSEID) (:? ERIGHTX))
  (:BOUNDING_BOX_BOTTOM (:? ELLIPSEID) (:? EBOTTOMY))
  (:BOUNDING_BOX_LEFT (:? PORTID) (:? PORTLEFTX))
  (:BOUNDING_BOX_TOP (:? PORTID) (:? PORTTOPY))
  (:BOUNDING_BOX_RIGHT (:? PORTID) (:? PORTRIGHTX))
  (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? PORTBOTTOMY))
  (:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  :!
  (:TEXT (:? NAMEID) (:? NAME))
  (:TEXTCOMPLETELYINSIDE (:? NAMEID) (:? ELLIPSEID))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? ELLIPSEID)
                                       (:? PORTID))))
  (:LISP-METHOD
   (ASSERTA (:USED (:? NAMEID))))
  (:LISP-METHOD
   (ASSERTA (:PORTNAMEBYID
                                       (:? PORTID)
                                       (:? NAMEID))))
  (:LISP-METHOD
   (ASSERTA (:PORTNAME
                                       (:? PORTID)
                                       (:? NAME))))
  :FAIL)
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? DONTCARE_29536)
   (:? EBOTTOMY))
  (:LISP-TRUE-FAIL (<= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP-TRUE-FAIL (>= (:? PORTRIGHTX) (:? ELEFTX)))
  (:LISP-TRUE-FAIL (>= (:? PORTTOPY) (:? ETOPY)))
  (:LISP-TRUE-FAIL (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? DONTCARE_29537))
  (:LISP-TRUE-FAIL (<= (:? PORTTOPY) (:? ETOPY)))
  (:LISP-TRUE-FAIL (>= (:? PORTBOTTOMY) (:? ETOPY)))
  (:LISP-TRUE-FAIL (>= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP-TRUE-FAIL (<= (:? PORTRIGHTX) (:? ERIGHTX))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? DONTCARE_29538)
   (:? ETOPY)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  (:LISP-TRUE-FAIL (<= (:? PORTLEFTX) (:? ERIGHTX)))
  (:LISP-TRUE-FAIL (>= (:? PORTRIGHTX) (:? ERIGHTX)))
  (:LISP-TRUE-FAIL (>= (:? PORTTOPY) (:? ETOPY)))
  (:LISP-TRUE-FAIL (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
 ((:PORTTOUCHESELLIPSE
   (:? PORTLEFTX)
   (:? PORTTOPY)
   (:? PORTRIGHTX)
   (:? PORTBOTTOMY)
   (:? ELEFTX)
   (:? DONTCARE_29539)
   (:? ERIGHTX)
   (:? EBOTTOMY))
  (:LISP-TRUE-FAIL (<= (:? PORTTOPY) (:? EBOTTOMY)))
  (:LISP-TRUE-FAIL (>= (:? PORTBOTTOMY) (:? EBOTTOMY)))
  (:LISP-TRUE-FAIL (>= (:? PORTLEFTX) (:? ELEFTX)))
  (:LISP-TRUE-FAIL (<= (:? PORTRIGHTX) (:? ERIGHTX))))
 ((:TEXTCOMPLETELYINSIDE (:? TEXTID) (:? OBJID))
  (:BOUNDINGBOXCOMPLETELYINSIDE (:? TEXTID) (:? OBJID)))
 ((:MAKE_UNKNOWN_PORT_NAMES_MAIN)
  (:TEXT (:? TEXTID) (:? DONTCARE_29540))
  (:NOT_USED (:? TEXTID))
  (:LISP-METHOD
   (ASSERTA (:UNASSIGNED (:? TEXTID))))
  :FAIL)
 ((:UNUSED_TEXT (:? TEXTID))
  (:TEXT (:? TEXTID) (:? DONTCARE_29541))
  (:NOT_USED (:? TEXTID)))
 ((:CREATEPORTNAMEIFNOTAKINDNAME (:? TEXTID))
  (:LISP-METHOD
   (ASSERTA (:UNASSIGNED (:? TEXTID)))))
 ((:CREATE_CENTERS_MAIN)
  (:CREATETEXTCENTERS)
  (:CREATEELLIPSECENTERS)
  (:CREATEPORTCENTERS)
  :FAIL)
 ((:CREATETEXTCENTERS)
  (:UNASSIGNED (:? TEXTID))
  (:CREATECENTER (:? TEXTID)))
 ((:CREATEELLIPSECENTERS) (:ELLIPSE (:? EID)) (:CREATECENTER (:? EID)))
 ((:CREATEPORTCENTERS)
  (:ELTYPE (:? PORTID) :PORT)
  (:CREATECENTER (:? PORTID)))
 ((:CONDITIONALELLIPSECENTERS)
  (:ELLIPSE (:? DONTCARE_29542))
  (:FORALL (:ELLIPSE (:? ID)) (:CREATECENTER (:? ID))))
 ((:CREATECENTER (:? ID))
  (:BOUNDING_BOX_LEFT (:? ID) (:? LEFT))
  (:BOUNDING_BOX_TOP (:? ID) (:? TOP))
  (:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))
  (:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM))
  (:LISPV (:? W) (- (:? RIGHT) (:? LEFT)))
  (:LISPV (:? TEMP) (/ (:? W) 2))
  (:LISPV (:? X) (+ (:? LEFT) (:? TEMP)))
  (:LISP-METHOD
   (ASSERTA (:CENTER_X (:? ID) (:? X))))
  (:LISPV (:? H) (- (:? BOTTOM) (:? TOP)))
  (:LISPV (:? TEMPH) (/ (:? H) 2))
  (:LISPV (:? Y) (+ (:? TOP) (:? TEMPH)))
  (:LISP-METHOD
   (ASSERTA (:CENTER_Y (:? ID) (:? Y)))))
 ((:CALCULATE_DISTANCES_MAIN)
  (:LISP (SET-COUNTER 0))
  :!
  (:ELTYPE (:? PORTID) :PORT)
  (:UNASSIGNED (:? TEXTID))
  (:LISPV (:? NEWID) (READ-COUNTER))
  (:LISP-METHOD
   (ASSERTA (:JOIN_CENTERPAIR
                                       (:? PORTID)
                                       (:? NEWID))))
  (:LISP (INC-COUNTER))
  (:CENTER_X (:? PORTID) (:? PX))
  (:CENTER_Y (:? PORTID) (:? PY))
  (:CENTER_X (:? TEXTID) (:? TX))
  (:CENTER_Y (:? TEXTID) (:? TY))
  (:LISPV (:? DX) (- (:? TX) (:? PX)))
  (:LISPV (:? DY) (- (:? TY) (:? PY)))
  (:LISPV (:? DXSQ) (* (:? DX) (:? DX)))
  (:LISPV (:? DYSQ) (* (:? DY) (:? DY)))
  (:LISPV (:? SUM) (+ (:? DXSQ) (:? DYSQ)))
  (:LISPV (:? DISTANCE) (SQRT (:? SUM)))
  (:LISP-METHOD
   (ASSERTA (:JOIN_DISTANCE
                                       (:? NEWID)
                                       (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:DISTANCE_XY
                                       (:? NEWID)
                                       (:? DISTANCE))))
  :FAIL)
 ((:MAKEALLCENTERPAIRS (:? PORTID))
  (:FORALL
   (:UNASSIGNED (:? TEXTID))
   (:MAKECENTERPAIR (:? PORTID) (:? TEXTID))))
 ((:OLD_MAKECENTERPAIR (:? PORTID) (:? TEXTID))
  (:MAKEPAIRID (:? PORTID) (:? JOINPAIRID))
  (:CENTER_X (:? PORTID) (:? PX))
  (:CENTER_Y (:? PORTID) (:? PY))
  (:CENTER_X (:? TEXTID) (:? TX))
  (:CENTER_Y (:? TEXTID) (:? TY))
  (:LISPV (:? DX) (- (:? TX) (:? PX)))
  (:LISPV (:? DY) (- (:? TY) (:? PY)))
  (:LISPV (:? DXSQ) (* (:? DX) (:? DX)))
  (:LISPV (:? DYSQ) (* (:? DY) (:? DY)))
  (:LISPV (:? SUM) (+ (:? DXSQ) (:? DYSQ)))
  (:LISPV (:? DISTANCE) (SQRT (:? SUM)))
  (:LISP-METHOD
   (ASSERTA (:JOIN_DISTANCE
                                       (:? JOINPAIRID)
                                       (:? TEXTID))))
  (:LISP-METHOD
   (ASSERTA (:DISTANCE_XY
                                       (:? JOINPAIRID)
                                       (:? DISTANCE)))))
 ((:MAKEPAIRID (:? PORTID) (:? NEWID))
  (:LISPV (:? NEWID) (READ-COUNTER))
  (:LISP-METHOD
   (ASSERTA (:JOIN_CENTERPAIR
                                       (:? PORTID)
                                       (:? NEWID))))
  (:LISP (INC-COUNTER)))
 ((:COLLECT_NAMELESS_PORTS
   (:? PORTID)
   (:? LEFT)
   (:? TOP)
   (:? RIGHT)
   (:? BOTTOM))
  (:PORT (:? PORTID))
  (:NONAME (:? PORTID))
  (:BOUNDING_BOX_LEFT (:? PORTID) (:? LEFT))
  (:BOUNDING_BOX_TOP (:? PORTID) (:? TOP))
  (:BOUNDING_BOX_RIGHT (:? PORTID) (:? RIGHT))
  (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? BOTTOM)))
 ((:COLLECT_UNUSED_TEXT
   (:? TEXTID)
   (:? STR)
   (:? LEFT)
   (:? TOP)
   (:? RIGHT)
   (:? BOTTOM))
  (:TEXT (:? TEXTID) (:? STR))
  (:UNUSED_TEXT (:? TEXTID))
  (:BOUNDING_BOX_LEFT (:? TEXTID) (:? LEFT))
  (:BOUNDING_BOX_TOP (:? TEXTID) (:? TOP))
  (:BOUNDING_BOX_RIGHT (:? TEXTID) (:? RIGHT))
  (:BOUNDING_BOX_BOTTOM (:? TEXTID) (:? BOTTOM)))
 ((:COLLECT_UNASSIGNED_TEXT (:? TEXTID) (:? STRID))
  (:TEXT (:? TEXTID) (:? STRID))
  (:UNASSIGNED (:? TEXTID)))
 ((:COLLECT_PORT (:? PORTID)) (:PORT (:? PORTID)))
 ((:COLLECT_JOINS
   (:? JOINID)
   (:? TEXTID)
   (:? PORTID)
   (:? DISTANCE)
   (:? STRID))
  (:JOIN_DISTANCE (:? JOINID) (:? TEXTID))
  (:JOIN_CENTERPAIR (:? PORTID) (:? JOINID))
  (:DISTANCE_XY (:? JOINID) (:? DISTANCE))
  (:TEXT (:? TEXTID) (:? STRID)))
 ((:MARKINDEXEDPORTS_MAIN)
  (:PORTNAME (:? P) (:? DONTCARE_29545))
  (:MARKNAMED (:? P))
  :FAIL)
 ((:MARKNAMED (:? P))
  (:SINK (:? DONTCARE_29546) (:? P))
  :!
  (:LISP-METHOD
   (ASSERTA (:NAMEDSINK (:? P)))))
 ((:MARKNAMED (:? P))
  (:SOURCE (:? DONTCARE_29547) (:? P))
  :!
  (:LISP-METHOD
   (ASSERTA (:NAMEDSOURCE (:? P)))))
 ((:COINCIDENTPORTS_MAIN)
  (:LISP (TRUE))
  (:COINCIDENTSINKS)
  (:COINCIDENTSOURCES)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:FINDCOINCIDENTSINK (:? A) (:? B))
  (:NOTNAMEDSINK (:? B))
  :!
  (:NOT_SAME (:? A) (:? B))
  :!
  (:CENTER_X (:? A) (:? AX))
  :!
  (:CENTER_X (:? B) (:? BX))
  :!
  (:CLOSETOGETHER (:? AX) (:? BX))
  (:CENTER_Y (:? A) (:? AY))
  :!
  (:CENTER_Y (:? B) (:? BY))
  :!
  (:CLOSETOGETHER (:? AY) (:? BY))
  (:PORTNAME (:? A) (:? N))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       :COINCIDENTSINK
                                       (:? A)
                                       (:? B)
                                       (:? N))))
  (:LISP-METHOD
   (ASSERTA (:PORTNAME (:? B) (:? N)))))
 ((:!))
 ((:NOTNAMEDSINK (:? X)) (:NOT_NAMEDSINK (:? X)))
 ((:COINCIDENTSINKS (:? A) (:? B))
  (:NAMEDSINK (:? A))
  (:FINDALLCOINCIDENTSINKS (:? A) (:? B)))
 ((:FINDALLCOINCIDENTSINKS (:? A) (:? B))
  (:SINK (:? DONTCARE_29548) (:? B))
  (:FINDCOINCIDENTSINK (:? A) (:? B))
  :FAIL)
 ((:COINCIDENTSOURCES (:? A) (:? B))
  (:NAMEDSOURCE (:? A))
  (:FINDALLCOINCIDENTSOURCES (:? A) (:? B)))
 ((:FINDALLCOINCIDENTSOURCES (:? A) (:? B))
  (:SOURCE (:? DONTCARE_29549) (:? B))
  (:FINDCOINCIDENTSOURCE (:? A) (:? B))
  :FAIL)
 ((:FINDCOINCIDENTSOURCE (:? A) (:? B))
  (:NOTNAMEDSOURCE (:? B))
  (:NOT_SAME (:? A) (:? B))
  (:CENTER_X (:? A) (:? AX))
  :!
  (:CENTER_X (:? B) (:? BX))
  :!
  (:CLOSETOGETHER (:? AX) (:? BX))
  (:CENTER_Y (:? A) (:? AY))
  :!
  (:CENTER_Y (:? B) (:? BY))
  :!
  (:CLOSETOGETHER (:? AY) (:? BY))
  (:PORTNAME (:? A) (:? N))
  :!
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       :COINCIDENTSOURCE
                                       (:? A)
                                       (:? B)
                                       (:? N))))
  (:LISP-METHOD
   (ASSERTA (:PORTNAME (:? B) (:? N))))
  :!)
 ((:NOTNAMEDSOURCE (:? X)) (:NAMEDSOURCE (:? X)) :! :FAIL)
 ((:NOTNAMEDSOURCE (:? X)) (:LISP (TRUE)))
 ((:CLOSETOGETHER (:? X) (:? Y))
  (:LISPV (:? DELTA) (- (:? X) (:? Y)))
  (:LISPV (:? ABS) (ABS (:? DELTA)))
  (:LISP-TRUE-FAIL (>= 20 (:? ABS))))
 ((:CLOSETOGETHER (:? DONTCARE_29550) (:? DONTCARE_29551)) :FAIL)
 ((:MARK_DIRECTIONS_MAIN)
  (:LISP (TRUE))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MATCH_PORTS_TO_COMPONENTS_MAIN)
  (:LISP (TRUE))
  (:MATCH_PORTS)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:MATCH_PORTS_TO_COMPONENTS (:? PORTID))
  (:ELTYPE (:? PORTID) :PORT)
  (:NO_PARENT (:? PORTID))
  (:NEW_ASSIGN_PARENT_FOR_PORT (:? PORTID)))
 ((:NO_PARENT (:? X)) (:PARENT (:? DONTCARE_29552) (:? X)) :! :FAIL)
 ((:NO_PARENT (:? X)))
 ((:NEW_ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:ELLIPSE (:? PARENTID))
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? PARENTID)
                                       (:? PORTID)))))
 ((:NEW_ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:RECT (:? PARENTID))
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? PARENTID)
                                       (:? PORTID)))))
 ((:MARK_NC (:? PORTID))
  (:NO_PARENT (:? PORTID))
  (:ELTYPE (:? PORTID) :PORT)
  (:LISP-METHOD
   (ASSERTA (:LOG (:? PORTID) "is_nc")))
  (:LISP-METHOD
   (ASSERTA (:N_C (:? PORTID)))))
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:PARENT (:? DONTCARE_29553) (:? PORTID))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:ELLIPSE (:? PARENTID))
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? PARENTID)
                                       (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:ELTYPE (:? PARENTID) :BOX)
  (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:LISP-METHOD
   (ASSERTA (:PARENT
                                       (:? PARENTID)
                                       (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:PORTNAME (:? PORTID) (:? DONTCARE_29554))
  (:LISP-METHOD
   (ASSERTA (:LOG (:? PORTID) "is_nc")))
  (:LISP-METHOD (ASSERTA (:N_C (:? PORTID))))
  :!)
 ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:LOG (:? PORTID) "is_nc")))
  (:LISP-METHOD (ASSERTA (:N_C (:? PORTID))))
  :!)
 ((:PORTINTERSECTION (:? PORTID) (:? PARENTID))
  (:BOUNDING_BOX_LEFT (:? PORTID) (:? LEFT))
  :!
  (:BOUNDING_BOX_TOP (:? PORTID) (:? TOP))
  :!
  (:BOUNDING_BOX_RIGHT (:? PORTID) (:? RIGHT))
  :!
  (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? BOTTOM))
  :!
  (:BOUNDING_BOX_LEFT (:? PARENTID) (:? PLEFT))
  :!
  (:BOUNDING_BOX_TOP (:? PARENTID) (:? PTOP))
  :!
  (:BOUNDING_BOX_RIGHT (:? PARENTID) (:? PRIGHT))
  :!
  (:BOUNDING_BOX_BOTTOM (:? PARENTID) (:? PBOTTOM))
  :!
  (:INTERSECTS
   (:? LEFT)
   (:? TOP)
   (:? RIGHT)
   (:? BOTTOM)
   (:? PLEFT)
   (:? PTOP)
   (:? PRIGHT)
   (:? PBOTTOM)))
 ((:INTERSECTS
   (:? PORTLEFT)
   (:? PORTTOP)
   (:? PORTRIGHT)
   (:? PORTBOTTOM)
   (:? PARENTLEFT)
   (:? PARENTTOP)
   (:? PARENTRIGHT)
   (:? PARENTBOTTOM))
  (:LISP-TRUE-FAIL (<= (:? PORTLEFT) (:? PARENTRIGHT)))
  (:LISP-TRUE-FAIL (>= (:? PORTRIGHT) (:? PARENTLEFT)))
  (:LISP-TRUE-FAIL (<= (:? PORTTOP) (:? PARENTBOTTOM)))
  (:LISP-TRUE-FAIL (>= (:? PORTBOTTOM) (:? PARENTTOP))))
 ((:MARK_PINLESS (:? RRECTID))
  (:ROUNDEDRECT (:? RRECTID))
  (:LISP-METHOD
   (ASSERTA (:PINLESS (:? RRECTID)))))
 ((:NEW_SEM_PARTSHAVESOMEPORTS_MAIN (:? RECTID))
  (:ELTYPE (:? RECTID) :BOX)
  (:NOT_PINLESS (:? RECTID))
  (:NO_PORT (:? RECTID))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       (:? PARTID)
                                       "error_part_has_no_port"
                                       "partsHaveSomePorts"))))
 ((:NOT_PINLESS (:? R)) (:PINLESS (:? R)) :! :FAIL)
 ((:NOT_PINLESS (:? R)))
 ((:NO_PORT (:? R))
  (:PARENT (:? R) (:? PORT))
  (:PORT (:? PORT))
  :!
  :FAIL)
 ((:NO_PORT (:? R)))
 ((:SEM_PARTSHAVESOMEPORTS_MAIN)
  (:LISP (TRUE))
  (:FORALL (:ELTYPE (:? PARTID) :BOX) (:CHECK_HAS_PORT (:? PARTID)))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECK_HAS_PORT (:? PARTID))
  (:PARENT (:? PARTID) (:? PORTID))
  (:PORT (:? PORTID))
  :!)
 ((:CHECK_HAS_PORT (:? PARTID)) (:PINLESS (:? PARTID)) :!)
 ((:CHECK_HAS_PORT (:? PARTID))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       (:? PARTID)
                                       "error_part_has_no_port"
                                       "partsHaveSomePorts"))))
 ((:SEM_PORTSHAVESINKORSOURCE_MAIN)
  (:LISP (TRUE))
  (:FORALL (:PORT (:? PORTID)) (:HASSINKORSOURCE (:? PORTID)))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:HASSINKORSOURCE (:? PORTID))
  (:SINK (:? DONTCARE_29555) (:? PORTID))
  :!)
 ((:HASSINKORSOURCE (:? PORTID))
  (:SOURCE (:? DONTCARE_29556) (:? PORTID))
  :!)
 ((:HASSINKORSOURCE (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       "fATAL"
                                       :PORT_ISNT_MARKED_SINK_OR_SOURCE
                                       (:? PORTID))))
  :!)
 ((:SEM_NODUPLICATEKINDS_MAIN)
  (:LISP (TRUE))
  (:FORALL
   (:ELTYPE (:? RECTID) :BOX)
   (:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID)))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:KIND (:? RECTID) (:? KIND1))
  (:KIND (:? RECTID) (:? KIND2))
  (:NOT_SAME (:? KIND1) (:? KIND2))
  :!
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       "fATAL_ERRORS_DURING_COMPILATION"
                                       "noDuplicateKinds")))
  (:LISP-METHOD
   (ASSERTA (:LOG "rect " (:? RECTID))))
  (:LISP-METHOD (ASSERTA (:LOG (:? KIND1))))
  (:LISP-METHOD (ASSERTA (:LOG (:? KIND2))))
  (:NLE)
  (:WE "ERROR!!! ")
  (:WE (:? RECTID))
  (:WE " has more than one kind ")
  (:WE (:? KIND1))
  (:WSPC)
  (:WEN (:? KIND2)))
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:KIND (:? RECTID) (:? DONTCARE_29557))
  :!)
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:ROUNDEDRECT (:? RECTID))
  :!)
 ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       (:? RECTID)
                                       "has_no_kind"
                                       "noDuplicateKinds")))
  :!)
 ((:SEM_SPEECHVSCOMMENTS_MAIN)
  (:LISP (TRUE))
  (:LISP (SET-COUNTER 0))
  (:FORALL (:SPEECHBUBBLE (:? ID)) (:INC :COUNTER (:? DONTCARE_29558)))
  (:FORALL (:COMMENT (:? ID)) (:DEC :COUNTER (:? DONTCARE_29559)))
  (:LISPV (:? COUNTER) (READ-COUNTER))
  (:CHECKZERO (:? COUNTER))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:CHECKZERO 0) :!)
 ((:CHECKZERO (:? N))
  (:LISP-METHOD
   (ASSERTA (:LOG
                                       "fATAL"
                                       "speechCountCommentCount"
                                       (:? N)))))
 ((:ASSIGN_WIRE_NUMBERS_TO_EDGES_MAIN (:? EDGEID))
  (:LISP (SET-COUNTER 0))
  (:LISP (TRUE))
  (:EDGE (:? EDGEID))
  (:ASSIGN_WIRE_NUMBER (:? EDGEID))
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:ASSIGN_WIRE_NUMBER (:? EDGEID))
  (:LISPV (:? OLD) (READ-COUNTER))
  (:LISP-METHOD
   (ASSERTA (:WIRENUM (:? EDGEID) (:? OLD))))
  (:LISP (INC-COUNTER)))
 ((:SELFINPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSOURCEELLIPSE)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:SOURCE_ELLIPSE (:? ELLIPSEID))
  (:ELLIPSE (:? ELLIPSEID))
  (:COMPONENT (:? MAIN))
  (:PARENT (:? MAIN) (:? ELLIPSEID))
  (:PORTFOR (:? ELLIPSEID) (:? PORTID))
  (:SOURCE (:? DONTCARE_29561) (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:SELFINPUTPIN (:? PORTID)))))
 ((:SELFOUTPUTPINS_MAIN)
  (:LISP (TRUE))
  (:CONDSINKELLIPSE)
  (:LISP (TRUE))
  (:LISP (TRUE)))
 ((:SINK_ELLIPSE (:? ELLIPSEID))
  (:PARENT (:? MAIN) (:? ELLIPSEID))
  (:COMPONENT (:? MAIN))
  (:PORTFOR (:? ELLIPSEID) (:? PORTID))
  (:SINK (:? DONTCARE_29562) (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:SELFOUTPUTPIN (:? PORTID)))))
 ((:SINK_RECT (:? RECTID))
  (:RECT (:? RECTID))
  (:PORTFOR (:? RECTID) (:? PORTID))
  (:SINK (:? DONTCARE_29563) (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:INPUTPIN
                                       (:? RECTID)
                                       (:? PORTID)))))
 ((:SOURCE_RECT (:? RECTID))
  (:RECT (:? RECTID))
  (:PORTFOR (:? RECTID) (:? PORTID))
  (:SOURCE (:? DONTCARE_29564) (:? PORTID))
  (:LISP-METHOD
   (ASSERTA (:OUTPUTPIN
                                       (:? RECTID)
                                       (:? PORTID)))))
 ((:BOUNDINGBOXCOMPLETELYINSIDE (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
  (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP-TRUE-FAIL (>= (:? L1) (:? L2)))
  (:LISP-TRUE-FAIL (>= (:? T1) (:? T2)))
  (:LISP-TRUE-FAIL (>= (:? R2) (:? R1)))
  (:LISP-TRUE-FAIL (>= (:? B2) (:? B1))))
 ((:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP-TRUE-FAIL (>= (:? L1) (:? L2)))
  (:LISP-TRUE-FAIL (>= (:? T1) (:? T2)))
  (:LISP-TRUE-FAIL (>= (:? R2) (:? L1)))
  (:LISP-TRUE-FAIL (>= (:? B2) (:? T1))))
 ((:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
  (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
  (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
  (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
  (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
  (:LISPV (:? TEMP1) (- (:? R1) (:? L1)))
  (:LISPV (:? CX) (+ (:? L1) (:? TEMP1)))
  (:LISPV (:? TEMP2) (- (:? B1) (:? T1)))
  (:LISPV (:? CY) (+ (:? T1) (:? TEMP2)))
  (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
  (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
  (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
  (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
  (:LISP-TRUE-FAIL (>= (:? CX) (:? L2)))
  (:LISP-TRUE-FAIL (<= (:? CX) (:? R2)))
  (:LISP-TRUE-FAIL (>= (:? CY) (:? T2)))
  (:LISP-TRUE-FAIL (<= (:? CY) (:? B2))))
 ((:DUMPLOG)
  (:FORALL (:LOG (:? X)) (:DUMPLOG (:? X)))
  (:FORALL (:LOG (:? Z) (:? Y)) (:DUMPLOG (:? Z) (:? Y)))
  (:FORALL (:LOG (:? A) (:? B) (:? C)) (:DUMPLOG (:? A) (:? B) (:? C)))
  (:FORALL
   (:LOG (:? D) (:? E) (:? F) (:? G))
   (:DUMPLOG (:? D) (:? E) (:? F) (:? G)))
  (:FORALL
   (:LOG (:? H) (:? I) (:? J) (:? K) (:? L))
   (:DUMPLOG (:? H) (:? I) (:? J) (:? K) (:? L)))
  (:FORALL
   (:LOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R))
   (:DUMPLOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R)))
  (:FORALL
   (:LOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1))
   (:DUMPLOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1)))
  (:FORALL
   (:LOG
    (:? M2)
    (:? N2)
    (:? O2)
    (:? P2)
    (:? Q2)
    (:? R2)
    (:? S2)
    (:? T2))
   (:DUMPLOG
    (:? M2)
    (:? N2)
    (:? O2)
    (:? P2)
    (:? Q2)
    (:? R2)
    (:? S2)
    (:? T2)))
  (:FORALL
   (:LOG
    (:? L3)
    (:? M3)
    (:? N3)
    (:? O3)
    (:? P3)
    (:? Q3)
    (:? R3)
    (:? S3)
    (:? T3))
   (:DUMPLOG
    (:? L3)
    (:? M3)
    (:? N3)
    (:? O3)
    (:? P3)
    (:? Q3)
    (:? R3)
    (:? S3)
    (:? T3))))
 ((:DUMPLOG (:? W)) (:WEN (:? W)))
 ((:DUMPLOG (:? W) (:? X)) (:WE (:? W)) (:WSPC) (:WEN (:? X)))
 ((:DUMPLOG (:? W) (:? X) (:? Y))
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WEN (:? Y)))
 ((:DUMPLOG (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? DONTCARE_29565)
   (:? DONTCARE_29566)
   (:? DONTCARE_29567)
   (:? DONTCARE_29568)
   (:? DONTCARE_29569))
  (:LISP (TRUE)))
 ((:DUMPLOG (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? DONTCARE_29570)
   (:? DONTCARE_29571)
   (:? DONTCARE_29572)
   (:? DONTCARE_29573)
   (:? DONTCARE_29574)
   (:? DONTCARE_29575))
  (:LISP (TRUE)))
 ((:DUMPLOG (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? DONTCARE_29576)
   (:? DONTCARE_29577)
   (:? DONTCARE_29578)
   (:? DONTCARE_29579)
   (:? DONTCARE_29580)
   (:? DONTCARE_29581)
   (:? DONTCARE_29582))
  (:LISP (TRUE)))
 ((:DUMPLOG (:? S) (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
  (:WE (:? S))
  (:WSPC)
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? DONTCARE_29583)
   (:? DONTCARE_29584)
   (:? DONTCARE_29585)
   (:? DONTCARE_29586)
   (:? DONTCARE_29587)
   (:? DONTCARE_29588)
   (:? DONTCARE_29589)
   (:? DONTCARE_29590))
  (:LISP (TRUE)))
 ((:DUMPLOG
   (:? R)
   (:? S)
   (:? T)
   (:? U)
   (:? V)
   (:? W)
   (:? X)
   (:? Y)
   (:? Z))
  (:WE (:? R))
  (:WSPC)
  (:WE (:? S))
  (:WSPC)
  (:WE (:? T))
  (:WSPC)
  (:WE (:? U))
  (:WSPC)
  (:WE (:? V))
  (:WSPC)
  (:WE (:? W))
  (:WSPC)
  (:WE (:? X))
  (:WSPC)
  (:WE (:? Y))
  (:WSPC)
  (:WEN (:? Z)))
 ((:DUMPLOG
   (:? DONTCARE_29591)
   (:? DONTCARE_29592)
   (:? DONTCARE_29593)
   (:? DONTCARE_29594)
   (:? DONTCARE_29595)
   (:? DONTCARE_29596)
   (:? DONTCARE_29597)
   (:? DONTCARE_29598)
   (:? DONTCARE_29599))
  (:LISP (TRUE)))
 ((:WSPC) (:LISP (OUT " ")))
 ((:NLE) (:LISP (OUT-NL)))
 ((:WE (:? WE_ARG)) (:LISP (OUT (:? WE_ARG))))
 ((:WEN (:? WEN_ARG)) (:WE (:? WEN_ARG)) (:NLE))
 ((:PORTFOR (:? RECTORELLIPSEID) (:? PORTID))
  (:PARENT (:? RECTORELLIPSEID) (:? PORTID))
  (:PORT (:? PORTID)))
 ((:MATCH_TOP_NAME (:? N)) (:COMPONENT (:? N)))
 ((:FIND_ELLIPSE (:? E)) (:ELLIPSE (:? E)))
 ((:FIND_PARTS (:? ID) (:? STRID))
  (:RECT (:? ID))
  (:KIND (:? ID) (:? STRID)))
 ((:FIND_SELF_INPUT_PINS (:? PORTID) (:? STRID))
  (:SELFINPUTPIN (:? PORTID))
  (:PORTNAME (:? PORTID) (:? STRID)))
 ((:FIND_SELF_OUTPUT_PINS (:? PORTID) (:? STRID))
  (:SELFOUTPUTPIN (:? PORTID))
  (:PORTNAME (:? PORTID) (:? STRID)))
 ((:FIND_PART_INPUT_PINS (:? RECTID) (:? PORTID) (:? STRID))
  (:INPUTPIN (:? RECTID) (:? PORTID))
  (:PORTNAME (:? PORTID) (:? STRID)))
 ((:FIND_PART_OUTPUT_PINS (:? RECTID) (:? PORTID) (:? STRID))
  (:OUTPUTPIN (:? RECTID) (:? PORTID))
  (:PORTNAME (:? PORTID) (:? STRID)))
 ((:FIND_WIRE
   (:? PARENTID1)
   (:? PORTID1)
   (:? PORTNAME1)
   (:? PARENTID2)
   (:? PORTID2)
   (:? PORTNAME2))
  (:EDGE (:? EDGE))
  (:SOURCE (:? EDGE) (:? PORTID1))
  (:SINK (:? EDGE) (:? PORTID2))
  (:PORTNAME (:? PORTID2) (:? PORTNAME2))
  (:PORTNAME (:? PORTID1) (:? PORTNAME1))
  (:PARENT (:? PARENTID2) (:? PORTID2))
  (:PARENT (:? PARENTID1) (:? PORTID1)))
 ((:FETCH_METADATA (:? ID) (:? TEXTID) (:? STR))
  (:METADATA (:? ID) (:? TEXTID))
  (:TEXT (:? TEXTID) (:? STR)))))

