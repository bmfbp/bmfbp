(in-package :arrowgrams/compiler)

(defconstant +rules+
  '(
    ((:CALC_BOUNDS_MAIN) (LISP T) (:CREATEBOUNDINGBOXES) (LISP T) (LISP T))
    ((:CREATEBOUNDINGBOXES) (:CONDITIONALCREATEELLIPSEBB) (:CONDRECT) (:CONDSPEECH) (:CONDTEXT))
    ((:CONDRECT) (:RECT (:? ID)) (:CREATERECTBOUNDINGBOX (:? ID)))
    ((:CONDSPEECH) (:SPEECHBUBBLE (:? ID)) (:CREATERECTBOUNDINGBOX (:? ID)))
    ((:CONDTEXT) (:TEXT (:? ID) (:? _)) (:CREATETEXTBOUNDINGBOX (:? ID)))
    ((:CONDITIONALCREATEELLIPSEBB) (:ELLIPSE (:? _)) (:ELLIPSE (:? ID)) (:CREATEELLIPSEBOUNDINGBOX (:? ID)))
    ((:CREATERECTBOUNDINGBOX (:? ID))
     (:GEOMETRY_LEFT_X (:? ID) (:? X))
     (:GEOMETRY_TOP_Y (:? ID) (:? Y))
     (:GEOMETRY_W (:? ID) (:? WIDTH))
     (:GEOMETRY_H (:? ID) (:? HEIGHT))
     (LISP (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? X))))
     (LISP (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? Y))))
     (LISPV (:? RIGHT) (+ (:? X) (:? WIDTH)))
     (LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
     (LISP (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
     (LISP (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
    ((:CREATETEXTBOUNDINGBOX (:? ID))
     (:GEOMETRY_CENTER_X (:? ID) (:? CX))
     (:GEOMETRY_TOP_Y (:? ID) (:? Y))
     (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
     (:GEOMETRY_H (:? ID) (:? HEIGHT))
     (LISPV (:? X) (PRIMARY (- (:? CX) :? HALFWIDTH) NIL))
     (LISP (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? X))))
     (LISP (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? Y))))
     (LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
     (LISPV (:? BOTTOM) (+ (:? Y) (:? HEIGHT)))
     (LISP (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
     (LISP (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
    ((:CREATEELLIPSEBOUNDINGBOX (:? ID))
     (:GEOMETRY_CENTER_X (:? ID) (:? CX))
     (:GEOMETRY_CENTER_Y (:? ID) (:? CY))
     (:GEOMETRY_W (:? ID) (:? HALFWIDTH))
     (:GEOMETRY_H (:? ID) (:? HALFHEIGHT))
     (LISPV (:? LEFT) (- (:? CX) (:? HALFWIDTH)))
     (LISPV (:? TOP) (- (:? CY) (:? HALFHEIGHT)))
     (LISP (ASSERTA '(:BOUNDING_BOX_LEFT (:? ID) (:? LEFT))))
     (LISP (ASSERTA '(:BOUNDING_BOX_TOP (:? ID) (:? TOP))))
     (LISPV (:? RIGHT) (+ (:? CX) (:? HALFWIDTH)))
     (LISPV (:? BOTTOM) (+ (:? CY) (:? HALFHEIGHT)))
     (LISP (ASSERTA '(:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))))
     (LISP (ASSERTA '(:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM)))))
    ((:ASSIGN_PARENTS_TO_ELLISPSES_MAIN) (LISP T) (:ELLIPSE (:? ELLIPSEID)) (:MAKEPARENTFORELLIPSE (:? ELLIPSEID)) (LISP T) (LISP T))
    ((:MAKEPARENTFORELLIPSE (:? ELLIPSEID)) (:COMPONENT (:? COMP)) (LISP (ASSERTA '(:PARENT (:? COMP) (:? ELLIPSEID)))))
    ((:FIND_COMMENTS_MAIN) (LISP T) (:CONDCOMMENT) (LISP T) (LISP T))
    ((:CONDCOMMENT) (:SPEECHBUBBLE (:? ID)) (:CREATECOMMENTS (:? ID)))
    ((:CREATECOMMENTS (:? BUBBLEID))
     (:TEXT (:? TEXTID) (:? _))
     (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID))
     :!
     (LISP (ASSERTA '(:USED (:? TEXTID))))
     (LISP (ASSERTA '(:COMMENT (:? TEXTID)))))
    ((:CREATECOMMENTS (:? _)) (LISP (ASSERTA '(:LOG :\'FATAL\' :COMMENTFINDERFAILED))) (LISP T))
    ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BUBBLEID)) (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BUBBLEID)))
    ((:FIND_METADATA_MAIN) (LISP T) (:CONDMETA) (LISP T) (LISP T))
    ((:CONDMETA) (:METADATA (:? MID) (:? _)) (:CREATEMETADATARECT (:? MID)))
    ((:CREATEMETADATARECT (:? MID))
     (:METADATA (:? MID) (:? TEXTID))
     (:RECT (:? BOXID))
     (:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID))
     (LISP (ASSERTA '(:USED (:? TEXTID))))
     (LISP (ASSERTA '(:ROUNDEDRECT (:? BOXID))))
     (:COMPONENT (:? MAIN))
     (LISP (ASSERTA '(:PARENT (:? MAIN) (:? BOXID))))
     (LISP (ASSERTA '(:LOG (:? BOXID) :BOX_IS_META_DATA)))
     (LISP (RETRACT '(:RECT (:? BOXID)))))
    ((:CREATEMETADATARECT (:? TEXTID)) (:WEN :\'\ \') (:WE :\'CREATEMETADATARECT\ FAILED\ \') (:WEN (:? TEXTID)))
    ((:METADATACOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)) (:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
    ((:ADD_KINDS_MAIN) (LISP T) (:CONDDOKINDS) (LISP T) (LISP T))
    ((:CONDDOKINDS) (:ELTYPE (:? ID) :BOX) (:CREATEALLKINDS (:? ID)) :!)
    ((:CREATEALLKINDS (:? BOXID)) (:TEXT (:? TEXTID) (:? _)) (:CREATEONEKIND (:? BOXID) (:? TEXTID)))
    ((:CREATEONEKIND (:? BOXID) (:? TEXTID))
     (:TEXT (:? TEXTID) (:? STR))
     (:NOT-USED (:? TEXTID))
     (:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID))
     (LISP (ASSERTA '(:USED (:? TEXTID))))
     (LISP (ASSERTA '(:KIND (:? BOXID) (:? STR)))))
    ((:TEXTCOMPLETELYINSIDEBOX (:? TEXTID) (:? BOXID)) (:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? TEXTID) (:? BOXID)))
    ((:ADD_SELFPORTS_MAIN) (LISP T) (:CONDELLIPSES) (LISP T) (LISP T))
    ((:CONDELLIPSES) (:ELLIPSE (:? ELLIPSEID)) (:CREATESELFPORTS (:? ELLIPSEID)))
    ((:CREATESELFPORTS (:? ELLIPSEID))
     (:PORT (:? PORTID))
     (:BOUNDING_BOX_LEFT (:? ELLIPSEID) (:? ELEFTX))
     (:BOUNDING_BOX_TOP (:? ELLIPSEID) (:? ETOPY))
     (:BOUNDING_BOX_RIGHT (:? ELLIPSEID) (:? ERIGHTX))
     (:BOUNDING_BOX_BOTTOM (:? ELLIPSEID) (:? EBOTTOMY))
     (:BOUNDING_BOX_LEFT (:? PORTID) (:? PORTLEFTX))
     (:BOUNDING_BOX_TOP (:? PORTID) (:? PORTTOPY))
     (:BOUNDING_BOX_RIGHT (:? PORTID) (:? PORTRIGHTX))
     (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? PORTBOTTOMY))
     (:PORTTOUCHESELLIPSE (:? PORTLEFTX) (:? PORTTOPY) (:? PORTRIGHTX) (:? PORTBOTTOMY) (:? ELEFTX) (:? ETOPY) (:? ERIGHTX) (:? EBOTTOMY))
     (:TEXT (:? NAMEID) (:? NAME))
     (:TEXTCOMPLETELYINSIDE (:? NAMEID) (:? ELLIPSEID))
     :!
     (LISP (ASSERTA '(:PARENT (:? ELLIPSEID) (:? PORTID))))
     (LISP (ASSERTA '(:USED (:? NAMEID))))
     (LISP (ASSERTA '(:PORTNAMEBYID (:? PORTID) (:? NAMEID))))
     (LISP (ASSERTA '(:PORTNAME (:? PORTID) (:? NAME)))))
    ((:PORTTOUCHESELLIPSE (:? PORTLEFTX) (:? PORTTOPY) (:? PORTRIGHTX) (:? PORTBOTTOMY) (:? ELEFTX) (:? ETOPY) (:? _) (:? EBOTTOMY))
     (LISP (<= (:? PORTLEFTX) (:? ELEFTX)))
     (LISP (>= (:? PORTRIGHTX) (:? ELEFTX)))
     (LISP (>= (:? PORTTOPY) (:? ETOPY)))
     (LISP (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
    ((:PORTTOUCHESELLIPSE (:? PORTLEFTX) (:? PORTTOPY) (:? PORTRIGHTX) (:? PORTBOTTOMY) (:? ELEFTX) (:? ETOPY) (:? ERIGHTX) (:? _))
     (LISP (<= (:? PORTTOPY) (:? ETOPY)))
     (LISP (>= (:? PORTBOTTOMY) (:? ETOPY)))
     (LISP (>= (:? PORTLEFTX) (:? ELEFTX)))
     (LISP (<= (:? PORTRIGHTX) (:? ERIGHTX))))
    ((:PORTTOUCHESELLIPSE (:? PORTLEFTX) (:? PORTTOPY) (:? PORTRIGHTX) (:? PORTBOTTOMY) (:? _) (:? ETOPY) (:? ERIGHTX) (:? EBOTTOMY))
     (LISP (<= (:? PORTLEFTX) (:? ERIGHTX)))
     (LISP (>= (:? PORTRIGHTX) (:? ERIGHTX)))
     (LISP (>= (:? PORTTOPY) (:? ETOPY)))
     (LISP (<= (:? PORTBOTTOMY) (:? EBOTTOMY))))
    ((:PORTTOUCHESELLIPSE (:? PORTLEFTX) (:? PORTTOPY) (:? PORTRIGHTX) (:? PORTBOTTOMY) (:? ELEFTX) (:? _) (:? ERIGHTX) (:? EBOTTOMY))
     (LISP (<= (:? PORTTOPY) (:? EBOTTOMY)))
     (LISP (>= (:? PORTBOTTOMY) (:? EBOTTOMY)))
     (LISP (>= (:? PORTLEFTX) (:? ELEFTX)))
     (LISP (<= (:? PORTRIGHTX) (:? ERIGHTX))))
    ((:TEXTCOMPLETELYINSIDE (:? TEXTID) (:? OBJID)) (:BOUNDINGBOXCOMPLETELYINSIDE (:? TEXTID) (:? OBJID)))
    ((:MAKE_UNKNOWN_PORT_NAMES_MAIN) (LISP T) (:UNUSED_TEXT (:? TEXTID)) (:CREATEPORTNAMEIFNOTAKINDNAME (:? TEXTID)) (LISP T) (LISP T))
    ((:UNUSED_TEXT (:? TEXTID)) (:TEXT (:? TEXTID) (:? _)) (:NOT-USED (:? TEXTID)))
    ((:CREATEPORTNAMEIFNOTAKINDNAME (:? TEXTID)) (LISP (ASSERTA '(:UNASSIGNED (:? TEXTID)))))
    ((:CREATE_CENTERS_MAIN)
     (LISP T)
     (:UNASSIGNED (:? TEXTID))
     (:CREATECENTER (:? TEXTID))
     (:CONDITIONALELLIPSECENTERS)
     (:ELTYPE (:? PORTID) :\'PORT\')
     (:CREATECENTER (:? PORTID))
     (LISP T)
     (LISP T))
    ((:CONDITIONALELLIPSECENTERS) (:ELLIPSE (:? _)) (:ELLIPSE (:? ID)) (:CREATECENTER (:? ID)))
    ((:CREATECENTER (:? ID))
     (:BOUNDING_BOX_LEFT (:? ID) (:? LEFT))
     (:BOUNDING_BOX_TOP (:? ID) (:? TOP))
     (:BOUNDING_BOX_RIGHT (:? ID) (:? RIGHT))
     (:BOUNDING_BOX_BOTTOM (:? ID) (:? BOTTOM))
     (LISPV (:? W) (- (:? RIGHT) (:? LEFT)))
     (LISPV (:? W) (/ (:? W) 2))
     (LISPV (:? X) (+ (:? LEFT) (:? W)))
     (LISP (ASSERTA '(:CENTER_X (:? ID) (:? X))))
     (LISPV (:? H) (- (:? BOTTOM) (:? TOP)))
     (LISPV (:? H) (/ (:? H) 2))
     (LISPV (:? Y) (+ (:? TOP) (:? H)))
     (LISP (ASSERTA '(:CENTER_Y (:? ID) (:? Y)))))
    ((:CALCULATE_DISTANCES_MAIN)
     (LISP T)
     (LISP (SET-COUNTER 0))
     (:ELTYPE (:? PORTID) :\'PORT\')
     (:MAKEALLCENTERPAIRS (:? PORTID))
     (LISP T)
     (LISP T))
    ((:MAKEALLCENTERPAIRS (:? PORTID)) (:UNASSIGNED (:? TEXTID)) (:MAKECENTERPAIR (:? PORTID) (:? TEXTID)))
    ((:MAKECENTERPAIR (:? PORTID) (:? TEXTID))
     (:MAKEPAIRID (:? PORTID) (:? JOINPAIRID))
     (:CENTER_X (:? PORTID) (:? PX))
     (:CENTER_Y (:? PORTID) (:? PY))
     (:CENTER_X (:? TEXTID) (:? TX))
     (:CENTER_Y (:? TEXTID) (:? TY))
     (LISPV (:? DX) (- (:? TX) (:? PX)))
     (LISPV (:? DY) (- (:? TY) (:? PY)))
     (LISPV (:? DXSQ) (* (:? DX) (:? DX)))
     (LISPV (:? DYSQ) (* (:? DY) (:? DY)))
     (LISPV (:? SUM) (+ (:? DXSQ) (:? DYSQ)))
     (LISPV (:? DISTANCE) (PREDICATE (STRUCTURE (ATOM (IDENT "sqrt")) TERM-LIST (TERM (VAR "Sum"))) NIL))
     (LISP (ASSERTA '(:JOIN_DISTANCE (:? JOINPAIRID) (:? TEXTID))))
     (LISP (ASSERTA '(:DISTANCE_XY (:? JOINPAIRID) (:? DISTANCE)))))
    ((:MAKEPAIRID (:? PORTID) (:? NEWID))
     (LISPV (:? NEWID) (READ-COUNTER))
     (LISP (ASSERTA '(:JOIN_CENTERPAIR (:? PORTID) (:? NEWID))))
     (LISP (INC-COUNTER)))
    ((:MARKINDEXEDPORTS_MAIN) (LISP T) (:PORTNAME (:? P) (:? _)) (:MARKNAMED (:? P)) (LISP T) (LISP T))
    ((:MARKNAMED (:? P)) (:SINK (:? _) (:? P)) (LISP (ASSERTA '(:NAMEDSINK (:? P)))))
    ((:MARKNAMED (:? P)) (:SOURCE (:? _) (:? P)) (LISP (ASSERTA '(:NAMEDSOURCE (:? P)))))
    ((:MARKNAME (:? P)) (:WE :\'PORT\ \') (:WE (:? P)) (:WEN :\'\ HAS\ NO\ NAME!\'))
    ((:COINCIDENTPORTS_MAIN) (LISP T) (:COINCIDENTSINKS) (:COINCIDENTSOURCES) (LISP T) (LISP T))
    ((:COINCIDENTSINKS) (:NAMEDSINK (:? X)) (:FINDALLCOINCIDENTSINKS (:? X)))
    ((:FINDALLCOINCIDENTSINKS (:? A)) (:SINK (:? _) (:? B)) (:FINDCOINCIDENTSINK (:? A) (:? B)))
    ((:FINDCOINCIDENTSINK (:? A) (:? B))
     (:CENTER_Y (:? A) (:? AY))
     (:CENTER_Y (:? B) (:? BY))
     (:CENTER_X (:? A) (:? AX))
     (:CENTER_X (:? B) (:? BX))
     (:NOT_SAME (:? A) (:? B))
     (:SINK (:? _) (:? B))
     (:NOTNAMEDSINK (:? B))
     (:CLOSETOGETHER (:? AX) (:? BX))
     (:CLOSETOGETHER (:? AY) (:? BY))
     (:PORTNAME (:? A) (:? N))
     (LISP (ASSERTA '(:LOG :COINCIDENTSINK (:? A) (:? B) (:? N))))
     (LISP (ASSERTA '(:PORTNAME (:? B) (:? N)))))
    ((:NOTNAMEDSINK (:? X)) (:NOT-NAMEDSINK (:? X)))
    ((:COINCIDENTSOURCES) (:NAMEDSOURCE (:? X)) (:FINDALLCOINCIDENTSOURCES (:? X)))
    ((:FINDALLCOINCIDENTSOURCES (:? A)) (:SOURCE (:? _) (:? B)) (:FINDCOINCIDENTSOURCE (:? A) (:? B)))
    ((:FINDCOINCIDENTSOURCE (:? A) (:? B))
     (:CENTER_Y (:? A) (:? AY))
     (:CENTER_Y (:? B) (:? BY))
     (:CENTER_X (:? A) (:? AX))
     (:CENTER_X (:? B) (:? BX))
     (:NOT_SAME (:? A) (:? B))
     (:SOURCE (:? _) (:? B))
     (:NOTNAMEDSOURCE (:? B))
     (:CLOSETOGETHER (:? AX) (:? BX))
     (:CLOSETOGETHER (:? AY) (:? BY))
     (:PORTNAME (:? A) (:? N))
     (LISP (ASSERTA '(:LOG :COINCIDENTSOURCE (:? A) (:? B) (:? N))))
     (LISP (ASSERTA '(:PORTNAME (:? B) (:? N)))))
    ((:NOTNAMEDSOURCE (:? X)) (:NAMEDSOURCE (:? X)) :! :FAIL)
    ((:NOTNAMEDSOURCE (:? X)) (LISP T))
    ((:CLOSETOGETHER (:? X) (:? Y))
     (LISPV (:? DELTA) (- (:? X) (:? Y)))
     (LISPV (:? ABS) (PREDICATE (STRUCTURE (ATOM (IDENT "abs")) TERM-LIST (TERM (VAR "Delta"))) NIL))
     (LISP (>= 20 (:? ABS))))
    ((:CLOSETOGETHER (:? _) (:? _)) :FAIL)
    ((:MARK_DIRECTIONS_MAIN) (LISP T) (LISP T) (LISP T))
    ((:MATCH_PORTS_TO_COMPONENTS_MAIN) (LISP T) (:MATCH_PORTS) (LISP T) (LISP T))
    ((:MATCH_PORTS) (:ELTYPE (:? PORTID) :PORT) (:ASSIGN_PARENT_FOR_PORT (:? PORTID)))
    ((:ASSIGN_PARENT_FOR_PORT (:? PORTID)) (:PARENT (:? _) (:? PORTID)) :!)
    ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
     (:ELLIPSE (:? PARENTID))
     (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
     (LISP (ASSERTA '(:PARENT (:? PARENTID) (:? PORTID))))
     :!)
    ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
     (:ELTYPE (:? PARENTID) :BOX)
     (:PORTINTERSECTION (:? PORTID) (:? PARENTID))
     (LISP (ASSERTA '(:PARENT (:? PARENTID) (:? PORTID))))
     :!)
    ((:ASSIGN_PARENT_FOR_PORT (:? PORTID))
     (:PORTNAME (:? PORTID) (:? _))
     (LISP (ASSERTA '(:LOG (:? PORTID) :\'IS_NC\')))
     (LISP (ASSERTA '(:N_C (:? PORTID))))
     :!)
    ((:ASSIGN_PARENT_FOR_PORT (:? PORTID)) (LISP (ASSERTA '(:LOG (:? PORTID) :\'IS_NC\'))) (LISP (ASSERTA '(:N_C (:? PORTID)))) :!)
    ((:PORTINTERSECTION (:? PORTID) (:? PARENTID))
     (:BOUNDING_BOX_LEFT (:? PORTID) (:? LEFT))
     (:BOUNDING_BOX_TOP (:? PORTID) (:? TOP))
     (:BOUNDING_BOX_RIGHT (:? PORTID) (:? RIGHT))
     (:BOUNDING_BOX_BOTTOM (:? PORTID) (:? BOTTOM))
     (:BOUNDING_BOX_LEFT (:? PARENTID) (:? PLEFT))
     (:BOUNDING_BOX_TOP (:? PARENTID) (:? PTOP))
     (:BOUNDING_BOX_RIGHT (:? PARENTID) (:? PRIGHT))
     (:BOUNDING_BOX_BOTTOM (:? PARENTID) (:? PBOTTOM))
     (:INTERSECTS (:? LEFT) (:? TOP) (:? RIGHT) (:? BOTTOM) (:? PLEFT) (:? PTOP) (:? PRIGHT) (:? PBOTTOM)))
    ((:INTERSECTS (:? PORTLEFT) (:? PORTTOP) (:? PORTRIGHT) (:? PORTBOTTOM) (:? PARENTLEFT) (:? PARENTTOP) (:? PARENTRIGHT) (:? PARENTBOTTOM))
     (LISP (<= (:? PORTLEFT) (:? PARENTRIGHT)))
     (LISP (>= (:? PORTRIGHT) (:? PARENTLEFT)))
     (LISP (<= (:? PORTTOP) (:? PARENTBOTTOM)))
     (LISP (>= (:? PORTBOTTOM) (:? PARENTTOP))))
    ((:PINLESS_MAIN) (LISP T) (:ELTYPE (:? PARENTID) :BOX) (:CHECK_HAS_PORT (:? PARENTID)) (LISP T) (LISP T))
    ((:CHECK_HAS_PORT (:? PARENTID)) (:PARENT (:? PARENTID) (:? PORTID)) (:PORT (:? PORTID)) :!)
    ((:CHECK_HAS_PORT (:? PARENTID)) (:ROUNDEDRECT (:? PARENTID)) (LISP (ASSERTA '(:PINLESS (:? PARENTID)))))
    ((:SEM_PARTSHAVESOMEPORTS_MAIN) (LISP T) (:ELTYPE (:? PARTID) :BOX) (:CHECK_HAS_PORT (:? PARTID)) (LISP T) (LISP T))
    ((:CHECK_HAS_PORT (:? PARTID)) (:PARENT (:? PARTID) (:? PORTID)) (:PORT (:? PORTID)) :!)
    ((:CHECK_HAS_PORT (:? PARTID)) (:PINLESS (:? PARTID)) :!)
    ((:CHECK_HAS_PORT (:? PARTID)) (LISP (ASSERTA '(:LOG (:? PARTID) :\'ERROR_PART_HAS_NO_PORT\' :\'PARTSHAVESOMEPORTS\'))))
    ((:SEM_PORTSHAVESINKORSOURCE_MAIN) (LISP T) (:PORT (:? PORTID)) (:HASSINKORSOURCE (:? PORTID)) (LISP T) (LISP T))
    ((:HASSINKORSOURCE (:? PORTID)) (:SINK (:? _) (:? PORTID)) :!)
    ((:HASSINKORSOURCE (:? PORTID)) (:SOURCE (:? _) (:? PORTID)) :!)
    ((:HASSINKORSOURCE (:? PORTID)) (LISP (ASSERTA '(:LOG :\'FATAL\' :PORT_ISNT_MARKED_SINK_OR_SOURCE (:? PORTID)))) :!)
    ((:SEM_NODUPLICATEKINDS_MAIN) (LISP T) (:ELTYPE (:? RECTID) :BOX) (:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID)) (LISP T) (LISP T))
    ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID))
     (:KIND (:? RECTID) (:? KIND1))
     (:KIND (:? RECTID) (:? KIND2))
     (:NOT_SAME (:? KIND1) (:? KIND2))
     :!
     (LISP (ASSERTA '(:LOG :\'FATAL_ERRORS_DURING_COMPILATION\' :\'NODUPLICATEKINDS\')))
     (LISP (ASSERTA '(:LOG :\'RECT\ \' (:? RECTID))))
     (LISP (ASSERTA '(:LOG (:? KIND1))))
     (LISP (ASSERTA '(:LOG (:? KIND2))))
     (:NLE)
     (:WE :\'ERROR!!!\ \')
     (:WE (:? RECTID))
     (:WE :\'\ HAS\ MORE\ THAN\ ONE\ KIND\ \')
     (:WE (:? KIND1))
     (:WSPC)
     (:WEN (:? KIND2)))
    ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID)) (:KIND (:? RECTID) (:? _)) :!)
    ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID)) (:ROUNDEDRECT (:? RECTID)) :!)
    ((:CHECK_HAS_EXACTLY_ONE_KIND (:? RECTID)) (LISP (ASSERTA '(:LOG (:? RECTID) :\'HAS_NO_KIND\' :\'NODUPLICATEKINDS\'))) :!)
    ((:SEM_SPEECHVSCOMMENTS_MAIN)
     (LISP T)
     (LISP (SET-COUNTER 0))
     (:SPEECHBUBBLE (:? ID))
     (:INC :COUNTER (:? _))
     (:COMMENT (:? ID))
     (:DEC :COUNTER (:? _))
     (LISPV (:? COUNTER) (READ-COUNTER))
     (:CHECKZERO (:? COUNTER))
     (LISP T)
     (LISP T))
    ((:CHECKZERO 0) :!)
    ((:CHECKZERO (:? N)) (LISP (ASSERTA '(:LOG :\'FATAL\' :\'SPEECHCOUNTCOMMENTCOUNT\' (:? N)))))
    ((:ASSIGN_WIRE_NUMBERS_TO_EDGES_MAIN)
     (LISP (SET-COUNTER 0))
     (LISP T)
     (:EDGE (:? EDGEID))
     (:ASSIGN_WIRE_NUMBER (:? EDGEID))
     (LISPV (:? N) (READ-COUNTER))
     (LISP (ASSERTA '(:NWIRES (:? N))))
     (LISP T)
     (LISP T))
    ((:ASSIGN_WIRE_NUMBER (:? EDGEID)) (LISPV (:? OLD) (READ-COUNTER)) (LISP (ASSERTA '(:WIRENUM (:? EDGEID) (:? OLD)))) (LISP (INC-COUNTER)))
    ((:SELFINPUTPINS_MAIN) (LISP T) (:CONDSOURCEELLIPSE) (LISP T) (LISP T))
    ((:CONDSOURCEELLIPSE) (:ELLIPSE (:? ELLIPSEID)) (:MAKESELFINPUTPINS (:? ELLIPSEID)) :!)
    ((:MAKESELFINPUTPINS (:? ELLIPSEID))
     (:PARENT (:? MAIN) (:? ELLIPSEID))
     (:COMPONENT (:? MAIN))
     (:PORTFOR (:? ELLIPSEID) (:? PORTID))
     (:SOURCE (:? _) (:? PORTID))
     (LISP (ASSERTA '(:SELFINPUTPIN (:? PORTID))))
     :!)
    ((:SELFOUTPUTPINS_MAIN) (LISP T) (:CONDSINKELLIPSE) (LISP T) (LISP T))
    ((:CONDSINKELLIPSE) (:ELLIPSE (:? ELLIPSEID)) (:MAKESELFOUTPUTPINS (:? ELLIPSEID)) :!)
    ((:MAKESELFOUTPUTPINS (:? ELLIPSEID))
     (:PARENT (:? MAIN) (:? ELLIPSEID))
     (:COMPONENT (:? MAIN))
     (:PORTFOR (:? ELLIPSEID) (:? PORTID))
     (:SINK (:? _) (:? PORTID))
     (LISP (ASSERTA '(:SELFOUTPUTPIN (:? PORTID))))
     :!)
    ((:INPUTPINS_MAIN) (LISP T) (:CONDSINKRECT) (LISP T) (LISP T))
    ((:CONDSINKRECT) (:RECT (:? RECTID)) (:MAKEINPUTPINS (:? RECTID)) :!)
    ((:MAKEINPUTPINS (:? RECTID)) (:PORTFOR (:? RECTID) (:? PORTID)) (:SINK (:? _) (:? PORTID)) (LISP (ASSERTA '(:INPUTPIN (:? PORTID)))) :!)
    ((:OUTPUTPINS_MAIN) (LISP T) (:CONDSOURCERECT) (LISP T) (LISP T))
    ((:CONDSOURCERECT) (:RECT (:? RECTID)) (:MAKEOUTPUTPINS (:? RECTID)) :!)
    ((:MAKEOUTPUTPINS (:? RECTID)) (:PORTFOR (:? RECTID) (:? PORTID)) (:SOURCE (:? _) (:? PORTID)) (LISP (ASSERTA '(:OUTPUTPIN (:? PORTID)))) :!)
    ((:BOUNDINGBOXCOMPLETELYINSIDE (:? ID1) (:? ID2))
     (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
     (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
     (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
     (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
     (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
     (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
     (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
     (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
     (LISP (>= (:? L1) (:? L2)))
     (LISP (>= (:? T1) (:? T2)))
     (LISP (>= (:? R2) (:? R1)))
     (LISP (>= (:? B2) (:? B1))))
    ((:POINTCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
     (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
     (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
     (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
     (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
     (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
     (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
     (LISP (>= (:? L1) (:? L2)))
     (LISP (>= (:? T1) (:? T2)))
     (LISP (>= (:? R2) (:? L1)))
     (LISP (>= (:? B2) (:? T1))))
    ((:CENTERCOMPLETELYINSIDEBOUNDINGBOX (:? ID1) (:? ID2))
     (:BOUNDING_BOX_LEFT (:? ID1) (:? L1))
     (:BOUNDING_BOX_TOP (:? ID1) (:? T1))
     (:BOUNDING_BOX_RIGHT (:? ID1) (:? R1))
     (:BOUNDING_BOX_BOTTOM (:? ID1) (:? B1))
     (LISPV (:? CX) (+ (:? L1) (- (:? R1) :? L1)))
     (LISPV (:? CY) (+ (:? T1) (- (:? B1) :? T1)))
     (:BOUNDING_BOX_LEFT (:? ID2) (:? L2))
     (:BOUNDING_BOX_TOP (:? ID2) (:? T2))
     (:BOUNDING_BOX_RIGHT (:? ID2) (:? R2))
     (:BOUNDING_BOX_BOTTOM (:? ID2) (:? B2))
     (LISP (>= (:? CX) (:? L2)))
     (LISP (<= (:? CX) (:? R2)))
     (LISP (>= (:? CY) (:? T2)))
     (LISP (<= (:? CY) (:? B2))))
    ((:DUMPLOG)
     (:LOG (:? X))
     (:DUMPLOG (:? X))
     (:LOG (:? Z) (:? Y))
     (:DUMPLOG (:? Z) (:? Y))
     (:LOG (:? A) (:? B) (:? C))
     (:DUMPLOG (:? A) (:? B) (:? C))
     (:LOG (:? D) (:? E) (:? F) (:? G))
     (:DUMPLOG (:? D) (:? E) (:? F) (:? G))
     (:LOG (:? H) (:? I) (:? J) (:? K) (:? L))
     (:DUMPLOG (:? H) (:? I) (:? J) (:? K) (:? L))
     (:LOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R))
     (:DUMPLOG (:? M) (:? N) (:? O) (:? P) (:? Q) (:? R))
     (:LOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1))
     (:DUMPLOG (:? M1) (:? N1) (:? O1) (:? P1) (:? Q1) (:? R1) (:? S1))
     (:LOG (:? M2) (:? N2) (:? O2) (:? P2) (:? Q2) (:? R2) (:? S2) (:? T2))
     (:DUMPLOG (:? M2) (:? N2) (:? O2) (:? P2) (:? Q2) (:? R2) (:? S2) (:? T2))
     (:LOG (:? L3) (:? M3) (:? N3) (:? O3) (:? P3) (:? Q3) (:? R3) (:? S3) (:? T3))
     (:DUMPLOG (:? L3) (:? M3) (:? N3) (:? O3) (:? P3) (:? Q3) (:? R3) (:? S3) (:? T3)))
    ((:DUMPLOG (:? W)) (:WEN (:? W)))
    ((:DUMPLOG (:? W) (:? X)) (:WE (:? W)) (:WSPC) (:WEN (:? X)))
    ((:DUMPLOG (:? W) (:? X) (:? Y)) (:WE (:? W)) (:WSPC) (:WE (:? X)) (:WSPC) (:WEN (:? Y)))
    ((:DUMPLOG (:? W) (:? X) (:? Y) (:? Z)) (:WE (:? W)) (:WSPC) (:WE (:? X)) (:WSPC) (:WE (:? Y)) (:WSPC) (:WEN (:? Z)))
    ((:DUMPLOG (:? V) (:? W) (:? X) (:? Y) (:? Z))
     (:WE (:? V))
     (:WSPC)
     (:WE (:? W))
     (:WSPC)
     (:WE (:? X))
     (:WSPC)
     (:WE (:? Y))
     (:WSPC)
     (:WEN (:? Z)))
    ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _)) (LISP T))
    ((:DUMPLOG (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
     (:WE (:? U))
     (:WSPC)
     (:WE (:? V))
     (:WSPC)
     (:WE (:? W))
     (:WSPC)
     (:WE (:? X))
     (:WSPC)
     (:WE (:? Y))
     (:WSPC)
     (:WEN (:? Z)))
    ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _)) (LISP T))
    ((:DUMPLOG (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
     (:WE (:? T))
     (:WSPC)
     (:WE (:? U))
     (:WSPC)
     (:WE (:? V))
     (:WSPC)
     (:WE (:? W))
     (:WSPC)
     (:WE (:? X))
     (:WSPC)
     (:WE (:? Y))
     (:WSPC)
     (:WEN (:? Z)))
    ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _)) (LISP T))
    ((:DUMPLOG (:? S) (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
     (:WE (:? S))
     (:WSPC)
     (:WE (:? T))
     (:WSPC)
     (:WE (:? U))
     (:WSPC)
     (:WE (:? V))
     (:WSPC)
     (:WE (:? W))
     (:WSPC)
     (:WE (:? X))
     (:WSPC)
     (:WE (:? Y))
     (:WSPC)
     (:WEN (:? Z)))
    ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _)) (LISP T))
    ((:DUMPLOG (:? R) (:? S) (:? T) (:? U) (:? V) (:? W) (:? X) (:? Y) (:? Z))
     (:WE (:? R))
     (:WSPC)
     (:WE (:? S))
     (:WSPC)
     (:WE (:? T))
     (:WSPC)
     (:WE (:? U))
     (:WSPC)
     (:WE (:? V))
     (:WSPC)
     (:WE (:? W))
     (:WSPC)
     (:WE (:? X))
     (:WSPC)
     (:WE (:? Y))
     (:WSPC)
     (:WEN (:? Z)))
    ((:DUMPLOG (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _) (:? _)) (LISP T))
    ((:WSPC) (LISP (FORMAT *STANDARD-ERROR* "~A" :\'\ \')))
    ((:NLE) (LISP (FORMAT *STANDARD-ERROR* "~%")))
    ((:WE (:? X)) (LISP (FORMAT *STANDARD-ERROR* "~A" (:? X))))
    ((:WEN (:? X)) (:WE (:? X)) (:NLE))
    ((:PORTFOR (:? RECTORELLIPSEID) (:? PORTID)) (:PARENT (:? RECTORELLIPSEID) (:? PORTID)) (:PORT (:? PORTID))))
  )