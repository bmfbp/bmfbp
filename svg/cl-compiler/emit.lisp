(in-package :arrowgrams/compiler/emitter)

(defparameter *indentation* 2)

(defun emit-js (s) ;; s is an output stream
  (let ((original-indentation 0))
    (let ((indent (+ *indentation* original-indentation)))
      (iformat s indent "{~%")
      (iformat s indent "name : ~A~%" name)
      (iformat s indent "wirecount : ~A~%" nwires)
      (iformat s indent "metadata : ~S~%" metadata-string)
      (iformat s indent "self : {~%")
      (emit-self self-part s indent)
      (iformat s indent "~%},~%")
      (iformat s indent "parts : [~%")
      (mapc #'(lambda (part) (emit-part part s (+ *indentation* indent)) parts-list))
      (iformat s indent "]~%"))
    (iformat s original-indentation "}~%")))

(defun indent (s n)
  (@:loop
    (@:exit-when (<= n 0))
    (format s " ")
    (decf n)))

(defun iformat (s indent format-string &rest args)
  (indent s indent)
  (apply #'cl:format s format-string args))

(defun emit-self (self s indent)
  (iformat s indent "kindName : self~%")
  (emit-parts-list s indent (composite-parts self))
  (emit-wiring-list s indent (composite-wiring self)))

(defun emit-pins (s indent pin-kind pin-list)
  (iformat s indent "~A : {~%" pin-kind)
  (let ((indent (+ *indentation* indent)))
    (emit-pins s indent (part-input-pins part)))
  (iformat s indent "},~%"))

(defun emit-parts-list (s original-indent parts-list)
  (iformat s original-indent "{~%")
  (let ((indent (+ *indentation* indent)))
    (dolist (part parts-list)
      (iformat s indent "part : {")
      (iformat "~A  : ~S,~%" (part-instance-name part) (part-kind part))))
      (let ((indent (+ *indentation indent)))
	(iformat s indent "kindName : ~S,~%" (part-kind part))
	(iformat s indent "firstTime : ~S,~%" (part-first-time part))
	(iformat s indent "react : ~S,~%" (part-react part))
	(emit-pins s indent "inputs" (part-inputs part))
	(emit-pins s indent "outputs" (part-outputs part))

	(iformat s indent "},~%")
  (iformat s original-indent "}~%"))

(defun emit-part (part s original-indent)
  (indent s original-indent)
  (format s "{%")
  (let ((indent (+ *indentation* indent)))
    (setf indent (+ *indentation* indent))
    (format s "partName : ~A,~%" (instance-name part))
    (format s "kindName : ~A~%," (kind-name part))
    (emit-input-pins part s indent)
    (emit-output-pins part s indent))
  (indent s original-indent)
  (format s "}%"))
