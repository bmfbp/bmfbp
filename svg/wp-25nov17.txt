1.  We start with the SVG drawing "save-and-email-records-daily-2.svg"

2.  The ASCII XML for this file is in 2.txt (or 2.lisp, no diff).

3.  SVG parser removes noise and produces 3.lisp.  Advise me if there are portions of 2.txt that we should not throw away.

3a. delete ?xml line
3b. delete !DOCTYPE line
3c. delete <svg smlns=... line
3d. delete <defs/> line
3e. convert <g transform="translate(0.5,0.5)"> to Lisp, e.g. (translate (0.5 0.5) ... ) "..." represents Lisp code from recursively parsing the remainder.  All SVG transform lines become new Lisp lists (translate (x y) ...).
3f. I'm making the assumption that we have a convention in SVG drawings - all paths represent simple line segements where the coordinates are translated into 'absl or 'rell (I don't think we have any of these, at least no in this example).  Discard all fill / stroke / etc.  The convention is that we draw everything in black and white.  Paths with Z will represent arrowheads by convention.  It would be nice to have the parser (or a pass before it) type-check that the conventions are held - no colors, etc.  Later passes (Prolog) can check the sanity of lines touching lines (to form boxes) and Z paths to be arrow headed lines.
3g.  All <path d="M ...> forms become Lisp line forms (line 'absm ...).
3h.  Discard switched and foreignObjects,  parse the text contained in switches.
3i.  <text ... /text> become Lisp forms (text x y "THETEXT")

3j.  See 3.lisp to see a manual translation of 2.txt into nested Lisp forms.
3k.  Leave options for translation of other items, if we find a need for them.

3l.  The next pass, written in lisp (already written), knows how to fold all of the nested translate's.  It applies the translations directly and recursively to all of its children, flattening the result into a single list containing only absolute coordinates.
