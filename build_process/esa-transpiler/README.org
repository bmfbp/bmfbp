* overview
  This directory contains that ESA (Encapsulated Software Assets) transpiler.
  The transpile is built using (2) pasm and (1) the stack language transpiler.
  Pasm is used to create dsl.lisp from esa.pasm.
  Stack-dsl is used to create exprtypes.lisp from exprtypes.dsl.
  The final ESA transpiler is used in ../esa.
  The final ESA transpiler uses parser-mechanisms.lisp and v2mechanisms.lisp to support its operation.
* usage
  use scripts, below
  N.B. to ql:quickload :arrowgrams/esa..
    1) create exprtype.lisp (from exprtype.dsl, see below, for script)
    2) build esa-dsl.lisp from esa.rp 
    3) load esa
* 1) create exprtypes.lisp, exprtypes.json, mechanisms.lisp
#+name: esa
#+begin_src lisp :results output
  (ql:quickload :stack-dsl/use)
#+end_src
#+name: esa
#+begin_src lisp :results output
  (stack-dsl:transpile-stack
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/exprtypes.dsl")
     "CL-USER"
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/exprtypes.lisp")
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/exprtypes.json")
     "ARROWGRAMS/ESA-TRANSPILER"
      (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/mechanisms.lisp")
     )
#+end_src
* 2) create dsl.lisp (from dsl.pasm)
#+name: esa
#+begin_src lisp :results output
   (uiop:run-program "rm -rf ~/.cache/common-lisp")
   (uiop:run-program "rm -rf */*.fasl */*/*/.fasl")
   (uiop:run-program "rm -rf */*~ */*/*/*~")
  (ql:quickload :parsing-assembler/use)
#+end_src
#+name: esa
#+begin_src lisp :results output
  (pasm:pasm-to-file "ARROWGRAMS/ESA-TRANSPILER"
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/dsl.pasm")
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/dsl.lisp"))
#+end_src
* 3) run mechanism tests
#+name: esa
#+begin_src lisp :results output
(ql:quickload :arrowgrams/esa-transpiler/tester)  
#+end_src
#+name: esa
#+begin_src lisp :results output
  (arrowgrams/esa-transpiler::$mech-tester)
#+end_src
* 0) run make as an interpreted script
#+name: esa
#+begin_src lisp :results output
 (load "make")
 (make)
#+end_src
** after loading, do:
** edit mech-tester.lisp to include latest 12.txt (from hier)
** edit mech-tester.lisp to insert names, eg.
** (setf (scanner:token-text (pasm:accepted-token p)) "self")
* 00) run mechanism test
** #+name: esa
** #+begin_src lisp :results output
  (arrowgrams/esa-transpiler::test-esa-to-string "test.esa" :tracing-accept t) 
** #+end_src
* results
#+RESULTS: esa
#+begin_example
(UIOP/RUN-PROGRAM:RUN-PROGRAM "rm -rf ~/.cache/common-lisp")
(UIOP/RUN-PROGRAM:RUN-PROGRAM "rm -rf *.fasl */*.fasl */*/*/.fasl")
(UIOP/RUN-PROGRAM:RUN-PROGRAM "rm -rf *~")
(QUICKLISP-CLIENT:QUICKLOAD :STACK-DSL)
To load "stack-dsl":
  Load 1 ASDF system:
    stack-dsl
; Loading "stack-dsl"

(QUICKLISP-CLIENT:QUICKLOAD :STACK-DSL/USE)
To load "stack-dsl/use":
  Load 1 ASDF system:
    stack-dsl/use
; Loading "stack-dsl/use"

(STACK-DSL:TRANSPILE-STACK
 (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME :ARROWGRAMS
                                       "build_process/esa-transpiler/exprtypes.dsl")
 "CL-USER"
 (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME :ARROWGRAMS
                                       "build_process/esa-transpiler/exprtypes.lisp")
 (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME :ARROWGRAMS
                                       "build_process/esa-transpiler/exprtypes.json")
 "ARROWGRAMS/ESA-TRANSPILER" "CL-USER"
 (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME :ARROWGRAMS
                                       "build_process/esa-transpiler/mechanisms.lisp"))
in stack-dsl
,*** calling initially on stack-dsl-parser
,*** calling initially on stack-dsl-parser
(QUICKLISP-CLIENT:QUICKLOAD :PARSING-ASSEMBLER/USE)
To load "parsing-assembler/use":
  Load 1 ASDF system:
    parsing-assembler/use
; Loading "parsing-assembler/use"

(PARSING-ASSEMBLER:PASM-TO-FILE "ARROWGRAMS/ESA-TRANSPILER"
                                (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME
                                 :ARROWGRAMS
                                 "build_process/esa-transpiler/dsl.pasm")
                                (ASDF/SYSTEM:SYSTEM-RELATIVE-PATHNAME
                                 :ARROWGRAMS
                                 "build_process/esa-transpiler/dsl.lisp"))
(QUICKLISP-CLIENT:QUICKLOAD :ARROWGRAMS/ESA-TRANSPILER)
To load "arrowgrams/esa-transpiler":
  Load 1 ASDF system:
    arrowgrams/esa-transpiler
; Loading "arrowgrams/esa-transpiler"
.....
(LOAD "package.lisp")
(LOAD "classes.lisp")
(LOAD "dsl.lisp")
(LOAD "exprtypes.lisp")
(LOAD "mechanisms.lisp")
(LOAD "esa-transpile.lisp")
(LOAD "trace-rules.lisp")
(LOAD "trace-mechs.lisp")
(QUICKLISP-CLIENT:QUICKLOAD :ARROWGRAMS/ESA-TRANSPILER/TESTER)
To load "arrowgrams/esa-transpiler/tester":
  Load 1 ASDF system:
    arrowgrams/esa-transpiler/tester
; Loading "arrowgrams/esa-transpiler/tester"
[package arrowgrams/esa-transpiler]...............
[package arrowgrams/esa]
(STACK-DSL:INITIALIZE-TYPES (ARROWGRAMS/ESA-TRANSPILER:PATH "exprtypes.json"))
type "expression" #<STACK-DSL::STRUCTURE-DESCRIPTOR {1002593813}>
type "ekind" #<STACK-DSL::ENUM-DESCRIPTOR {10025938D3}>
type "object" #<STACK-DSL::STRUCTURE-DESCRIPTOR {1002593A23}>
type "fieldMap" #<STACK-DSL::MAP-DESCRIPTOR {1002593B03}>
type "field" #<STACK-DSL::STRUCTURE-DESCRIPTOR {1002593C53}>
type "parameterList" #<STACK-DSL::MAP-DESCRIPTOR {1002593D33}>
type "name" #<STACK-DSL::STRING-DESCRIPTOR {1002593DF3}>
(ARROWGRAMS/ESA-TRANSPILER::TEST-ESA-TO-FILE "test.esa" "test.lisp"
                                             :TRACING-ACCEPT T)
#+end_example

