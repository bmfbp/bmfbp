* overview
  This directory contains that ESA (Encapsulated Software Assets) transpiler.
  The transpile is built using (2) pasm and (1) the stack language transpiler.
  Pasm is used to create dsl.lisp from esa.pasm.
  Stack-dsl is used to create exprtypes.lisp from exprtypes.dsl.
  The final ESA transpiler is used in ../esa.
  The final ESA transpiler uses parser-mechanisms.lisp and v2mechanisms.lisp to support its operation.
* usage
  use scripts, below
  N.B. to ql:quickload :arrowgrams/esa..
    1) create exprtype.lisp (from exprtype.dsl, see below, for script)
    2) build esa-dsl.lisp from esa.rp 
    3) load esa
* 1) create exprtypes.lisp
#+name: esa
#+begin_src lisp :results output
  (ql:quickload :stack-dsl/use)
#+end_src
#+name: esa
#+begin_src lisp :results output
  (stack-dsl:transpile-stack "ARROWGRAMS/ESA-TRANSPILER"
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/exprtypes.dsl")
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/exprtypes.lisp"))
#+end_src
* 2) create dsl.lisp (from dsl.pasm)
#+name: esa
#+begin_src lisp :results output
   (uiop:run-program "rm -rf ~/.cache/common-lisp")
   (uiop:run-program "rm -rf */*.fasl */*/*/.fasl")
   (uiop:run-program "rm -rf */*~ */*/*/*~")
  (ql:quickload :parsing-assembler/use)
#+end_src
#+name: esa
#+begin_src lisp :results output
  (pasm:pasm-to-file "ARROWGRAMS/ESA-TRANSPILER"
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/dsl.pasm")
     (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/dsl.lisp"))
#+end_src
* 3) create (via manual edit) exprtypes.json
* 4) run ESA during development (see what is working, etc.)
#+name: esa
#+begin_src lisp :results output
   (uiop:run-program "rm -rf ~/.cache/common-lisp")
   (uiop:run-program "rm -rf *.fasl */*.fasl */*/*/.fasl")
   (uiop:run-program "rm -rf *~ */*~ */*/*/*~")
   (ql:quickload :arrowgrams/esa-transpiler)

#+end_src
#+name: esa
#+begin_src lisp :results output
   (proclaim '(optimize (debug 3) (safety 3) (speed 0)))
   (load "package.lisp")
   (load "classes.lisp")
   (load "dsl.lisp")
   (load "exprtypes.lisp")
   (load "v2mechanisms.lisp")
   (load "esa-transpile.lisp")
#+end_src
#+name: esa
#+begin_src lisp :results output
(in-package :arrowgrams/esa-transpiler)
(trace emitHeader)
(trace $expression__NewScope)
(trace $expression__setField_ekind_from_ekind)
(trace $expression__setField_object_from_object)
(trace $expression__Output)
(trace $expression__Emit)
(trace $ekind__NewScope)
(trace $ekind__Output)
(trace $ekind__SetEnum_true)
(trace $ekind__SetEnum_false)
(trace $ekind__SetEnum_object)
(trace $name__NewScope)
(trace $name__GetName)
(trace $name__combine)
(trace $name__Output)
(trace $object__NewScope)
(trace $object__Output)
(trace $object__setField_name_from_name)
(trace $object__setField_parameterList_from_parameterList)
(trace $object__setField_field_from_field)
(trace $field__NewScope)
(trace $field__Output)
(trace $field__CoerceFrom_empty)
(trace $field__CoerceFrom_object)
(trace $parameterList__NewScope)
(trace $parameterList__Output)
(trace $parameterList__CoerceFrom_empty)
(trace $parameterList__CoerceFrom_nameList)
(trace $nameList__NewScope)
(trace $nameList__Output)
(trace $nameList__AppendFrom_name)
(trace $empty__NewScope)
(trace $empty__Output)
#+end_src
#+name: esa
#+begin_src lisp :results output
(in-package :arrowgrams/esa-transpiler)
(trace esa-dsl)
(trace keyword-symbol)
(trace non-keyword-symbol)
(trace type-decls)
(trace type-decl)
(trace situations)
(trace situation)
(trace classes)
(trace whens-and-scripts)
(trace class-def)
(trace field-decl-begin)
(trace field-decl)
(trace when-declaration)
(trace situation-ref)
(trace or-situation)
(trace class-ref)
(trace method-declaration)
(trace script-declaration)
(trace generic-typed-formals)
(trace generic-type-list)
(trace optional-return-type-declaration)
(trace script-definition)
(trace optional-formals-definition)
(trace untyped-formals-definition)
(trace optional-return-type-definition)
(trace script-body)
(trace let-statement)
(trace create-statement)
(trace set-statement)
(trace map-statement)
(trace exit-map-statement)
(trace loop-statement)
(trace exit-when-statement)
(trace if-statement)
(trace script-call)
(trace method-call)
(trace return-statement)
(trace esa-symbol)
(trace esa-field-follow-nonemitting)
(trace esa-expr)
(trace object__)
(trace object__name)
(trace object__field)
(trace object__optionalParameterMap)
(trace object__field__rec-parameters)
(trace object__field__rec-parameters__pred-parameterBegin)
(trace object__field__parameters__parameter)
(trace esaSymbol)
#+end_src
#+name: esa
#+begin_src lisp
  (let ()
   (stack-dsl:set-target-package "ARROWGRAMS/ESA-TRANSPILER")
   (stack-dsl:initialize-types "exprtypes.json")
   (arrowgrams/esa-transpiler::transpile-esa-to-file
      (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/test.esa")
      (asdf:system-relative-pathname :arrowgrams "build_process/esa-transpiler/test.lisp")
      :tracing-accept t))
#+end_src
   
* results
#+RESULTS: esa

