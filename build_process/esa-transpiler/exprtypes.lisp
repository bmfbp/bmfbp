(in-package "CL-USER")

(defclass esaprogram (stack-dsl::%typed-value)
((%field-type-scriptsAndWhens :accessor %field-type-scriptsAndWhens :initform "scriptsAndWhens")
(scriptsAndWhens :accessor scriptsAndWhens)
(%field-type-classes :accessor %field-type-classes :initform "classes")
(classes :accessor classes)
(%field-type-situations :accessor %field-type-situations :initform "situations")
(situations :accessor situations)
(%field-type-typeDecls :accessor %field-type-typeDecls :initform "typeDecls")
(typeDecls :accessor typeDecls)
) (:default-initargs :%type "esaprogram"))

(defclass esaprogram-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self esaprogram-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "esaprogram"))

(defclass typeDecls (stack-dsl::%map) () (:default-initargs :%type "typeDecls"))
(defmethod initialize-instance :after ((self typeDecls) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "typeDecl"))
(defclass typeDecls-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self typeDecls-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "typeDecls"))
(defclass situation (stack-dsl::%map) () (:default-initargs :%type "situation"))
(defmethod initialize-instance :after ((self situation) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "situation"))
(defclass situation-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self situation-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "situation"))
(defclass classes (stack-dsl::%map) () (:default-initargs :%type "classes"))
(defmethod initialize-instance :after ((self classes) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "esaclass"))
(defclass classes-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self classes-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "classes"))
(defclass scriptsOrWhens (stack-dsl::%map) () (:default-initargs :%type "scriptsOrWhens"))
(defmethod initialize-instance :after ((self scriptsOrWhens) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "scriptOrWhen"))
(defclass scriptsOrWhens-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self scriptsOrWhens-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "scriptsOrWhens"))
(defclass typeDecl (stack-dsl::%typed-value)
((%field-type-typeName :accessor %field-type-typeName :initform "typeName")
(typeName :accessor typeName)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "typeDecl"))

(defclass typeDecl-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self typeDecl-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "typeDecl"))


(defclass typeName (stack-dsl::%compound-type) () (:default-initargs :%type "typeName"))
(defmethod initialize-instance :after ((self typeName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass typeName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "typeName"))

(defclass situation (stack-dsl::%typed-value)
((%field-type-situationName :accessor %field-type-situationName :initform "situationName")
(situationName :accessor situationName)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "situation"))

(defclass situation-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self situation-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "situation"))


(defclass situationName (stack-dsl::%compound-type) () (:default-initargs :%type "situationName"))
(defmethod initialize-instance :after ((self situationName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass situationName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "situationName"))

(defclass esaclass (stack-dsl::%typed-value)
((%field-type-fieldMap :accessor %field-type-fieldMap :initform "fieldMap")
(fieldMap :accessor fieldMap)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "esaclass"))

(defclass esaclass-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self esaclass-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "esaclass"))


(defclass scriptOrWhen (stack-dsl::%compound-type) () (:default-initargs :%type "scriptOrWhen"))
(defmethod initialize-instance :after ((self scriptOrWhen) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("whenDeclaration" "scriptDefinition")))
(defclass scriptOrWhen-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "scriptOrWhen"))

(defclass whenDeclaration (stack-dsl::%typed-value)
((%field-type-methodsAndScriptDeclarations :accessor %field-type-methodsAndScriptDeclarations :initform "methodsAndScriptDeclarations")
(methodsAndScriptDeclarations :accessor methodsAndScriptDeclarations)
(%field-type-esaKind :accessor %field-type-esaKind :initform "esaKind")
(esaKind :accessor esaKind)
(%field-type-situationName :accessor %field-type-situationName :initform "situationName")
(situationName :accessor situationName)
) (:default-initargs :%type "whenDeclaration"))

(defclass whenDeclaration-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self whenDeclaration-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "whenDeclaration"))

(defclass methodDeclaration (stack-dsl::%typed-value)
((%field-type-formalParameterList :accessor %field-type-formalParameterList :initform "formalParameterList")
(formalParameterList :accessor formalParameterList)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "methodDeclaration"))

(defclass methodDeclaration-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self methodDeclaration-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "methodDeclaration"))

(defclass scriptDeclaration (stack-dsl::%typed-value)
((%field-type-formalParameterList :accessor %field-type-formalParameterList :initform "formalParameterList")
(formalParameterList :accessor formalParameterList)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "scriptDeclaration"))

(defclass scriptDeclaration-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self scriptDeclaration-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "scriptDeclaration"))

(defclass scriptImplementation (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
(%field-type-formalParameterList :accessor %field-type-formalParameterList :initform "formalParameterList")
(formalParameterList :accessor formalParameterList)
(%field-type-esaKind :accessor %field-type-esaKind :initform "esaKind")
(esaKind :accessor esaKind)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "scriptImplementation"))

(defclass scriptImplementation-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self scriptImplementation-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "scriptImplementation"))


(defclass situationName (stack-dsl::%compound-type) () (:default-initargs :%type "situationName"))
(defmethod initialize-instance :after ((self situationName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass situationName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "situationName"))

(defclass formalParameterList (stack-dsl::%map) () (:default-initargs :%type "formalParameterList"))
(defmethod initialize-instance :after ((self formalParameterList) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "name"))
(defclass formalParameterList-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self formalParameterList-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "formalParameterList"))
(defclass scriptStatements (stack-dsl::%map) () (:default-initargs :%type "scriptStatements"))
(defmethod initialize-instance :after ((self scriptStatements) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "scriptStatement"))
(defclass scriptStatements-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self scriptStatements-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "scriptStatements"))

(defclass scriptStatement (stack-dsl::%compound-type) () (:default-initargs :%type "scriptStatement"))
(defmethod initialize-instance :after ((self scriptStatement) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("callExternalStatement"
                                       "callScriptStatement" "returnStatement"
                                       "exitWhenStatement" "loopStatement"
                                       "ifStatement" "createStatement"
                                       "setStatement" "exitMapStatement"
                                       "mapStatement" "letStatement")))
(defclass scriptStatement-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "scriptStatement"))

(defclass letStatement (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
(%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
(%field-type-letVarName :accessor %field-type-letVarName :initform "letVarName")
(letVarName :accessor letVarName)
) (:default-initargs :%type "letStatement"))

(defclass letStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self letStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "letStatement"))

(defclass mapStatement (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
(%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
(%field-type-mapVarName :accessor %field-type-mapVarName :initform "mapVarName")
(mapVarName :accessor mapVarName)
) (:default-initargs :%type "mapStatement"))

(defclass mapStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self mapStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "mapStatement"))

(defclass createStatement (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
(%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
(%field-type-createVarName :accessor %field-type-createVarName :initform "createVarName")
(createVarName :accessor createVarName)
) (:default-initargs :%type "createStatement"))

(defclass createStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self createStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "createStatement"))

(defclass setStatement (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
(%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
(%field-type-setVarName :accessor %field-type-setVarName :initform "setVarName")
(setVarName :accessor setVarName)
) (:default-initargs :%type "setStatement"))

(defclass setStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self setStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "setStatement"))

(defclass exitMapStatement (stack-dsl::%typed-value)
((%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
) (:default-initargs :%type "exitMapStatement"))

(defclass exitMapStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self exitMapStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "exitMapStatement"))

(defclass ifStatement (stack-dsl::%typed-value)
((%field-type-elseStatements :accessor %field-type-elseStatements :initform "elseStatements")
(elseStatements :accessor elseStatements)
(%field-type-thenStatements :accessor %field-type-thenStatements :initform "thenStatements")
(thenStatements :accessor thenStatements)
(%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
) (:default-initargs :%type "ifStatement"))

(defclass ifStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self ifStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "ifStatement"))

(defclass loopStatement (stack-dsl::%typed-value)
((%field-type-scriptStatements :accessor %field-type-scriptStatements :initform "scriptStatements")
(scriptStatements :accessor scriptStatements)
) (:default-initargs :%type "loopStatement"))

(defclass loopStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self loopStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "loopStatement"))

(defclass exitWhenStatement (stack-dsl::%typed-value)
((%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
) (:default-initargs :%type "exitWhenStatement"))

(defclass exitWhenStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self exitWhenStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "exitWhenStatement"))

(defclass returnStatement (stack-dsl::%typed-value)
((%field-type-expression :accessor %field-type-expression :initform "expression")
(expression :accessor expression)
) (:default-initargs :%type "returnStatement"))

(defclass returnStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self returnStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "returnStatement"))

(defclass callScriptStatement (stack-dsl::%typed-value)
((%field-type-internalScriptName :accessor %field-type-internalScriptName :initform "internalScriptName")
(internalScriptName :accessor internalScriptName)
) (:default-initargs :%type "callScriptStatement"))

(defclass callScriptStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self callScriptStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "callScriptStatement"))

(defclass callExternalStatement (stack-dsl::%typed-value)
((%field-type-externalMethodName :accessor %field-type-externalMethodName :initform "externalMethodName")
(externalMethodName :accessor externalMethodName)
) (:default-initargs :%type "callExternalStatement"))

(defclass callExternalStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self callExternalStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "callExternalStatement"))


(defclass thenStatements (stack-dsl::%compound-type) () (:default-initargs :%type "thenStatements"))
(defmethod initialize-instance :after ((self thenStatements) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("scriptStatements")))
(defclass thenStatements-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "thenStatements"))


(defclass elseStatements (stack-dsl::%compound-type) () (:default-initargs :%type "elseStatements"))
(defmethod initialize-instance :after ((self elseStatements) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("scriptStatements")))
(defclass elseStatements-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "elseStatements"))


(defclass esaKind (stack-dsl::%compound-type) () (:default-initargs :%type "esaKind"))
(defmethod initialize-instance :after ((self esaKind) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass esaKind-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "esaKind"))


(defclass letVarName (stack-dsl::%compound-type) () (:default-initargs :%type "letVarName"))
(defmethod initialize-instance :after ((self letVarName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass letVarName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "letVarName"))


(defclass mapVarName (stack-dsl::%compound-type) () (:default-initargs :%type "mapVarName"))
(defmethod initialize-instance :after ((self mapVarName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass mapVarName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "mapVarName"))


(defclass createVarName (stack-dsl::%compound-type) () (:default-initargs :%type "createVarName"))
(defmethod initialize-instance :after ((self createVarName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass createVarName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "createVarName"))


(defclass setVarName (stack-dsl::%compound-type) () (:default-initargs :%type "setVarName"))
(defmethod initialize-instance :after ((self setVarName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass setVarName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "setVarName"))


(defclass internalScriptName (stack-dsl::%compound-type) () (:default-initargs :%type "internalScriptName"))
(defmethod initialize-instance :after ((self internalScriptName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass internalScriptName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "internalScriptName"))


(defclass externalMethodName (stack-dsl::%compound-type) () (:default-initargs :%type "externalMethodName"))
(defmethod initialize-instance :after ((self externalMethodName) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("name")))
(defclass externalMethodName-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "externalMethodName"))

(defclass expression (stack-dsl::%typed-value)
((%field-type-object :accessor %field-type-object :initform "object")
(object :accessor object)
(%field-type-ekind :accessor %field-type-ekind :initform "ekind")
(ekind :accessor ekind)
) (:default-initargs :%type "expression"))

(defclass expression-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self expression-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "expression"))


(defclass ekind (stack-dsl::%enum) () (:default-initargs :%type "ekind"))

(defmethod initialize-instance :after ((self ekind) &key &allow-other-keys)
  (setf (stack-dsl::%value-list self) '("object" "false" "true")))


(defclass ekind-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self ekind-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "ekind"))
(defclass object (stack-dsl::%typed-value)
((%field-type-fieldMap :accessor %field-type-fieldMap :initform "fieldMap")
(fieldMap :accessor fieldMap)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "object"))

(defclass object-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self object-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "object"))

(defclass fieldMap (stack-dsl::%map) () (:default-initargs :%type "fieldMap"))
(defmethod initialize-instance :after ((self fieldMap) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "field"))
(defclass fieldMap-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self fieldMap-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "fieldMap"))
(defclass field (stack-dsl::%typed-value)
((%field-type-parameterList :accessor %field-type-parameterList :initform "parameterList")
(parameterList :accessor parameterList)
(%field-type-name :accessor %field-type-name :initform "name")
(name :accessor name)
) (:default-initargs :%type "field"))

(defclass field-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self field-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "field"))

(defclass parameterList (stack-dsl::%map) () (:default-initargs :%type "parameterList"))
(defmethod initialize-instance :after ((self parameterList) &key &allow-other-keys)  ;; type for items in map
(setf (stack-dsl::%element-type self) "expression"))
(defclass parameterList-stack(stack-dsl::%typed-stack) ())
 (defmethod initialize-instance :after ((self parameterList-stack) &key &allow-other-keys)
(setf (stack-dsl::%element-type self) "parameterList"))

(defclass name (stack-dsl::%string) () (:default-initargs :%type "name"))
(defclass name-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self name-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "name"))



;; check forward types
(stack-dsl::%ensure-existence 'esaprogram)
(stack-dsl::%ensure-existence 'typeDecls)
(stack-dsl::%ensure-existence 'situations)
(stack-dsl::%ensure-existence 'classes)
(stack-dsl::%ensure-existence 'scriptsAndWhens)
(stack-dsl::%ensure-existence 'situation)
(stack-dsl::%ensure-existence 'scriptsOrWhens)
(stack-dsl::%ensure-existence 'typeDecl)
(stack-dsl::%ensure-existence 'name)
(stack-dsl::%ensure-existence 'typeName)
(stack-dsl::%ensure-existence 'situationName)
(stack-dsl::%ensure-existence 'esaclass)
(stack-dsl::%ensure-existence 'fieldMap)
(stack-dsl::%ensure-existence 'scriptOrWhen)
(stack-dsl::%ensure-existence 'scriptDefinition)
(stack-dsl::%ensure-existence 'whenDeclaration)
(stack-dsl::%ensure-existence 'esaKind)
(stack-dsl::%ensure-existence 'methodsAndScriptDeclarations)
(stack-dsl::%ensure-existence 'methodDeclaration)
(stack-dsl::%ensure-existence 'formalParameterList)
(stack-dsl::%ensure-existence 'scriptDeclaration)
(stack-dsl::%ensure-existence 'scriptImplementation)
(stack-dsl::%ensure-existence 'scriptStatements)
(stack-dsl::%ensure-existence 'scriptStatement)
(stack-dsl::%ensure-existence 'letStatement)
(stack-dsl::%ensure-existence 'mapStatement)
(stack-dsl::%ensure-existence 'exitMapStatement)
(stack-dsl::%ensure-existence 'setStatement)
(stack-dsl::%ensure-existence 'createStatement)
(stack-dsl::%ensure-existence 'ifStatement)
(stack-dsl::%ensure-existence 'loopStatement)
(stack-dsl::%ensure-existence 'exitWhenStatement)
(stack-dsl::%ensure-existence 'returnStatement)
(stack-dsl::%ensure-existence 'callScriptStatement)
(stack-dsl::%ensure-existence 'callExternalStatement)
(stack-dsl::%ensure-existence 'letVarName)
(stack-dsl::%ensure-existence 'expression)
(stack-dsl::%ensure-existence 'mapVarName)
(stack-dsl::%ensure-existence 'createVarName)
(stack-dsl::%ensure-existence 'setVarName)
(stack-dsl::%ensure-existence 'thenStatements)
(stack-dsl::%ensure-existence 'elseStatements)
(stack-dsl::%ensure-existence 'internalScriptName)
(stack-dsl::%ensure-existence 'externalMethodName)
(stack-dsl::%ensure-existence 'ekind)
(stack-dsl::%ensure-existence 'object)
(stack-dsl::%ensure-existence 'field)
(stack-dsl::%ensure-existence 'parameterList)
(defclass %map-stack (stack-dsl::%typed-stack) ())
(defclass %bag-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self %map-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "%map"))(defmethod initialize-instance :after ((self %bag-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "%bag"))
(defclass environment ()
((%water-mark :accessor %water-mark :initform nil)
(input-esaprogram :accessor input-esaprogram :initform (make-instance 'esaprogram-stack))
(output-esaprogram :accessor output-esaprogram :initform (make-instance 'esaprogram-stack))
(input-typeDecls :accessor input-typeDecls :initform (make-instance 'typeDecls-stack))
(output-typeDecls :accessor output-typeDecls :initform (make-instance 'typeDecls-stack))
(input-situations :accessor input-situations :initform (make-instance 'situations-stack))
(output-situations :accessor output-situations :initform (make-instance 'situations-stack))
(input-classes :accessor input-classes :initform (make-instance 'classes-stack))
(output-classes :accessor output-classes :initform (make-instance 'classes-stack))
(input-scriptsAndWhens :accessor input-scriptsAndWhens :initform (make-instance 'scriptsAndWhens-stack))
(output-scriptsAndWhens :accessor output-scriptsAndWhens :initform (make-instance 'scriptsAndWhens-stack))
(input-situation :accessor input-situation :initform (make-instance 'situation-stack))
(output-situation :accessor output-situation :initform (make-instance 'situation-stack))
(input-scriptsOrWhens :accessor input-scriptsOrWhens :initform (make-instance 'scriptsOrWhens-stack))
(output-scriptsOrWhens :accessor output-scriptsOrWhens :initform (make-instance 'scriptsOrWhens-stack))
(input-typeDecl :accessor input-typeDecl :initform (make-instance 'typeDecl-stack))
(output-typeDecl :accessor output-typeDecl :initform (make-instance 'typeDecl-stack))
(input-name :accessor input-name :initform (make-instance 'name-stack))
(output-name :accessor output-name :initform (make-instance 'name-stack))
(input-typeName :accessor input-typeName :initform (make-instance 'typeName-stack))
(output-typeName :accessor output-typeName :initform (make-instance 'typeName-stack))
(input-situationName :accessor input-situationName :initform (make-instance 'situationName-stack))
(output-situationName :accessor output-situationName :initform (make-instance 'situationName-stack))
(input-esaclass :accessor input-esaclass :initform (make-instance 'esaclass-stack))
(output-esaclass :accessor output-esaclass :initform (make-instance 'esaclass-stack))
(input-fieldMap :accessor input-fieldMap :initform (make-instance 'fieldMap-stack))
(output-fieldMap :accessor output-fieldMap :initform (make-instance 'fieldMap-stack))
(input-scriptOrWhen :accessor input-scriptOrWhen :initform (make-instance 'scriptOrWhen-stack))
(output-scriptOrWhen :accessor output-scriptOrWhen :initform (make-instance 'scriptOrWhen-stack))
(input-scriptDefinition :accessor input-scriptDefinition :initform (make-instance 'scriptDefinition-stack))
(output-scriptDefinition :accessor output-scriptDefinition :initform (make-instance 'scriptDefinition-stack))
(input-whenDeclaration :accessor input-whenDeclaration :initform (make-instance 'whenDeclaration-stack))
(output-whenDeclaration :accessor output-whenDeclaration :initform (make-instance 'whenDeclaration-stack))
(input-esaKind :accessor input-esaKind :initform (make-instance 'esaKind-stack))
(output-esaKind :accessor output-esaKind :initform (make-instance 'esaKind-stack))
(input-methodsAndScriptDeclarations :accessor input-methodsAndScriptDeclarations :initform (make-instance 'methodsAndScriptDeclarations-stack))
(output-methodsAndScriptDeclarations :accessor output-methodsAndScriptDeclarations :initform (make-instance 'methodsAndScriptDeclarations-stack))
(input-methodDeclaration :accessor input-methodDeclaration :initform (make-instance 'methodDeclaration-stack))
(output-methodDeclaration :accessor output-methodDeclaration :initform (make-instance 'methodDeclaration-stack))
(input-formalParameterList :accessor input-formalParameterList :initform (make-instance 'formalParameterList-stack))
(output-formalParameterList :accessor output-formalParameterList :initform (make-instance 'formalParameterList-stack))
(input-scriptDeclaration :accessor input-scriptDeclaration :initform (make-instance 'scriptDeclaration-stack))
(output-scriptDeclaration :accessor output-scriptDeclaration :initform (make-instance 'scriptDeclaration-stack))
(input-scriptImplementation :accessor input-scriptImplementation :initform (make-instance 'scriptImplementation-stack))
(output-scriptImplementation :accessor output-scriptImplementation :initform (make-instance 'scriptImplementation-stack))
(input-scriptStatements :accessor input-scriptStatements :initform (make-instance 'scriptStatements-stack))
(output-scriptStatements :accessor output-scriptStatements :initform (make-instance 'scriptStatements-stack))
(input-scriptStatement :accessor input-scriptStatement :initform (make-instance 'scriptStatement-stack))
(output-scriptStatement :accessor output-scriptStatement :initform (make-instance 'scriptStatement-stack))
(input-letStatement :accessor input-letStatement :initform (make-instance 'letStatement-stack))
(output-letStatement :accessor output-letStatement :initform (make-instance 'letStatement-stack))
(input-mapStatement :accessor input-mapStatement :initform (make-instance 'mapStatement-stack))
(output-mapStatement :accessor output-mapStatement :initform (make-instance 'mapStatement-stack))
(input-exitMapStatement :accessor input-exitMapStatement :initform (make-instance 'exitMapStatement-stack))
(output-exitMapStatement :accessor output-exitMapStatement :initform (make-instance 'exitMapStatement-stack))
(input-setStatement :accessor input-setStatement :initform (make-instance 'setStatement-stack))
(output-setStatement :accessor output-setStatement :initform (make-instance 'setStatement-stack))
(input-createStatement :accessor input-createStatement :initform (make-instance 'createStatement-stack))
(output-createStatement :accessor output-createStatement :initform (make-instance 'createStatement-stack))
(input-ifStatement :accessor input-ifStatement :initform (make-instance 'ifStatement-stack))
(output-ifStatement :accessor output-ifStatement :initform (make-instance 'ifStatement-stack))
(input-loopStatement :accessor input-loopStatement :initform (make-instance 'loopStatement-stack))
(output-loopStatement :accessor output-loopStatement :initform (make-instance 'loopStatement-stack))
(input-exitWhenStatement :accessor input-exitWhenStatement :initform (make-instance 'exitWhenStatement-stack))
(output-exitWhenStatement :accessor output-exitWhenStatement :initform (make-instance 'exitWhenStatement-stack))
(input-returnStatement :accessor input-returnStatement :initform (make-instance 'returnStatement-stack))
(output-returnStatement :accessor output-returnStatement :initform (make-instance 'returnStatement-stack))
(input-callScriptStatement :accessor input-callScriptStatement :initform (make-instance 'callScriptStatement-stack))
(output-callScriptStatement :accessor output-callScriptStatement :initform (make-instance 'callScriptStatement-stack))
(input-callExternalStatement :accessor input-callExternalStatement :initform (make-instance 'callExternalStatement-stack))
(output-callExternalStatement :accessor output-callExternalStatement :initform (make-instance 'callExternalStatement-stack))
(input-letVarName :accessor input-letVarName :initform (make-instance 'letVarName-stack))
(output-letVarName :accessor output-letVarName :initform (make-instance 'letVarName-stack))
(input-expression :accessor input-expression :initform (make-instance 'expression-stack))
(output-expression :accessor output-expression :initform (make-instance 'expression-stack))
(input-mapVarName :accessor input-mapVarName :initform (make-instance 'mapVarName-stack))
(output-mapVarName :accessor output-mapVarName :initform (make-instance 'mapVarName-stack))
(input-createVarName :accessor input-createVarName :initform (make-instance 'createVarName-stack))
(output-createVarName :accessor output-createVarName :initform (make-instance 'createVarName-stack))
(input-setVarName :accessor input-setVarName :initform (make-instance 'setVarName-stack))
(output-setVarName :accessor output-setVarName :initform (make-instance 'setVarName-stack))
(input-thenStatements :accessor input-thenStatements :initform (make-instance 'thenStatements-stack))
(output-thenStatements :accessor output-thenStatements :initform (make-instance 'thenStatements-stack))
(input-elseStatements :accessor input-elseStatements :initform (make-instance 'elseStatements-stack))
(output-elseStatements :accessor output-elseStatements :initform (make-instance 'elseStatements-stack))
(input-internalScriptName :accessor input-internalScriptName :initform (make-instance 'internalScriptName-stack))
(output-internalScriptName :accessor output-internalScriptName :initform (make-instance 'internalScriptName-stack))
(input-externalMethodName :accessor input-externalMethodName :initform (make-instance 'externalMethodName-stack))
(output-externalMethodName :accessor output-externalMethodName :initform (make-instance 'externalMethodName-stack))
(input-ekind :accessor input-ekind :initform (make-instance 'ekind-stack))
(output-ekind :accessor output-ekind :initform (make-instance 'ekind-stack))
(input-object :accessor input-object :initform (make-instance 'object-stack))
(output-object :accessor output-object :initform (make-instance 'object-stack))
(input-field :accessor input-field :initform (make-instance 'field-stack))
(output-field :accessor output-field :initform (make-instance 'field-stack))
(input-parameterList :accessor input-parameterList :initform (make-instance 'parameterList-stack))
(output-parameterList :accessor output-parameterList :initform (make-instance 'parameterList-stack))
))

(defmethod %memoStacks ((self environment))
(setf (%water-mark self)
(list
(input-esaprogram self)
(output-esaprogram self)
(input-typeDecls self)
(output-typeDecls self)
(input-situations self)
(output-situations self)
(input-classes self)
(output-classes self)
(input-scriptsAndWhens self)
(output-scriptsAndWhens self)
(input-situation self)
(output-situation self)
(input-scriptsOrWhens self)
(output-scriptsOrWhens self)
(input-typeDecl self)
(output-typeDecl self)
(input-name self)
(output-name self)
(input-typeName self)
(output-typeName self)
(input-situationName self)
(output-situationName self)
(input-esaclass self)
(output-esaclass self)
(input-fieldMap self)
(output-fieldMap self)
(input-scriptOrWhen self)
(output-scriptOrWhen self)
(input-scriptDefinition self)
(output-scriptDefinition self)
(input-whenDeclaration self)
(output-whenDeclaration self)
(input-esaKind self)
(output-esaKind self)
(input-methodsAndScriptDeclarations self)
(output-methodsAndScriptDeclarations self)
(input-methodDeclaration self)
(output-methodDeclaration self)
(input-formalParameterList self)
(output-formalParameterList self)
(input-scriptDeclaration self)
(output-scriptDeclaration self)
(input-scriptImplementation self)
(output-scriptImplementation self)
(input-scriptStatements self)
(output-scriptStatements self)
(input-scriptStatement self)
(output-scriptStatement self)
(input-letStatement self)
(output-letStatement self)
(input-mapStatement self)
(output-mapStatement self)
(input-exitMapStatement self)
(output-exitMapStatement self)
(input-setStatement self)
(output-setStatement self)
(input-createStatement self)
(output-createStatement self)
(input-ifStatement self)
(output-ifStatement self)
(input-loopStatement self)
(output-loopStatement self)
(input-exitWhenStatement self)
(output-exitWhenStatement self)
(input-returnStatement self)
(output-returnStatement self)
(input-callScriptStatement self)
(output-callScriptStatement self)
(input-callExternalStatement self)
(output-callExternalStatement self)
(input-letVarName self)
(output-letVarName self)
(input-expression self)
(output-expression self)
(input-mapVarName self)
(output-mapVarName self)
(input-createVarName self)
(output-createVarName self)
(input-setVarName self)
(output-setVarName self)
(input-thenStatements self)
(output-thenStatements self)
(input-elseStatements self)
(output-elseStatements self)
(input-internalScriptName self)
(output-internalScriptName self)
(input-externalMethodName self)
(output-externalMethodName self)
(input-ekind self)
(output-ekind self)
(input-object self)
(output-object self)
(input-field self)
(output-field self)
(input-parameterList self)
(output-parameterList self)
)))

(defmethod %memoCheck ((self environment))
(let ((wm (%water-mark self)))
(unless (and
(eq (nth 0 wm) (input-esaprogram self))
(eq (nth 1 wm) (output-esaprogram self))
(eq (nth 2 wm) (input-typeDecls self))
(eq (nth 3 wm) (output-typeDecls self))
(eq (nth 4 wm) (input-situations self))
(eq (nth 5 wm) (output-situations self))
(eq (nth 6 wm) (input-classes self))
(eq (nth 7 wm) (output-classes self))
(eq (nth 8 wm) (input-scriptsAndWhens self))
(eq (nth 9 wm) (output-scriptsAndWhens self))
(eq (nth 10 wm) (input-situation self))
(eq (nth 11 wm) (output-situation self))
(eq (nth 12 wm) (input-scriptsOrWhens self))
(eq (nth 13 wm) (output-scriptsOrWhens self))
(eq (nth 14 wm) (input-typeDecl self))
(eq (nth 15 wm) (output-typeDecl self))
(eq (nth 16 wm) (input-name self))
(eq (nth 17 wm) (output-name self))
(eq (nth 18 wm) (input-typeName self))
(eq (nth 19 wm) (output-typeName self))
(eq (nth 20 wm) (input-situationName self))
(eq (nth 21 wm) (output-situationName self))
(eq (nth 22 wm) (input-esaclass self))
(eq (nth 23 wm) (output-esaclass self))
(eq (nth 24 wm) (input-fieldMap self))
(eq (nth 25 wm) (output-fieldMap self))
(eq (nth 26 wm) (input-scriptOrWhen self))
(eq (nth 27 wm) (output-scriptOrWhen self))
(eq (nth 28 wm) (input-scriptDefinition self))
(eq (nth 29 wm) (output-scriptDefinition self))
(eq (nth 30 wm) (input-whenDeclaration self))
(eq (nth 31 wm) (output-whenDeclaration self))
(eq (nth 32 wm) (input-esaKind self))
(eq (nth 33 wm) (output-esaKind self))
(eq (nth 34 wm) (input-methodsAndScriptDeclarations self))
(eq (nth 35 wm) (output-methodsAndScriptDeclarations self))
(eq (nth 36 wm) (input-methodDeclaration self))
(eq (nth 37 wm) (output-methodDeclaration self))
(eq (nth 38 wm) (input-formalParameterList self))
(eq (nth 39 wm) (output-formalParameterList self))
(eq (nth 40 wm) (input-scriptDeclaration self))
(eq (nth 41 wm) (output-scriptDeclaration self))
(eq (nth 42 wm) (input-scriptImplementation self))
(eq (nth 43 wm) (output-scriptImplementation self))
(eq (nth 44 wm) (input-scriptStatements self))
(eq (nth 45 wm) (output-scriptStatements self))
(eq (nth 46 wm) (input-scriptStatement self))
(eq (nth 47 wm) (output-scriptStatement self))
(eq (nth 48 wm) (input-letStatement self))
(eq (nth 49 wm) (output-letStatement self))
(eq (nth 50 wm) (input-mapStatement self))
(eq (nth 51 wm) (output-mapStatement self))
(eq (nth 52 wm) (input-exitMapStatement self))
(eq (nth 53 wm) (output-exitMapStatement self))
(eq (nth 54 wm) (input-setStatement self))
(eq (nth 55 wm) (output-setStatement self))
(eq (nth 56 wm) (input-createStatement self))
(eq (nth 57 wm) (output-createStatement self))
(eq (nth 58 wm) (input-ifStatement self))
(eq (nth 59 wm) (output-ifStatement self))
(eq (nth 60 wm) (input-loopStatement self))
(eq (nth 61 wm) (output-loopStatement self))
(eq (nth 62 wm) (input-exitWhenStatement self))
(eq (nth 63 wm) (output-exitWhenStatement self))
(eq (nth 64 wm) (input-returnStatement self))
(eq (nth 65 wm) (output-returnStatement self))
(eq (nth 66 wm) (input-callScriptStatement self))
(eq (nth 67 wm) (output-callScriptStatement self))
(eq (nth 68 wm) (input-callExternalStatement self))
(eq (nth 69 wm) (output-callExternalStatement self))
(eq (nth 70 wm) (input-letVarName self))
(eq (nth 71 wm) (output-letVarName self))
(eq (nth 72 wm) (input-expression self))
(eq (nth 73 wm) (output-expression self))
(eq (nth 74 wm) (input-mapVarName self))
(eq (nth 75 wm) (output-mapVarName self))
(eq (nth 76 wm) (input-createVarName self))
(eq (nth 77 wm) (output-createVarName self))
(eq (nth 78 wm) (input-setVarName self))
(eq (nth 79 wm) (output-setVarName self))
(eq (nth 80 wm) (input-thenStatements self))
(eq (nth 81 wm) (output-thenStatements self))
(eq (nth 82 wm) (input-elseStatements self))
(eq (nth 83 wm) (output-elseStatements self))
(eq (nth 84 wm) (input-internalScriptName self))
(eq (nth 85 wm) (output-internalScriptName self))
(eq (nth 86 wm) (input-externalMethodName self))
(eq (nth 87 wm) (output-externalMethodName self))
(eq (nth 88 wm) (input-ekind self))
(eq (nth 89 wm) (output-ekind self))
(eq (nth 90 wm) (input-object self))
(eq (nth 91 wm) (output-object self))
(eq (nth 92 wm) (input-field self))
(eq (nth 93 wm) (output-field self))
(eq (nth 94 wm) (input-parameterList self))
(eq (nth 95 wm) (output-parameterList self))
))
(error "stack depth incorrect")))
