pseudo-grammar <- top-level-description WC part-declarations WC internal-parts WC wiring

top-level-description <- ws* 'schematic' ws* top-level-id pin-decl

pin-decl <- input-pin-decl WC output-pin-decl / output-pin-decl / input-pin-decl

part-declarations <- ws* 'part' ws* 'declarations' ws* LBRACE part-decls RBRACE
part-decls <- part-decl+
part-decl <- part-id ws* COLON finality WC pin-decl

finality <- 'schematic' / 'code' / 'part'

top-level-id <- id-no-slash
part-id <- id-no-slash     


input-pin-decl <- ws* 'input' ws* 'pins' ws* LBRACE id-list RBRACE
output-pin-decl <- ws* 'output' ws* 'pins' ws* LBRACE id-list RBRACE
id-list <- (pin-id COMMA)* pin-id


internal-parts <- ws* 'internal' ws* 'parts' ws* LBRACE instance-decls RBRACE

instance-decls <- instance-decl*
instance-decl <- instance-id ws* COLON kind-id

wiring <- ws* 'wiring' ws* LBRACE wires RBRACE

wires <- wire*
wire <- sources ws* COLON receivers

sources <- (source COMMA)* source
source <- instance-id-pair

receivers <- (receiver COMMA)* receiver
receiver <- instance-id-pair

instance-id-pair <- id-with-slash
instance-id <- id-no-slash
kind-id <- id-no-slash

pin-id <- id-no-slash 

id-no-slash <- LBRACKET notSlashOrRbracket+ RBRACKET ws*  { (:destructure (lb id rb ws) (declare (ignore (lb rb ws) (esrap:text id)))) }
id-with-slash <- LBRACKET notSlashOrRbracket+ '/' notSlashOrRbracket+ RBRACKET ws* { (:text t) }

notSlashOrRbracket <- !'/' !']' .

# boring details
WC <- ws* COMMA

pseudo-comment <- '%' (!newline .)* newline
COMMA <- ',' ws*
COLON <- ':' ws*
LBRACE <- '{' ws*
RBRACE <- '}' ws*
LBRACKET <- '[' ws*
RBRACKET <- ']' ws*





# boiler place stuff

ws <- (pseudo-comment / space / newline / carriage-return / tab) { (:lambda (x) (declare (ignore x)) " ") }
space <- ' '
newline <- '\n'
tab <- '\t'
carriage-return <- '\r'

