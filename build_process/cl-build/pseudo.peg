pseudo-grammar <- top-level-description part-declarations internal-parts wiring

top-level-description <- ws* 'schematic' ws* top-level-id pin-decl part-declarations internal-parts wiring

pin-decl <- input-pin-decl / output-pin-decl / input-pin-decl COMMA output-pin-decl

part-declarations <- ws* 'part' ws* 'declarations' ws* LBRACE part-decls RBRACE
part-decls <- (part-decl COMMA)* part-decl
part-decl <- part-id ws* COLON finality ws* COMMA pin-decl

finality <- 'schematic' / 'code' / 'part'

top-level-id <- id-no-slash
part-id <- id-no-slash     


input-pin-decl <- ws* 'input' ws* 'pins' ws* LBRACE id-list RBRACE
output-pin-decl <- ws* 'output' ws* 'pins' ws* LBRACE id-list RBRACE
id-list <- (pin-id COMMA)* pin-id


internal-parts <- ws* 'internal' ws* 'parts' ws* LBRACE instance-decls RBRACE

instance-decls <- (instance-decl COMMA)* instance-decl
instance-decl <- instance-id ws* COLON kind-id

wiring <- ws* LBRACE wires RBRACE

wires <- (wire COMMA)* wire
wire <- sources ws* COLON receivers

sources <- (source COMMA)* source
source <- instance-id-pair

receivers <- (receiver COMMA)* receiver
receiver <- instance-id-pair

instance-id-pair <- id-with-slash
instance-id <- id-no-slash
kind-id <- id-no-slash

pin-id <- id-no-slash 

id-no-slash <- LBRACKET notSlashOrRbracket* RBRACKET ws*  { (:text t) }
id-with-slash <- LBRACKET notSlashOrRbracket* '/' notSlashOrRbracket* RBRACKET ws* { (:text t) }

notSlashOrRbracket <- !'/' !']' .

# boring details

pseudo-comment <- '%' (!newline .)* newline
COMMA <- ',' ws*
COLON <- ':' ws*
LBRACE <- '{' ws*
RBRACE <- '}' ws*
LBRACKET <- '[' ws*
RBRACKET <- ']' ws*





# boiler place stuff

ws <- (pseudo-comment / space / newline / carriage-return / tab) { (:text t) }
space <- ' '
newline <- '\n'
tab <- '\t'
carriage-return <- '\r'

