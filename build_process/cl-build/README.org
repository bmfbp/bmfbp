* todo
** join builder to runner, build-graph-in-memory to run
** in -> out of top
** no metadata, null metadata
** initially set state for each code part
** write filter for rp that gives * and + operators
*** rp is an assembler for parsing

* usage
  cl-user> (ql:quickload :arrowgrams/rephrase-compiler)
  cl-user> (ab::make-esa-dsl)
  cl-user> (ql:quickload :arrowgrams/esa)
  cl-user> (ab::make-esa)
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::hwtest)
  cl-user> (ab::test-run)

;; if adding (break) or changes only to files in cl-build...
;; skip (ab::hwtest) which generates the graph - it's been captured and is part of test-run
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::test-run)

** see also
*** ~/quicklisp/local-projects/build_process/cl-build/run.lisp

* build from top

#+RESULTS: arrowgrams
#+begin_example
"type"
"name"
"type"
"function"
"type"
"boolean"
"type"
"node-class"
"situation"
"building"
"situation"
"building-aux"
"situation"
"loading"
"situation"
"initializing"
"situation"
"running"
"class"
"part-definition"
"part-name"
"part-kind"
"end"
"class"
"class"
"named-part-instance"
"instance-name"
"instance-node"
"end"
"class"
"class"
"part-pin"
"part-name"
"pin-name"
"end"
"class"
"class"
"source"
"part-name"
"pin-name"
"end"
"class"
"class"
"destination"
"part-name"
"pin-name"
"end"
"class"
"class"
"wire"
"index"
"map"
"sources"
"map"
"destinations"
"end"
"class"
"class"
"kind"
"kind-name"
"input-pins"
"self-class"
"output-pins"
"parts"
"wires"
"end"
"class"
"class"
"node"
"input-queue"
"output-queue"
"kind-field"
"container"
"name-in-container"
"children"
"busy-flag"
"end"
"class"
"class"
"dispatcher"
"map"
"all-parts"
"top-node"
"end"
"class"
"class"
"event"
"partpin"
"data"
"end"
"class"
"when"
"building"
"kind"
"method"
"install-input-pin"
#\(
"name"
#\)
"method"
"install-output-pin"
#\(
"name"
#\)
"script"
"add-input-pin"
#\(
"name"
#\)
"script"
"add-output-pin"
#\(
"name"
#\)
"script"
"add-part"
#\(
"name"
"kind"
"node-class"
#\)
"script"
"add-wire"
#\(
"wire"
#\)
"method"
"install-wire"
#\(
"wire"
#\)
"method"
"install-part"
#\(
"name"
"kind"
"node-class"
#\)
"method"
"parts"
#\>
#\>
"map"
"part-definition"
"end"
"when"
"when"
"building-aux"
"kind"
"method"
"install-class"
#\(
"node-class"
#\)
"method"
"ensure-part-not-declared"
#\(
"name"
#\)
"method"
"ensure-valid-input-pin"
#\(
"name"
#\)
"method"
"ensure-valid-output-pin"
#\(
"name"
#\)
"method"
"ensure-input-pin-not-declared"
#\(
"name"
#\)
"method"
"ensure-output-pin-not-declared"
#\(
"name"
#\)
"script"
"ensure-valid-source"
#\(
"source"
#\)
"script"
"ensure-valid-destination"
#\(
"destination"
#\)
"end"
"when"
"when"
"building"
"part-definition"
"method"
"ensure-kind-defined"
"end"
"when"
"script"
"kind"
"add-input-pin"
#\(
"name"
#\)
"self"
#\.
"ensure-input-pin-not-declared"
#\(
"name"
#\)
"self"
#\.
"install-input-pin"
#\(
"name"
#\)
"end"
"script"
"script"
"kind"
"add-output-pin"
#\(
"name"
#\)
"self"
#\.
"ensure-output-pin-not-declared"
#\(
"name"
#\)
"self"
#\.
"install-output-pin"
#\(
"name"
#\)
"end"
"script"
"script"
"kind"
"add-part"
#\(
"nm"
"k"
"nclass"
#\)
"self"
#\.
"ensure-part-not-declared"
#\(
"nm"
#\)
"self"
#\.
"install-part"
#\(
"nm"
"k"
"nclass"
#\)
"end"
"script"
"script"
"kind"
"add-wire"
#\(
"w"
#\)
"map"
"s"
#\=
"w"
#\.
"sources"
"in"
#\@
"self"
#\.
"ensure-valid-source"
#\(
"s"
#\)
"end"
"map"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
#\@
"self"
#\.
"ensure-valid-destination"
#\(
"dest"
#\)
"end"
"map"
"self"
#\.
"install-wire"
#\(
"w"
#\)
"end"
"script"
"script"
"kind"
"ensure-valid-source"
#\(
"s"
#\)
"if"
"s"
#\.
"refers-to-self"
#\?
"then"
"self"
#\.
"ensure-valid-input-pin"
#\(
"s"
#\.
"pin-name"
#\)
"else"
"let"
"p"
#\=
"self"
#\.
"kind-find-part"
#\(
"s"
#\.
"part-name"
#\)
"in"
"p"
#\.
"ensure-kind-defined"
"p"
#\.
"part-kind"
#\.
"ensure-valid-output-pin"
#\(
"s"
#\.
"pin-name"
#\)
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"kind"
"ensure-valid-destination"
#\(
"dest"
#\)
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"self"
#\.
"ensure-valid-output-pin"
#\(
"dest"
#\.
"pin-name"
#\)
"else"
"let"
"p"
#\=
"self"
#\.
"kind-find-part"
#\(
"dest"
#\.
"part-name"
#\)
"in"
"p"
#\.
"ensure-kind-defined"
"p"
#\.
"part-kind"
#\.
"ensure-valid-input-pin"
#\(
"dest"
#\.
"pin-name"
#\)
"end"
"let"
"end"
"if"
"end"
"script"
"when"
"building"
"source"
"method"
"refers-to-self"
#\?
#\>
#\>
"boolean"
"end"
"when"
"when"
"building"
"destination"
"method"
"refers-to-self"
#\?
#\>
#\>
"boolean"
"end"
"when"
"when"
"building"
"wire"
"method"
"install-source"
#\(
"name"
"name"
#\)
"method"
"install-destination"
#\(
"name"
"name"
#\)
"end"
"when"
"script"
"wire"
"add-source"
#\(
"part"
"pin"
#\)
"self"
#\.
"install-source"
#\(
"part"
"pin"
#\)
"end"
"script"
"script"
"wire"
"add-destination"
#\(
"part"
"pin"
#\)
"self"
#\.
"install-destination"
#\(
"part"
"pin"
#\)
"end"
"script"
"when"
"loading"
"kind"
"script"
"loader"
#\(
"name"
"node"
"dispatcher"
#\)
#\>
#\>
"node"
"end"
"when"
"when"
"loading"
"node"
"method"
"clear-input-queue"
"method"
"clear-output-queue"
"method"
"install-node"
#\(
"node"
#\)
"script"
"add-child"
#\(
"name"
"node"
#\)
"end"
"when"
"script"
"kind"
"loader"
#\(
"my-name"
"my-container"
"dispatchr"
#\)
#\>
#\>
"node"
"let"
"clss"
#\=
"self"
#\.
"self-class"
"in"
"create"
"inst"
#\=
#\*
"clss"
"in"
"inst"
#\.
"clear-input-queue"
"inst"
#\.
"clear-output-queue"
"set"
"inst"
#\.
"kind-field"
#\=
"self"
"set"
"inst"
#\.
"container"
#\=
"my-container"
"set"
"inst"
#\.
"name-in-container"
#\=
"my-name"
"map"
"part"
#\=
"self"
#\.
"parts"
"in"
"let"
"part-instance"
#\=
#\@
"part"
#\.
"part-kind"
#\.
"loader"
#\(
"part"
#\.
"part-name"
"inst"
"dispatchr"
#\)
"in"
#\@
"inst"
#\.
"add-child"
#\(
"part"
#\.
"part-name"
"part-instance"
#\)
"end"
"let"
"end"
"map"
"dispatchr"
#\.
"memo-node"
#\(
"inst"
#\)
#\>
#\>
"inst"
"end"
"create"
"end"
"let"
"end"
"script"
"when"
"loading"
"dispatcher"
"method"
"memo-node"
#\(
"node"
#\)
"method"
"set-top-node"
#\(
"node"
#\)
"end"
"when"
"script"
"node"
"add-child"
#\(
"nm"
"nd"
#\)
"self"
#\.
"install-child"
#\(
"nm"
"nd"
#\)
"end"
"script"
"when"
"initializing"
"dispatcher"
"script"
"initialize-all"
"end"
"when"
"script"
"dispatcher"
"initialize-all"
"map"
"part"
#\=
"self"
#\.
"all-parts"
"in"
#\@
"part"
#\.
"initialize"
"end"
"map"
"end"
"script"
"when"
"initializing"
"node"
"script"
"initialize"
"method"
"initially"
"end"
"when"
"script"
"node"
"initialize"
"self"
#\.
"initially"
"end"
"script"
"when"
"intializing"
"or"
"running"
"node"
"method"
"send"
#\(
"event"
#\)
"script"
"distribute-output-events"
"method"
"display-output-events-to-console-and-delete"
"method"
"get-output-events-and-delete"
#\>
#\>
"map"
"event"
"method"
"has-no-container"
#\?
#\>
#\>
"boolean"
"script"
"distribute-outputs-upwards"
"end"
"when"
"when"
"running"
"dispatcher"
"script"
"start"
"script"
"distribute-all-outputs"
"script"
"run"
"method"
"declare-finished"
"end"
"when"
"when"
"running"
"kind"
"method"
"find-wire-for-source"
#\(
"name"
"name"
#\)
#\>
#\>
"wire"
"method"
"find-wire-for-self-source"
#\(
"name"
#\)
#\>
#\>
"wire"
"end"
"when"
"when"
"running"
"node"
"script"
"busy"
#\?
"script"
"ready"
#\?
"method"
"has-inputs-or-outputs"
#\?
#\>
#\>
"boolean"
"method"
"children"
#\?
#\>
#\>
"boolean"
"method"
"flagged-as-busy"
#\?
#\>
#\>
"boolean"
"method"
"dequeue-input"
"method"
"input-queue"
#\?
"method"
"enqueue-input"
#\(
"event"
#\)
"method"
"enqueue-output"
#\(
"event"
#\)
"method"
"react"
#\(
"event"
#\)
"script"
"run-reaction"
#\(
"event"
#\)
"script"
"run-composite-reaction"
#\(
"event"
#\)
"method"
"node-find-child"
#\(
"name"
#\)
#\>
#\>
"named-part-instance"
"end"
"when"
"script"
"node"
"busy"
#\?
#\>
#\>
"boolean"
"if"
"self"
#\.
"flagged-as-busy"
#\?
"then"
#\>
#\>
"true"
"else"
"map"
"child-part-instance"
#\=
"self"
#\.
"children"
"in"
"let"
"child-node"
#\=
"child-part-instance"
#\.
"instance-node"
"in"
"if"
"child-node"
#\.
"has-inputs-or-outputs"
#\?
"then"
#\>
#\>
"true"
"else"
"if"
#\@
"child-node"
#\.
"busy"
#\?
"then"
#\>
#\>
"true"
"end"
"if"
"end"
"if"
"end"
"let"
"end"
"map"
"end"
"if"
#\>
#\>
"false"
"end"
"script"
"script"
"dispatcher"
"start"
#\@
"self"
#\.
"distribute-all-outputs"
#\@
"self"
#\.
"run"
"end"
"script"
"script"
"dispatcher"
"run"
"let"
"done"
#\=
"true"
"in"
"loop"
"set"
"done"
#\=
"true"
#\@
"self"
#\.
"distribute-all-outputs"
"map"
"part"
#\=
"self"
#\.
"all-parts"
"in"
"if"
#\@
"part"
#\.
"ready"
#\?
"then"
#\@
"part"
#\.
"invoke"
"set"
"done"
#\=
"false"
"exit-map"
"end"
"if"
"end"
"map"
"exit-when"
"done"
"end"
"loop"
"end"
"let"
"self"
#\.
"declare-finished"
"end"
"script"
"script"
"node"
"invoke"
"let"
"e"
#\=
"self"
#\.
"dequeue-input"
"in"
#\@
"self"
#\.
"run-reaction"
#\(
"e"
#\)
#\@
"self"
#\.
"distribute-output-events"
"end"
"let"
"end"
"script"
"script"
"node"
"ready"
#\?
#\>
#\>
"boolean"
"if"
"self"
#\.
"input-queue"
#\?
"then"
"if"
#\@
"self"
#\.
"busy"
#\?
"then"
#\>
#\>
"false"
"else"
#\>
#\>
"true"
"end"
"if"
"end"
"if"
#\>
#\>
"false"
"end"
"script"
"script"
"dispatcher"
"distribute-all-outputs"
"map"
"p"
#\=
"self"
#\.
"all-parts"
"in"
#\@
"p"
#\.
"distribute-output-events"
#\@
"p"
#\.
"distribute-outputs-upwards"
"end"
"map"
"end"
"script"
"script"
"node"
"distribute-outputs-upwards"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"else"
"let"
"parent"
#\=
"self"
#\.
"container"
"in"
"parent"
#\.
"distribute-output-events"
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"node"
"distribute-output-events"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"self"
#\.
"display-output-events-to-console-and-delete"
"else"
"let"
"parent-composite-node"
#\=
"self"
#\.
"container"
"in"
"map"
"output"
#\=
"self"
#\.
"get-output-events-and-delete"
"in"
"let"
"dest"
#\=
"output"
#\.
"partpin"
"in"
"let"
"w"
#\=
"parent-composite-node"
#\.
"kind-field"
#\.
"find-wire-for-source"
#\(
"output"
#\.
"partpin"
#\.
"part-name"
"output"
#\.
"partpin"
#\.
"pin-name"
#\)
"in"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"set"
"pp"
#\.
"part-name"
#\=
"parent-composite-node"
#\.
"name-in-container"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"output"
#\.
"data"
"parent-composite-node"
#\.
"send"
#\(
"new-event"
#\)
"end"
"create"
"end"
"create"
"else"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"output"
#\.
"data"
"let"
"child-part-instance"
#\=
"parent-composite-node"
#\.
"node-find-child"
#\(
"pp"
#\.
"part-name"
#\)
"in"
"child-part-instance"
#\.
"instance-node"
#\.
"enqueue-input"
#\(
"new-event"
#\)
"end"
"let"
"end"
"create"
"end"
"create"
"end"
"if"
"end"
"map"
"end"
"let"
"end"
"let"
"end"
"map"
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"node"
"run-reaction"
#\(
"e"
#\)
"self"
#\.
"react"
#\(
"e"
#\)
"end"
"script"
"script"
"node"
"run-composite-reaction"
#\(
"e"
#\)
"let"
"w"
#\=
"true"
"in"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"set"
"w"
#\=
"self"
#\.
"kind-field"
#\.
"find-wire-for-self-source"
#\(
"e"
#\.
"partpin"
#\.
"pin-name"
#\)
"else"
"set"
"w"
#\=
"self"
#\.
"container"
#\.
"kind-field"
#\.
"find-wire-for-source"
#\(
"e"
#\.
"partpin"
#\.
"part-name"
"e"
#\.
"partpin"
#\.
"pin-name"
#\)
"end"
"if"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"e"
#\.
"data"
"self"
#\.
"send"
#\(
"new-event"
#\)
"else"
"if"
"self"
#\.
"children"
#\?
"then"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"e"
#\.
"data"
"let"
"child-part-instance"
#\=
"self"
#\.
"node-find-child"
#\(
"dest"
#\.
"part-name"
#\)
"in"
"child-part-instance"
#\.
"instance-node"
#\.
"enqueue-input"
#\(
"new-event"
#\)
"end"
"let"
"end"
"if"
"end"
"if"
"end"
"create"
"end"
"create"
"end"
"map"
"end"
"let"
"end"
"script"
:EOF
terminating - ready list is nil
To load "arrowgrams/build":
  Load 1 ASDF system:
    arrowgrams/build
; Loading "arrowgrams/build"
[package cl-ppcre]................................
..................................................
[package json]....................................
[package json-rpc]................................
[package sl]......................................
[package cl-holm-prolog]..........................
[package cl-peg]..................................
[package peg-grammar].............................
[package test-grammar]............................
[package arrowgrams/compiler].....................
..................................................
[package arrowgrams/compiler].....................
[package arrowgrams/compiler].....................
[package arrowgrams/compiler].....................
..................................................
[package arrowgrams/build]............
in compiler-event-passing
........
#+end_example

#+name: arrowgrams
#+begin_src lisp :results output
  (uiop:run-program "rm -rf ~/.cache/common-lisp")
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src

#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::make-esa-dsl)
  (ql:quickload :arrowgrams/esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::make-esa)
  (ql:quickload :arrowgrams/build)
#+end_src
#+name: arrowgrams
#+results output
#+begin_src lisp :results output
  (arrowgrams/build::btest)
#+end_src

#+RESULTS:
#+begin_example
drawio :SVG-FILENAME #P"/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/lispparts/boot-boot.svg"
front-end-main gets #P"/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/lispparts/boot-boot.svg"
ellipse-bounding-boxes rectangle-bounding-boxes text-bounding-boxes speechbubble-bounding-boxes 
assign-parents-to-ellipses find-comments find-metadata 
"WARNING FB: fact already exists (USED ID712)"
retract (:RECT :ID709)
add-kinds add-self-ports make-unknown-port-names /create-centers COMMENTED OUT/ /calculate-distances COMMENTED OUT/ assign-portnames mark-indexed-ports coincident-ports /mark-directions (noop)/ match-ports-to-components mark-nc pinless /COMMENTED OUT sem-parts-have-some-ports/ sem-ports-have-sink-or-source /COMMENTED OUT sem-no-duplicate-kinds/ sem-speech-vs-comments assign-wire-numbers-to-edges self-input-pins self-output-pins input-pins output-pins emitter demux done FB RESET 
back-end collector gets :PARSE ... 
(
:string /"BOOT-BOOT"/
:string /"BOOT-BOOT"/
:string /"[{"dir":"build_process/","kindName":"compiler","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/compiler.lisp","ref":"master"},{"dir":"build_process/","kindName":"part-namer","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/part-namer.lisp","ref":"master"},{"dir":"build_process/","kindName":"build process","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/json-array-splitter.svg","ref":"master"},{"dir":"build_process/","kindName":"children-before-graph","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/children-before-graph.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-collector","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-collector.lisp","ref":"master"},{"dir":"build_process/","kindName":"get-manifest-file","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/get-manifest-file.lisp","ref":"master"},{"dir":"build_process/","kindName":"schematic-or-leaf","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/schematic-or-leaf.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-graph-in-memory","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-graph-in-memory.lisp","ref":"master"},{"dir":"build_process/","kindName":"runner","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/runner.lisp","ref":"master"}]"/
(
:string /"svg-filename"/
:string /"done"/
)
(
:string /"error"/
:string /"descriptor"/
)
:string /"react"/
:string /"first-time"/
(
(
:string /"ID849"/
:string /"runner"/
(
:string /"json-collection"/
)
(
:string /"error"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID842"/
:string /"build-graph-in-memory"/
(
:string /"done"/
:string /"json-script"/
)
(
:string /"json-collection"/
:string /"error"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID809"/
:string /"build-collector"/
(
:string /"done"/
:string /"name"/
:string /"graph"/
:string /"descriptor"/
)
(
:string /"done"/
:string /"final-code"/
:string /"error"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID778"/
:string /"children-before-graph"/
(
:string /"child"/
:string /"graph"/
:string /"graph-name"/
)
(
:string /"error"/
:string /"name"/
:string /"graph"/
:string /"descriptor"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID750"/
:string /"get-manifest-file"/
(
:string /"in"/
)
(
:string /"out"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID732"/
:string /"schematic-or-leaf"/
(
:string /"manifest-as json-string"/
)
(
:string /"schematic-filename"/
:string /"child-descriptor"/
:string /"error"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID685"/
:string /"json-array-splitter"/
(
:string /"json"/
:string /"array"/
)
(
:string /"error"/
:string /"graph"/
:string /"items"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID668"/
:string /"part-namer"/
(
:string /"filename"/
)
(
:string /"name"/
)
:string /"react"/
:string /"first-time"/
)
(
:string /"ID649"/
:string /"Compiler"/
(
:string /"svg-filename"/
)
(
:string /"json"/
:string /"error"/
:string /"lisp"/
:string /"metadata"/
)
:string /"react"/
:string /"first-time"/
)
)
(
(
:integer 0
(
(
:string /"ID649"/
:string /"metadata"/
)
)
(
(
:string /"ID685"/
:string /"array"/
)
)
)
(
:integer 1
(
(
:string /"ID649"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
(
:integer 2
(
(
:string /"ID649"/
:string /"json"/
)
)
(
(
:string /"ID685"/
:string /"json"/
)
)
)
(
:integer 3
(
(
:string /"self"/
:string /"svg-filename"/
)
)
(
(
:string /"ID649"/
:string /"svg-filename"/
)
(
:string /"ID668"/
:string /"filename"/
)
)
)
(
:integer 4
(
(
:string /"ID668"/
:string /"name"/
)
)
(
(
:string /"ID778"/
:string /"graph-name"/
)
)
)
(
:integer 5
(
(
:string /"ID685"/
:string /"items"/
)
)
(
(
:string /"ID750"/
:string /"in"/
)
)
)
(
:integer 6
(
(
:string /"ID685"/
:string /"graph"/
)
)
(
(
:string /"ID778"/
:string /"graph"/
)
)
)
(
:integer 7
(
(
:string /"ID685"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
(
:integer 8
(
(
:string /"ID732"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
(
:integer 9
(
(
:string /"ID732"/
:string /"child-descriptor"/
)
)
(
(
:string /"ID778"/
:string /"child"/
)
)
)
(
:integer 10
(
(
:string /"ID732"/
:string /"schematic-filename"/
)
)
(
(
:string /"ID668"/
:string /"filename"/
)
(
:string /"ID668"/
:string /"filename"/
)
)
)
(
:integer 11
(
(
:string /"ID750"/
:string /"out"/
)
)
(
(
:string /"ID732"/
:string /"manifest-as json-string"/
)
)
)
(
:integer 12
(
(
:string /"ID778"/
:string /"descriptor"/
)
)
(
(
:string /"ID809"/
:string /"descriptor"/
)
)
)
(
:integer 13
(
(
:string /"ID778"/
:string /"graph"/
)
)
(
(
:string /"ID809"/
:string /"graph"/
)
)
)
(
:integer 14
(
(
:string /"ID778"/
:string /"name"/
)
)
(
(
:string /"ID809"/
:string /"name"/
)
)
)
(
:integer 15
(
(
:string /"ID778"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
(
:integer 16
(
(
:string /"ID809"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
(
:integer 17
(
(
:string /"ID809"/
:string /"final-code"/
)
)
(
(
:string /"ID842"/
:string /"json-script"/
)
)
)
(
:integer 18
(
(
:string /"ID809"/
:string /"done"/
)
)
(
(
:string /"ID842"/
:string /"done"/
)
)
)
(
:integer 19
(
(
:string /"self"/
:string /"done"/
)
)
(
(
:string /"ID809"/
:string /"done"/
)
)
)
(
:integer 20
(
(
:string /"ID842"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"error"/
)
)
)
(
:integer 21
(
(
:string /"ID842"/
:string /"json-collection"/
)
)
(
(
:string /"ID849"/
:string /"json-collection"/
)
)
)
(
:integer 22
(
(
:string /"ID849"/
:string /"error"/
)
)
(
(
:string /"self"/
:string /"descriptor"/
)
)
)
)
)
:string /BOOT-BOOT/
:string /"BOOT-BOOT"/
:string /[{"dir":"build_process/","kindName":"compiler","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/compiler.lisp","ref":"master"},{"dir":"build_process/","kindName":"part-namer","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/part-namer.lisp","ref":"master"},{"dir":"build_process/","kindName":"build process","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/json-array-splitter.svg","ref":"master"},{"dir":"build_process/","kindName":"children-before-graph","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/children-before-graph.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-collector","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-collector.lisp","ref":"master"},{"dir":"build_process/","kindName":"get-manifest-file","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/get-manifest-file.lisp","ref":"master"},{"dir":"build_process/","kindName":"schematic-or-leaf","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/schematic-or-leaf.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-graph-in-memory","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-graph-in-memory.lisp","ref":"master"},{"dir":"build_process/","kindName":"runner","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/runner.lisp","ref":"master"}]/
:inputs
:string /done/
:string /svg-filename/
:end
:outputs
:string /descriptor/
:string /error/
:end
:string /"react"/
:string /"first-time"/
:integer 23
:string /ID849/
:string /runner/
:integer 1
:inmap
:string /json-collection/
:integer 0
:end
:inputs
:string /json-collection/
:integer 21
:end
:end
:integer 1
:outmap
:string /error/
:integer 0
:end
:outputs
:string /error/
:integer 22
:end
:end
:string /ID842/
:string /build-graph-in-memory/
:integer 2
:inmap
:string /json-script/
:integer 0
:string /done/
:integer 1
:end
:inputs
:string /json-script/
:integer 17
:end
:string /done/
:integer 18
:end
:end
:integer 2
:outmap
:string /error/
:integer 0
:string /json-collection/
:integer 1
:end
:outputs
:string /error/
:integer 20
:end
:string /json-collection/
:integer 21
:end
:end
:string /ID809/
:string /build-collector/
:integer 4
:inmap
:string /descriptor/
:integer 0
:string /graph/
:integer 1
:string /name/
:integer 2
:string /done/
:integer 3
:end
:inputs
:string /descriptor/
:integer 12
:end
:string /graph/
:integer 13
:end
:string /name/
:integer 14
:end
:string /done/
:integer 19
:end
:end
:integer 3
:outmap
:string /error/
:integer 0
:string /final-code/
:integer 1
:string /done/
:integer 2
:end
:outputs
:string /error/
:integer 16
:end
:string /final-code/
:integer 17
:end
:string /done/
:integer 18
:end
:end
:string /ID778/
:string /children-before-graph/
:integer 3
:inmap
:string /graph-name/
:integer 0
:string /graph/
:integer 1
:string /child/
:integer 2
:end
:inputs
:string /graph-name/
:integer 4
:end
:string /graph/
:integer 6
:end
:string /child/
:integer 9
:end
:end
:integer 4
:outmap
:string /descriptor/
:integer 0
:string /graph/
:integer 1
:string /name/
:integer 2
:string /error/
:integer 3
:end
:outputs
:string /descriptor/
:integer 12
:end
:string /graph/
:integer 13
:end
:string /name/
:integer 14
:end
:string /error/
:integer 15
:end
:end
:string /ID750/
:string /get-manifest-file/
:integer 1
:inmap
:string /in/
:integer 0
:end
:inputs
:string /in/
:integer 5
:end
:end
:integer 1
:outmap
:string /out/
:integer 0
:end
:outputs
:string /out/
:integer 11
:end
:end
:string /ID732/
:string /schematic-or-leaf/
:integer 1
:inmap
:string /manifest-as json-string/
:integer 0
:end
:inputs
:string /manifest-as json-string/
:integer 11
:end
:end
:integer 3
:outmap
:string /error/
:integer 0
:string /child-descriptor/
:integer 1
:string /schematic-filename/
:integer 2
:end
:outputs
:string /error/
:integer 8
:end
:string /child-descriptor/
:integer 9
:end
:string /schematic-filename/
:integer 10
:end
:end
:string /ID685/
:string /json-array-splitter/
:integer 2
:inmap
:string /array/
:integer 0
:string /json/
:integer 1
:end
:inputs
:string /array/
:integer 0
:end
:string /json/
:integer 2
:end
:end
:integer 3
:outmap
:string /items/
:integer 0
:string /graph/
:integer 1
:string /error/
:integer 2
:end
:outputs
:string /items/
:integer 5
:end
:string /graph/
:integer 6
:end
:string /error/
:integer 7
:end
:end
:string /ID668/
:string /part-namer/
:integer 1
:inmap
:string /filename/
:integer 0
:end
:inputs
:string /filename/
:integer 10
:integer 3
:end
:end
:integer 1
:outmap
:string /name/
:integer 0
:end
:outputs
:string /name/
:integer 4
:end
:end
:string /ID649/
:string /Compiler/
:integer 1
:inmap
:string /svg-filename/
:integer 0
:end
:inputs
:string /svg-filename/
:integer 3
:end
:end
:integer 4
:outmap
:string /metadata/
:integer 0
:string /lisp/
:integer 1
:string /error/
:integer 2
:string /json/
:integer 3
:end
:outputs
:string /metadata/
:integer 0
:end
:string /lisp/
:end
:string /error/
:integer 1
:end
:string /json/
:integer 2
:end
:end
(
:string /"BOOT-BOOT"/
:string /"BOOT-BOOT"/
:string /"[{"dir":"build_process/","kindName":"compiler","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/compiler.lisp","ref":"master"},{"dir":"build_process/","kindName":"part-namer","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/part-namer.lisp","ref":"master"},{"dir":"build_process/","kindName":"build process","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/json-array-splitter.svg","ref":"master"},{"dir":"build_process/","kindName":"children-before-graph","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/children-before-graph.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-collector","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-collector.lisp","ref":"master"},{"dir":"build_process/","kindName":"get-manifest-file","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/get-manifest-file.lisp","ref":"master"},{"dir":"build_process/","kindName":"schematic-or-leaf","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/schematic-or-leaf.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-graph-in-memory","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-graph-in-memory.lisp","ref":"master"},{"dir":"build_process/","kindName":"runner","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/runner.lisp","ref":"master"}]"/
(
:string /svg-filename/
:string /done/
)
(
:string /error/
:string /descriptor/
)
:string /"react"/
:string /"first-time"/
(
(
:string /ID849/
:string /runner/
(
:string /json-collection/
)
(
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID842/
:string /build-graph-in-memory/
(
:string /done/
:string /json-script/
)
(
:string /json-collection/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID809/
:string /build-collector/
(
:string /done/
:string /name/
:string /graph/
:string /descriptor/
)
(
:string /done/
:string /final-code/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID778/
:string /children-before-graph/
(
:string /child/
:string /graph/
:string /graph-name/
)
(
:string /error/
:string /name/
:string /graph/
:string /descriptor/
)
:string /react/
:string /first-time/
)
(
:string /ID750/
:string /get-manifest-file/
(
:string /in/
)
(
:string /out/
)
:string /react/
:string /first-time/
)
(
:string /ID732/
:string /schematic-or-leaf/
(
:string /manifest-as json-string/
)
(
:string /schematic-filename/
:string /child-descriptor/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID685/
:string /json-array-splitter/
(
:string /json/
:string /array/
)
(
:string /error/
:string /graph/
:string /items/
)
:string /react/
:string /first-time/
)
(
:string /ID668/
:string /part-namer/
(
:string /filename/
)
(
:string /name/
)
:string /react/
:string /first-time/
)
(
:string /ID649/
:string /Compiler/
(
:string /svg-filename/
)
(
:string /json/
:string /error/
:string /lisp/
:string /metadata/
)
:string /react/
:string /first-time/
)
)
(
(
:integer 0
(
(
:string /ID649/
:string /metadata/
)
)
(
(
:string /ID685/
:string /array/
)
)
)
(
:integer 1
(
(
:string /ID649/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 2
(
(
:string /ID649/
:string /json/
)
)
(
(
:string /ID685/
:string /json/
)
)
)
(
:integer 3
(
(
:string /self/
:string /svg-filename/
)
)
(
(
:string /ID649/
:string /svg-filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 4
(
(
:string /ID668/
:string /name/
)
)
(
(
:string /ID778/
:string /graph-name/
)
)
)
(
:integer 5
(
(
:string /ID685/
:string /items/
)
)
(
(
:string /ID750/
:string /in/
)
)
)
(
:integer 6
(
(
:string /ID685/
:string /graph/
)
)
(
(
:string /ID778/
:string /graph/
)
)
)
(
:integer 7
(
(
:string /ID685/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 8
(
(
:string /ID732/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 9
(
(
:string /ID732/
:string /child-descriptor/
)
)
(
(
:string /ID778/
:string /child/
)
)
)
(
:integer 10
(
(
:string /ID732/
:string /schematic-filename/
)
)
(
(
:string /ID668/
:string /filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 11
(
(
:string /ID750/
:string /out/
)
)
(
(
:string /ID732/
:string /manifest-as json-string/
)
)
)
(
:integer 12
(
(
:string /ID778/
:string /descriptor/
)
)
(
(
:string /ID809/
:string /descriptor/
)
)
)
(
:integer 13
(
(
:string /ID778/
:string /graph/
)
)
(
(
:string /ID809/
:string /graph/
)
)
)
(
:integer 14
(
(
:string /ID778/
:string /name/
)
)
(
(
:string /ID809/
:string /name/
)
)
)
(
:integer 15
(
(
:string /ID778/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 16
(
(
:string /ID809/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 17
(
(
:string /ID809/
:string /final-code/
)
)
(
(
:string /ID842/
:string /json-script/
)
)
)
(
:integer 18
(
(
:string /ID809/
:string /done/
)
)
(
(
:string /ID842/
:string /done/
)
)
)
(
:integer 19
(
(
:string /self/
:string /done/
)
)
(
(
:string /ID809/
:string /done/
)
)
)
(
:integer 20
(
(
:string /ID842/
:string /error/
)
)
(
(
:string /self/
:string /error/
)
)
)
(
:integer 21
(
(
:string /ID842/
:string /json-collection/
)
)
(
(
:string /ID849/
:string /json-collection/
)
)
)
(
:integer 22
(
(
:string /ID849/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
)
)
(
:string /"BOOT-BOOT"/
:string /"BOOT-BOOT"/
:string /"[{"dir":"build_process/","kindName":"compiler","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/compiler.lisp","ref":"master"},{"dir":"build_process/","kindName":"part-namer","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/part-namer.lisp","ref":"master"},{"dir":"build_process/","kindName":"build process","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/json-array-splitter.svg","ref":"master"},{"dir":"build_process/","kindName":"children-before-graph","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/children-before-graph.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-collector","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-collector.lisp","ref":"master"},{"dir":"build_process/","kindName":"get-manifest-file","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/get-manifest-file.lisp","ref":"master"},{"dir":"build_process/","kindName":"schematic-or-leaf","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/schematic-or-leaf.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-graph-in-memory","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-graph-in-memory.lisp","ref":"master"},{"dir":"build_process/","kindName":"runner","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/runner.lisp","ref":"master"}]"/
(
:string /svg-filename/
:string /done/
)
(
:string /error/
:string /descriptor/
)
:string /"react"/
:string /"first-time"/
(
(
:string /ID849/
:string /runner/
(
:string /json-collection/
)
(
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID842/
:string /build-graph-in-memory/
(
:string /done/
:string /json-script/
)
(
:string /json-collection/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID809/
:string /build-collector/
(
:string /done/
:string /name/
:string /graph/
:string /descriptor/
)
(
:string /done/
:string /final-code/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID778/
:string /children-before-graph/
(
:string /child/
:string /graph/
:string /graph-name/
)
(
:string /error/
:string /name/
:string /graph/
:string /descriptor/
)
:string /react/
:string /first-time/
)
(
:string /ID750/
:string /get-manifest-file/
(
:string /in/
)
(
:string /out/
)
:string /react/
:string /first-time/
)
(
:string /ID732/
:string /schematic-or-leaf/
(
:string /manifest-as json-string/
)
(
:string /schematic-filename/
:string /child-descriptor/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID685/
:string /json-array-splitter/
(
:string /json/
:string /array/
)
(
:string /error/
:string /graph/
:string /items/
)
:string /react/
:string /first-time/
)
(
:string /ID668/
:string /part-namer/
(
:string /filename/
)
(
:string /name/
)
:string /react/
:string /first-time/
)
(
:string /ID649/
:string /Compiler/
(
:string /svg-filename/
)
(
:string /json/
:string /error/
:string /lisp/
:string /metadata/
)
:string /react/
:string /first-time/
)
)
(
(
:integer 0
(
(
:string /ID649/
:string /metadata/
)
)
(
(
:string /ID685/
:string /array/
)
)
)
(
:integer 1
(
(
:string /ID649/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 2
(
(
:string /ID649/
:string /json/
)
)
(
(
:string /ID685/
:string /json/
)
)
)
(
:integer 3
(
(
:string /self/
:string /svg-filename/
)
)
(
(
:string /ID649/
:string /svg-filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 4
(
(
:string /ID668/
:string /name/
)
)
(
(
:string /ID778/
:string /graph-name/
)
)
)
(
:integer 5
(
(
:string /ID685/
:string /items/
)
)
(
(
:string /ID750/
:string /in/
)
)
)
(
:integer 6
(
(
:string /ID685/
:string /graph/
)
)
(
(
:string /ID778/
:string /graph/
)
)
)
(
:integer 7
(
(
:string /ID685/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 8
(
(
:string /ID732/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 9
(
(
:string /ID732/
:string /child-descriptor/
)
)
(
(
:string /ID778/
:string /child/
)
)
)
(
:integer 10
(
(
:string /ID732/
:string /schematic-filename/
)
)
(
(
:string /ID668/
:string /filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 11
(
(
:string /ID750/
:string /out/
)
)
(
(
:string /ID732/
:string /manifest-as json-string/
)
)
)
(
:integer 12
(
(
:string /ID778/
:string /descriptor/
)
)
(
(
:string /ID809/
:string /descriptor/
)
)
)
(
:integer 13
(
(
:string /ID778/
:string /graph/
)
)
(
(
:string /ID809/
:string /graph/
)
)
)
(
:integer 14
(
(
:string /ID778/
:string /name/
)
)
(
(
:string /ID809/
:string /name/
)
)
)
(
:integer 15
(
(
:string /ID778/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 16
(
(
:string /ID809/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 17
(
(
:string /ID809/
:string /final-code/
)
)
(
(
:string /ID842/
:string /json-script/
)
)
)
(
:integer 18
(
(
:string /ID809/
:string /done/
)
)
(
(
:string /ID842/
:string /done/
)
)
)
(
:integer 19
(
(
:string /self/
:string /done/
)
)
(
(
:string /ID809/
:string /done/
)
)
)
(
:integer 20
(
(
:string /ID842/
:string /error/
)
)
(
(
:string /self/
:string /error/
)
)
)
(
:integer 21
(
(
:string /ID842/
:string /json-collection/
)
)
(
(
:string /ID849/
:string /json-collection/
)
)
)
(
:integer 22
(
(
:string /ID849/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
)
)
(
:string /"BOOT-BOOT"/
:string /"BOOT-BOOT"/
:string /"[{"dir":"build_process/","kindName":"compiler","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/compiler.lisp","ref":"master"},{"dir":"build_process/","kindName":"part-namer","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/part-namer.lisp","ref":"master"},{"dir":"build_process/","kindName":"build process","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/json-array-splitter.svg","ref":"master"},{"dir":"build_process/","kindName":"children-before-graph","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/children-before-graph.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-collector","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-collector.lisp","ref":"master"},{"dir":"build_process/","kindName":"get-manifest-file","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/get-manifest-file.lisp","ref":"master"},{"dir":"build_process/","kindName":"schematic-or-leaf","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/schematic-or-leaf.lisp","ref":"master"},{"dir":"build_process/","kindName":"build-graph-in-memory","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/build-graph-in-memory.lisp","ref":"master"},{"dir":"build_process/","kindName":"runner","repo":"https://github.com/bmfbp/bmfbp.git","file":"lispparts/runner.lisp","ref":"master"}]"/
(
:string /svg-filename/
:string /done/
)
(
:string /error/
:string /descriptor/
)
:string /"react"/
:string /"first-time"/
(
(
:string /ID849/
:string /runner/
(
:string /json-collection/
)
(
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID842/
:string /build-graph-in-memory/
(
:string /done/
:string /json-script/
)
(
:string /json-collection/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID809/
:string /build-collector/
(
:string /done/
:string /name/
:string /graph/
:string /descriptor/
)
(
:string /done/
:string /final-code/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID778/
:string /children-before-graph/
(
:string /child/
:string /graph/
:string /graph-name/
)
(
:string /error/
:string /name/
:string /graph/
:string /descriptor/
)
:string /react/
:string /first-time/
)
(
:string /ID750/
:string /get-manifest-file/
(
:string /in/
)
(
:string /out/
)
:string /react/
:string /first-time/
)
(
:string /ID732/
:string /schematic-or-leaf/
(
:string /manifest-as json-string/
)
(
:string /schematic-filename/
:string /child-descriptor/
:string /error/
)
:string /react/
:string /first-time/
)
(
:string /ID685/
:string /json-array-splitter/
(
:string /json/
:string /array/
)
(
:string /error/
:string /graph/
:string /items/
)
:string /react/
:string /first-time/
)
(
:string /ID668/
:string /part-namer/
(
:string /filename/
)
(
:string /name/
)
:string /react/
:string /first-time/
)
(
:string /ID649/
:string /Compiler/
(
:string /svg-filename/
)
(
:string /json/
:string /error/
:string /lisp/
:string /metadata/
)
:string /react/
:string /first-time/
)
)
(
(
:integer 0
(
(
:string /ID649/
:string /metadata/
)
)
(
(
:string /ID685/
:string /array/
)
)
)
(
:integer 1
(
(
:string /ID649/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 2
(
(
:string /ID649/
:string /json/
)
)
(
(
:string /ID685/
:string /json/
)
)
)
(
:integer 3
(
(
:string /self/
:string /svg-filename/
)
)
(
(
:string /ID649/
:string /svg-filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 4
(
(
:string /ID668/
:string /name/
)
)
(
(
:string /ID778/
:string /graph-name/
)
)
)
(
:integer 5
(
(
:string /ID685/
:string /items/
)
)
(
(
:string /ID750/
:string /in/
)
)
)
(
:integer 6
(
(
:string /ID685/
:string /graph/
)
)
(
(
:string /ID778/
:string /graph/
)
)
)
(
:integer 7
(
(
:string /ID685/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 8
(
(
:string /ID732/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 9
(
(
:string /ID732/
:string /child-descriptor/
)
)
(
(
:string /ID778/
:string /child/
)
)
)
(
:integer 10
(
(
:string /ID732/
:string /schematic-filename/
)
)
(
(
:string /ID668/
:string /filename/
)
(
:string /ID668/
:string /filename/
)
)
)
(
:integer 11
(
(
:string /ID750/
:string /out/
)
)
(
(
:string /ID732/
:string /manifest-as json-string/
)
)
)
(
:integer 12
(
(
:string /ID778/
:string /descriptor/
)
)
(
(
:string /ID809/
:string /descriptor/
)
)
)
(
:integer 13
(
(
:string /ID778/
:string /graph/
)
)
(
(
:string /ID809/
:string /graph/
)
)
)
(
:integer 14
(
(
:string /ID778/
:string /name/
)
)
(
(
:string /ID809/
:string /name/
)
)
)
(
:integer 15
(
(
:string /ID778/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 16
(
(
:string /ID809/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
(
:integer 17
(
(
:string /ID809/
:string /final-code/
)
)
(
(
:string /ID842/
:string /json-script/
)
)
)
(
:integer 18
(
(
:string /ID809/
:string /done/
)
)
(
(
:string /ID842/
:string /done/
)
)
)
(
:integer 19
(
(
:string /self/
:string /done/
)
)
(
(
:string /ID809/
:string /done/
)
)
)
(
:integer 20
(
(
:string /ID842/
:string /error/
)
)
(
(
:string /self/
:string /error/
)
)
)
(
:integer 21
(
(
:string /ID842/
:string /json-collection/
)
)
(
(
:string /ID849/
:string /json-collection/
)
)
)
(
:integer 22
(
(
:string /ID849/
:string /error/
)
)
(
(
:string /self/
:string /descriptor/
)
)
)
)
)
build-collector gets :NAME /"boot-boot"/
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./compiler\",
  \"kindType\": \"leaf\",
  \"pla"
loaded lisp file ""
build-collector gets :GRAPH /"{
  \"name\" : \"BOOT-BOOT\",
  \"inputs\" : [\"SVG-FILENAME\", \"DONE\"],
  \"outputs\" : [\"ERROR\", \"DESCRIPTOR\"],
  \"parts\" :
  [
    { \"partName\" : \"RUNNER\", \"kindName\" : \"RUNNER\"},
    { \"partName\" : \"BUILD-GRAPH-IN-MEMORY\", \"kindName\" : \"BUILD-GRAPH-IN-MEMORY\"},
    { \"partName\" : \"BUILD-COLLECTOR\", \"kindName\" : \"BUILD-COLLECTOR\"},
    { \"partName\" : \"CHILDREN-BEFORE-GRAPH\", \"kindName\" : \"CHILDREN-BEFORE-GRAPH\"},
    { \"partName\" : \"GET-MANIFEST-FILE\", \"kindName\" : \"GET-MANIFEST-FILE\"},
    { \"partName\" : \"SCHEMATIC-OR-LEAF\", \"kindName\" : \"SCHEMATIC-OR-LEAF\"},
    { \"partName\" : \"JSON-ARRAY-SPLITTER\", \"kindName\" : \"JSON-ARRAY-SPLITTER\"},
    { \"partName\" : \"PART-NAMER\", \"kindName\" : \"PART-NAMER\"},
    { \"partName\" : \"COMPILER\", \"kindName\" : \"COMPILER\"}
  ],
  \"wiring\" :
    [
      {\"wire-index\" : 0, \"sources\" : [{\"part\" : \"COMPILER\", \"pin\" : \"METADATA\"}], \"receivers\" : [{\"part\" : \"JSON-ARRAY-SPLITTER\", \"pin\" : \"ARRAY\"}]},
      {\"wire-index\" : 1, \"sources\" : [{\"part\" : \"COMPILER\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 2, \"sources\" : [{\"part\" : \"COMPILER\", \"pin\" : \"JSON\"}], \"receivers\" : [{\"part\" : \"JSON-ARRAY-SPLITTER\", \"pin\" : \"JSON\"}]},
      {\"wire-index\" : 3, \"sources\" : [{\"part\" : \"SELF\", \"pin\" : \"SVG-FILENAME\"}], \"receivers\" : [{\"part\" : \"COMPILER\", \"pin\" : \"SVG-FILENAME\"},{\"part\" : \"PART-NAMER\", \"pin\" : \"FILENAME\"}]},
      {\"wire-index\" : 4, \"sources\" : [{\"part\" : \"PART-NAMER\", \"pin\" : \"NAME\"}], \"receivers\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"GRAPH-NAME\"}]},
      {\"wire-index\" : 5, \"sources\" : [{\"part\" : \"JSON-ARRAY-SPLITTER\", \"pin\" : \"ITEMS\"}], \"receivers\" : [{\"part\" : \"GET-MANIFEST-FILE\", \"pin\" : \"IN\"}]},
      {\"wire-index\" : 6, \"sources\" : [{\"part\" : \"JSON-ARRAY-SPLITTER\", \"pin\" : \"GRAPH\"}], \"receivers\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"GRAPH\"}]},
      {\"wire-index\" : 7, \"sources\" : [{\"part\" : \"JSON-ARRAY-SPLITTER\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 8, \"sources\" : [{\"part\" : \"SCHEMATIC-OR-LEAF\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 9, \"sources\" : [{\"part\" : \"SCHEMATIC-OR-LEAF\", \"pin\" : \"CHILD-DESCRIPTOR\"}], \"receivers\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"CHILD\"}]},
      {\"wire-index\" : 10, \"sources\" : [{\"part\" : \"SCHEMATIC-OR-LEAF\", \"pin\" : \"SCHEMATIC-FILENAME\"}], \"receivers\" : [{\"part\" : \"PART-NAMER\", \"pin\" : \"FILENAME\"},{\"part\" : \"PART-NAMER\", \"pin\" : \"FILENAME\"}]},
      {\"wire-index\" : 11, \"sources\" : [{\"part\" : \"GET-MANIFEST-FILE\", \"pin\" : \"OUT\"}], \"receivers\" : [{\"part\" : \"SCHEMATIC-OR-LEAF\", \"pin\" : \"MANIFEST-AS-JSON-STRING\"}]},
      {\"wire-index\" : 12, \"sources\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"DESCRIPTOR\"}], \"receivers\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 13, \"sources\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"GRAPH\"}], \"receivers\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"GRAPH\"}]},
      {\"wire-index\" : 14, \"sources\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"NAME\"}], \"receivers\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"NAME\"}]},
      {\"wire-index\" : 15, \"sources\" : [{\"part\" : \"CHILDREN-BEFORE-GRAPH\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 16, \"sources\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]},
      {\"wire-index\" : 17, \"sources\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"FINAL-CODE\"}], \"receivers\" : [{\"part\" : \"BUILD-GRAPH-IN-MEMORY\", \"pin\" : \"JSON-SCRIPT\"}]},
      {\"wire-index\" : 18, \"sources\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"DONE\"}], \"receivers\" : [{\"part\" : \"BUILD-GRAPH-IN-MEMORY\", \"pin\" : \"DONE\"}]},
      {\"wire-index\" : 19, \"sources\" : [{\"part\" : \"SELF\", \"pin\" : \"DONE\"}], \"receivers\" : [{\"part\" : \"BUILD-COLLECTOR\", \"pin\" : \"DONE\"}]},
      {\"wire-index\" : 20, \"sources\" : [{\"part\" : \"BUILD-GRAPH-IN-MEMORY\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"ERROR\"}]},
      {\"wire-index\" : 21, \"sources\" : [{\"part\" : \"BUILD-GRAPH-IN-MEMORY\", \"pin\" : \"JSON-COLLECTION\"}], \"receivers\" : [{\"part\" : \"RUNNER\", \"pin\" : \"JSON-COLLECTION\"}]},
      {\"wire-index\" : 22, \"sources\" : [{\"part\" : \"RUNNER\", \"pin\" : \"ERROR\"}], \"receivers\" : [{\"part\" : \"SELF\", \"pin\" : \"DESCRIPTOR\"}]}
    ]
  }"/
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"compiler\",\"inPins\":[\"svg-filename\"],\"outPins\":[\"metadata\",\"json\",\"lisp\",\"error\"],\"kind\":\"compiler\"}"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"compiler\",\"inPins\":[\"svg-filename\"],\"outPins\":[\"metadata\",\"json\",\"lisp\",\"error\"],\"kind\":\"compiler\"}"/
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./part-namer.lisp\",
  \"kindType\": \"leaf\","
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"part-namer\",\"inPins\":[\"filename\"],\"outPins\":[\"name\",\"error\"],\"kind\":\"part-namer\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/part-namer.lisp\"}"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"part-namer\",\"inPins\":[\"filename\"],\"outPins\":[\"name\",\"error\"],\"kind\":\"part-namer\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/part-namer.lisp\"}"/
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./json-array-splitter.lisp\",
  \"kindType\""
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./children-before-graph.lisp\",
  \"kindTyp"
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"json-array-splitter\",\"inPins\":[\"array\",\"json\"],\"outPins\":[\"items\",\"graph\",\"error\"],\"kind\":\"json-array-splitter\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/json-array-splitter.lisp\"}"
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"children-before-graph\",\"inPins\":[\"graph-name\",\"graph\",\"child\"],\"outPins\":[\"name\",\"graph\",\"descriptor\",\"error\"],\"kind\":\"children-before-graph\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/children-before-graph.lisp\"}"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"json-array-splitter\",\"inPins\":[\"array\",\"json\"],\"outPins\":[\"items\",\"graph\",\"error\"],\"kind\":\"json-array-splitter\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/json-array-splitter.lisp\"}"/
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"children-before-graph\",\"inPins\":[\"graph-name\",\"graph\",\"child\"],\"outPins\":[\"name\",\"graph\",\"descriptor\",\"error\"],\"kind\":\"children-before-graph\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/children-before-graph.lisp\"}"/
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./build-collector.lisp\",
  \"kindType\": \"l"
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"build-collector\",\"inPins\":[\"graph\",\"name\",\"descriptor\",\"done\"],\"outPins\":[\"final-code\",\"done\",\"error\"],\"kind\":\"build-collector\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/build-collector.lisp\"}"
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./get-manifest-file.lisp\",
  \"kindType\": "
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"build-collector\",\"inPins\":[\"graph\",\"name\",\"descriptor\",\"done\"],\"outPins\":[\"final-code\",\"done\",\"error\"],\"kind\":\"build-collector\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/build-collector.lisp\"}"/
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"get-manifest-file\",\"inPins\":[\"in\"],\"outPins\":[\"out\",\"error\"],\"kind\":\"get-manifest-file\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/get-manifest-file.lisp\"}"
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./schematic-or-leaf.lisp\",
  \"kindType\": "
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"schematic-or-leaf\",\"inPins\":[\"manifest-as-json-string\"],\"outPins\":[\"child-descriptor\",\"schematic-filename\",\"error\"],\"kind\":\"schematic-or-leaf\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/schematic-or-leaf.lisp\"}"
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./build-graph-in-memory.lisp\",
  \"kindTyp"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"get-manifest-file\",\"inPins\":[\"in\"],\"outPins\":[\"out\",\"error\"],\"kind\":\"get-manifest-file\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/get-manifest-file.lisp\"}"/
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"schematic-or-leaf\",\"inPins\":[\"manifest-as-json-string\"],\"outPins\":[\"child-descriptor\",\"schematic-filename\",\"error\"],\"kind\":\"schematic-or-leaf\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/schematic-or-leaf.lisp\"}"/
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"build-graph-in-memory\",\"inPins\":[\"done\",\"json-script\"],\"outPins\":[\"json-collection\",\"error\"],\"kind\":\"build-graph-in-memory\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/build-graph-in-memory.lisp\"}"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"build-graph-in-memory\",\"inPins\":[\"done\",\"json-script\"],\"outPins\":[\"json-collection\",\"error\"],\"kind\":\"build-graph-in-memory\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/build-graph-in-memory.lisp\"}"/
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./runner.lisp\",
  \"kindType\": \"leaf\",
  \""
child-before-graph sends "{\"itemKind\":\"leaf\",\"name\":\"runner\",\"inPins\":[\"json-collection\"],\"outPins\":[\"error\"],\"kind\":\"runner\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/runner.lisp\"}"
build-collector gets :DESCRIPTOR /"{\"itemKind\":\"leaf\",\"name\":\"runner\",\"inPins\":[\"json-collection\"],\"outPins\":[\"error\"],\"kind\":\"runner\",\"filename\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/cl-build\\/.\\/runner.lisp\"}"/
build-collector gets :DONE /T/
build-graph-in-memory pushes "graph" "boot-boot"
build-graph-in-memory pushes "leaf" "runner"
build-graph-in-memory pushes "leaf" "build-graph-in-memory"
build-graph-in-memory pushes "leaf" "schematic-or-leaf"
build-graph-in-memory pushes "leaf" "get-manifest-file"
build-graph-in-memory pushes "leaf" "build-collector"
build-graph-in-memory pushes "leaf" "children-before-graph"
build-graph-in-memory pushes "leaf" "json-array-splitter"
build-graph-in-memory pushes "leaf" "part-namer"
build-graph-in-memory pushes "leaf" "compiler"

build phase ***********
(((:ITEM-KIND . "leaf") (:NAME . "compiler") (:IN-PINS "svg-filename")
  (:OUT-PINS "metadata" "json" "lisp" "error") (:KIND . "compiler"))
 ((:ITEM-KIND . "leaf") (:NAME . "part-namer") (:IN-PINS "filename")
  (:OUT-PINS "name" "error") (:KIND . "part-namer")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./part-namer.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "json-array-splitter")
  (:IN-PINS "array" "json") (:OUT-PINS "items" "graph" "error")
  (:KIND . "json-array-splitter")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./json-array-splitter.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "children-before-graph")
  (:IN-PINS "graph-name" "graph" "child")
  (:OUT-PINS "name" "graph" "descriptor" "error")
  (:KIND . "children-before-graph")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./children-before-graph.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "build-collector")
  (:IN-PINS "graph" "name" "descriptor" "done")
  (:OUT-PINS "final-code" "done" "error") (:KIND . "build-collector")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./build-collector.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "get-manifest-file") (:IN-PINS "in")
  (:OUT-PINS "out" "error") (:KIND . "get-manifest-file")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./get-manifest-file.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "schematic-or-leaf")
  (:IN-PINS "manifest-as-json-string")
  (:OUT-PINS "child-descriptor" "schematic-filename" "error")
  (:KIND . "schematic-or-leaf")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./schematic-or-leaf.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "build-graph-in-memory")
  (:IN-PINS "done" "json-script") (:OUT-PINS "json-collection" "error")
  (:KIND . "build-graph-in-memory")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./build-graph-in-memory.lisp"))
 ((:ITEM-KIND . "leaf") (:NAME . "runner") (:IN-PINS "json-collection")
  (:OUT-PINS "error") (:KIND . "runner")
  (:FILENAME
   . "/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/cl-build/./runner.lisp"))
 ((:ITEM-KIND . "graph") (:NAME . "boot-boot")
  (:GRAPH (:NAME . "BOOT-BOOT") (:INPUTS "SVG-FILENAME" "DONE")
   (:OUTPUTS "ERROR" "DESCRIPTOR")
   (:PARTS ((:PART-NAME . "RUNNER") (:KIND-NAME . "RUNNER"))
    ((:PART-NAME . "BUILD-GRAPH-IN-MEMORY")
     (:KIND-NAME . "BUILD-GRAPH-IN-MEMORY"))
    ((:PART-NAME . "BUILD-COLLECTOR") (:KIND-NAME . "BUILD-COLLECTOR"))
    ((:PART-NAME . "CHILDREN-BEFORE-GRAPH")
     (:KIND-NAME . "CHILDREN-BEFORE-GRAPH"))
    ((:PART-NAME . "GET-MANIFEST-FILE") (:KIND-NAME . "GET-MANIFEST-FILE"))
    ((:PART-NAME . "SCHEMATIC-OR-LEAF") (:KIND-NAME . "SCHEMATIC-OR-LEAF"))
    ((:PART-NAME . "JSON-ARRAY-SPLITTER") (:KIND-NAME . "JSON-ARRAY-SPLITTER"))
    ((:PART-NAME . "PART-NAMER") (:KIND-NAME . "PART-NAMER"))
    ((:PART-NAME . "COMPILER") (:KIND-NAME . "COMPILER")))
   (:WIRING
    ((:WIRE-INDEX . 0) (:SOURCES ((:PART . "COMPILER") (:PIN . "METADATA")))
     (:RECEIVERS ((:PART . "JSON-ARRAY-SPLITTER") (:PIN . "ARRAY"))))
    ((:WIRE-INDEX . 1) (:SOURCES ((:PART . "COMPILER") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 2) (:SOURCES ((:PART . "COMPILER") (:PIN . "JSON")))
     (:RECEIVERS ((:PART . "JSON-ARRAY-SPLITTER") (:PIN . "JSON"))))
    ((:WIRE-INDEX . 3) (:SOURCES ((:PART . "SELF") (:PIN . "SVG-FILENAME")))
     (:RECEIVERS ((:PART . "COMPILER") (:PIN . "SVG-FILENAME"))
      ((:PART . "PART-NAMER") (:PIN . "FILENAME"))))
    ((:WIRE-INDEX . 4) (:SOURCES ((:PART . "PART-NAMER") (:PIN . "NAME")))
     (:RECEIVERS ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "GRAPH-NAME"))))
    ((:WIRE-INDEX . 5)
     (:SOURCES ((:PART . "JSON-ARRAY-SPLITTER") (:PIN . "ITEMS")))
     (:RECEIVERS ((:PART . "GET-MANIFEST-FILE") (:PIN . "IN"))))
    ((:WIRE-INDEX . 6)
     (:SOURCES ((:PART . "JSON-ARRAY-SPLITTER") (:PIN . "GRAPH")))
     (:RECEIVERS ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "GRAPH"))))
    ((:WIRE-INDEX . 7)
     (:SOURCES ((:PART . "JSON-ARRAY-SPLITTER") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 8)
     (:SOURCES ((:PART . "SCHEMATIC-OR-LEAF") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 9)
     (:SOURCES ((:PART . "SCHEMATIC-OR-LEAF") (:PIN . "CHILD-DESCRIPTOR")))
     (:RECEIVERS ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "CHILD"))))
    ((:WIRE-INDEX . 10)
     (:SOURCES ((:PART . "SCHEMATIC-OR-LEAF") (:PIN . "SCHEMATIC-FILENAME")))
     (:RECEIVERS ((:PART . "PART-NAMER") (:PIN . "FILENAME"))
      ((:PART . "PART-NAMER") (:PIN . "FILENAME"))))
    ((:WIRE-INDEX . 11)
     (:SOURCES ((:PART . "GET-MANIFEST-FILE") (:PIN . "OUT")))
     (:RECEIVERS
      ((:PART . "SCHEMATIC-OR-LEAF") (:PIN . "MANIFEST-AS-JSON-STRING"))))
    ((:WIRE-INDEX . 12)
     (:SOURCES ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "DESCRIPTOR")))
     (:RECEIVERS ((:PART . "BUILD-COLLECTOR") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 13)
     (:SOURCES ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "GRAPH")))
     (:RECEIVERS ((:PART . "BUILD-COLLECTOR") (:PIN . "GRAPH"))))
    ((:WIRE-INDEX . 14)
     (:SOURCES ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "NAME")))
     (:RECEIVERS ((:PART . "BUILD-COLLECTOR") (:PIN . "NAME"))))
    ((:WIRE-INDEX . 15)
     (:SOURCES ((:PART . "CHILDREN-BEFORE-GRAPH") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 16)
     (:SOURCES ((:PART . "BUILD-COLLECTOR") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))
    ((:WIRE-INDEX . 17)
     (:SOURCES ((:PART . "BUILD-COLLECTOR") (:PIN . "FINAL-CODE")))
     (:RECEIVERS ((:PART . "BUILD-GRAPH-IN-MEMORY") (:PIN . "JSON-SCRIPT"))))
    ((:WIRE-INDEX . 18)
     (:SOURCES ((:PART . "BUILD-COLLECTOR") (:PIN . "DONE")))
     (:RECEIVERS ((:PART . "BUILD-GRAPH-IN-MEMORY") (:PIN . "DONE"))))
    ((:WIRE-INDEX . 19) (:SOURCES ((:PART . "SELF") (:PIN . "DONE")))
     (:RECEIVERS ((:PART . "BUILD-COLLECTOR") (:PIN . "DONE"))))
    ((:WIRE-INDEX . 20)
     (:SOURCES ((:PART . "BUILD-GRAPH-IN-MEMORY") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "ERROR"))))
    ((:WIRE-INDEX . 21)
     (:SOURCES ((:PART . "BUILD-GRAPH-IN-MEMORY") (:PIN . "JSON-COLLECTION")))
     (:RECEIVERS ((:PART . "RUNNER") (:PIN . "JSON-COLLECTION"))))
    ((:WIRE-INDEX . 22) (:SOURCES ((:PART . "RUNNER") (:PIN . "ERROR")))
     (:RECEIVERS ((:PART . "SELF") (:PIN . "DESCRIPTOR"))))))))
define leaf name ARROWGRAMS/BUILD::COMPILER
define leaf name ARROWGRAMS/BUILD::PART-NAMER
define leaf name ARROWGRAMS/BUILD::JSON-ARRAY-SPLITTER
define leaf name ARROWGRAMS/BUILD::CHILDREN-BEFORE-GRAPH
define leaf name ARROWGRAMS/BUILD::BUILD-COLLECTOR
define leaf name ARROWGRAMS/BUILD::GET-MANIFEST-FILE
define leaf name ARROWGRAMS/BUILD::SCHEMATIC-OR-LEAF
define leaf name ARROWGRAMS/BUILD::BUILD-GRAPH-IN-MEMORY
define leaf name ARROWGRAMS/BUILD::RUNNER
define graph name "boot-boot"
need name ARROWGRAMS/BUILD::RUNNER
need name ARROWGRAMS/BUILD::BUILD-GRAPH-IN-MEMORY
need name ARROWGRAMS/BUILD::BUILD-COLLECTOR
need name ARROWGRAMS/BUILD::CHILDREN-BEFORE-GRAPH
need name ARROWGRAMS/BUILD::GET-MANIFEST-FILE
need name ARROWGRAMS/BUILD::SCHEMATIC-OR-LEAF
need name ARROWGRAMS/BUILD::JSON-ARRAY-SPLITTER
need name ARROWGRAMS/BUILD::PART-NAMER
need name ARROWGRAMS/BUILD::COMPILER
install-source "compiler" "metadata"
install-source "compiler" "error"
install-source "compiler" "json"
install-source "self" "svg-filename"
install-source "part-namer" "name"
install-source "json-array-splitter" "items"
install-source "json-array-splitter" "graph"
install-source "json-array-splitter" "error"
install-source "schematic-or-leaf" "error"
install-source "schematic-or-leaf" "child-descriptor"
install-source "schematic-or-leaf" "schematic-filename"
install-source "get-manifest-file" "out"
install-source "children-before-graph" "descriptor"
install-source "children-before-graph" "graph"
install-source "children-before-graph" "name"
install-source "children-before-graph" "error"
install-source "build-collector" "error"
install-source "build-collector" "final-code"
install-source "build-collector" "done"
install-source "self" "done"
install-source "build-graph-in-memory" "error"
install-source "build-graph-in-memory" "json-collection"
install-source "runner" "error"
terminating - ready list is nil
#+end_example

* build code snippets for esa builder and runner

#+name: arrowgrams
#+begin_src lisp
  (uiop:run-program "rm -rf ~/.cache/common-lisp")
#+end_src
#+name: arrowgrams
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::make-esa-dsl)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::make-esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/build)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::test-hw) ;; run this in the repl to see output
#+end_src

#+RESULTS: arrowgrams
: NIL
* test-run
#+name: arrowgrams
#+begin_src lisp
  (ab::test-run)
#+end_src

* graph capture - not needed, after graph has been captured
#+name: arrowgrams
#+header: :var message="4a. hello world graph built"
#+begin_src lisp :eval yes
  (format nil "~s ~s ~s" message (ab::hwtest) (get-universal-time))
#+end_src
* make sample.lisp
#+name: arrowgrams
#+header: :var message=".2a sample esa"
#+begin_src lisp
  (ab::make-sample)
  (format nil "~s ~s" message (get-universal-time))
#+end_src

#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src

* for building JS, click ^C^C on the grayed-out lisp lines, sequentially waiting for status line to change (many seconds), to generate js transpiler

#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ab::make-esa-dsl-js)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/esa-js)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ab::make-esa-js)
#+end_src

#+RESULTS: arrowgrams_js
| :ARROWGRAMS/ESA-JS |

* output from builder
** see cl-build/graph.lisp/*test-descriptors*
*** old stuff ...
#+NAME: output-from-builder
#+BEGIN_SRC js
[
{\"itemKind\":\"leaf\",\"name\":\"svg_input\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/svg_input.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"run\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/run.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"top_level_name\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/top_level_name.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"ide\",\"graph\":{\"name\":\"IDE\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"RUN\",\"kindName\":\"RUN\"},{\"partName\":\"SVG-INPUT\",\"kindName\":\"SVG-INPUT\"},{\"partName\":\"TOP-LEVEL-NAME\",\"kindName\":\"TOP-LEVEL-NAME\"},{\"partName\":\"BUILD-PROCESS\",\"kindName\":\"BUILD-PROCESS\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"SVG-INPUT\",\"pin\":\"SVG-CONTENT\"}],\"receivers\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"TOP-LEVEL-SVG\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"JAVASCRIPT-SOURCE-CODE\"}],\"receivers\":[{\"part\":\"RUN\",\"pin\":\"IN\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"TOP-LEVEL-NAME\",\"pin\":\"NAME\"}],\"receivers\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"TOP-LEVEL-NAME\"}]}]}},
{\"itemKind\":\"leaf\",\"name\":\"get_file_content_in_repo\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/get_file_content_in_repo.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"iterator\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/iterator.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"json_object_stacker\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/json_object_stacker.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"determine_kind_type\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/determine_kind_type.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"collector\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/collector.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"javascript_builder\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/javascript_builder.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"fetch_git_repo\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/fetch_git_repo.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"prepare_temp_directory\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/prepare_temp_directory.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"build_process\",\"graph\":{\"name\":\"BUILD_PROCESS\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"COLLECTOR\",\"kindName\":\"COLLECTOR\"},{\"partName\":\"GET-FILE-CONTENT-IN-REPO\",\"kindName\":\"GET-FILE-CONTENT-IN-REPO\"},{\"partName\":\"FETCH-GIT-REPO\",\"kindName\":\"FETCH-GIT-REPO\"},{\"partName\":\"GET-FILE-CONTENT-IN-REPO\",\"kindName\":\"GET-FILE-CONTENT-IN-REPO\"},{\"partName\":\"COMPILE-COMPOSITE\",\"kindName\":\"COMPILE-COMPOSITE\"},{\"partName\":\"PREPARE-TEMP-DIRECTORY\",\"kindName\":\"PREPARE-TEMP-DIRECTORY\"},{\"partName\":\"JAVASCRIPT-BUILDER\",\"kindName\":\"JAVASCRIPT-BUILDER\"},{\"partName\":\"ITERATOR\",\"kindName\":\"ITERATOR\"},{\"partName\":\"JSON-OBJECT-STACKER\",\"kindName\":\"JSON-OBJECT-STACKER\"},{\"partName\":\"DETERMINE-KINDTYPE\",\"kindName\":\"DETERMINE-KINDTYPE\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"PART-METADATA\"}],\"receivers\":[{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"GIT-REPO-METADATA\"},{\"part\":\"ITERATOR\",\"pin\":\"CONTINUE\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"PARTS-AS-JSON-OBJECTS\"}],\"receivers\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"PUSH-OBJECT\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"GRAPH-AS-JSON\"}],\"receivers\":[{\"part\":\"COLLECTOR\",\"pin\":\"COMPOSITE\"}]},{\"wireIndex\":3,\"sources\":[{\"part\":\"COLLECTOR\",\"pin\":\"INTERMEDIATE-CODE\"}],\"receivers\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"INTERMEDIATE-CODE\"}]},{\"wireIndex\":4,\"sources\":[{\"part\":\"ITERATOR\",\"pin\":\"GET-A-PART\"}],\"receivers\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"GET-A-PART\"}]},{\"wireIndex\":5,\"sources\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"NO-MORE\"}],\"receivers\":[{\"part\":\"ITERATOR\",\"pin\":\"DONE\"},{\"part\":\"COLLECTOR\",\"pin\":\"DONE\"}]},{\"wireIndex\":6,\"sources\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"PART-METADATA\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"GIT-REPO-METADATA\"}]},{\"wireIndex\":7,\"sources\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"LEAF-METADATA\"}],\"receivers\":[{\"part\":\"COLLECTOR\",\"pin\":\"LEAF\"}]},{\"wireIndex\":8,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"FILE-CONTENT\"}],\"receivers\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"SVG\"}]},{\"wireIndex\":9,\"sources\":[{\"part\":\"SELF\",\"pin\":\"TOP-LEVEL-SVG\"}],\"receivers\":[{\"part\":\"ITERATOR\",\"pin\":\"START\"},{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"SVG\"}]},{\"wireIndex\":10,\"sources\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TOP-LEVEL-NAME\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"JAVASCRIPT-SOURCE-CODE\"}]},{\"wireIndex\":11,\"sources\":[{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"METADATA\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"GIT-REPO-METADATA\"}]},{\"wireIndex\":12,\"sources\":[{\"part\":\"PREPARE-TEMP-DIRECTORY\",\"pin\":\"DIRECTORY\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TEMP-DIRECTORY\"}]},{\"wireIndex\":13,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"FILE-CONTENT\"}],\"receivers\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"FILE-CONTENT\"}]},{\"wireIndex\":14,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"METADATA\"}],\"receivers\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"PART-METADATA\"}]},{\"wireIndex\":15,\"sources\":[{\"part\":\"SELF\",\"pin\":\"TOP-LEVEL-NAME\"}],\"receivers\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TOP-LEVEL-NAME\"}]}]}},
{\"itemKind\":\"leaf\",\"name\":\"split_diagram\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/split_diagram.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"compile_one_diagram\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/compile_one_diagram.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"json_array_splitter\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/json_array_splitter.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"compile_composite\",\"graph\":{\"name\":\"COMPILE_COMPOSITE\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"SPLIT-DIAGRAM\",\"kindName\":\"SPLIT-DIAGRAM\"},{\"partName\":\"COMPILE-ONE-DIAGRAM\",\"kindName\":\"COMPILE-ONE-DIAGRAM\"},{\"partName\":\"JSON-ARRAY-SPLITTER\",\"kindName\":\"JSON-ARRAY-SPLITTER\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"DIAGRAM\"}],\"receivers\":[{\"part\":\"COMPILE-ONE-DIAGRAM\",\"pin\":\"DIAGRAM\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"METADATA-AS-JSON-ARRAY\"}],\"receivers\":[{\"part\":\"JSON-ARRAY-SPLITTER\",\"pin\":\"JSON\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"SELF\",\"pin\":\"SVG\"}],\"receivers\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"SVG-CONTENT\"}]},{\"wireIndex\":3,\"sources\":[{\"part\":\"COMPILE-ONE-DIAGRAM\",\"pin\":\"GRAPH-AS-JSON\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"GRAPH-AS-JSON\"}]},{\"wireIndex\":4,\"sources\":[{\"part\":\"JSON-ARRAY-SPLITTER\",\"pin\":\"OBJECTS\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"PARTS-AS-JSON-OBJECTS\"}]}]}}
]
#+END_SRC

* notes
** bootstrap manifests are in ~/quicklisp/local-projects/bmfbp/build_process/lispparts
