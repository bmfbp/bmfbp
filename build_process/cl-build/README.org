* todo
** join builder to runner, build-graph-in-memory to run
** in -> out of top
** no metadata, null metadata
** initially set state for each code part
** write filter for rp that gives * and + operators
*** rp is an assembler for parsing

* usage
  cl-user> (ql:quickload :arrowgrams/rephrase-compiler)
  cl-user> (ab::make-esa-dsl)
  cl-user> (ql:quickload :arrowgrams/esa)
  cl-user> (ab::make-esa)
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::hwtest)
  cl-user> (ab::test-run)

;; if adding (break) or changes only to files in cl-build...
;; skip (ab::hwtest) which generates the graph - it's been captured and is part of test-run
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::test-run)

** see also
*** ~/quicklisp/local-projects/build_process/cl-build/run.lisp

* build results
#+RESULTS: arrowgrams
#+begin_example
drawio :SVG-FILENAME #P"/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/parts/diagram/helloworld.svg"
front-end-main gets #P"/Users/tarvydas/quicklisp/local-projects/bmfbp/build_process/parts/diagram/helloworld.svg"
ellipse-bounding-boxes rectangle-bounding-boxes text-bounding-boxes speechbubble-bounding-boxes 
assign-parents-to-ellipses find-comments find-metadata 
"WARNING FB: fact already exists (USED ID690)"
retract (:RECT :ID687)
add-kinds add-self-ports make-unknown-port-names /create-centers COMMENTED OUT/ /calculate-distances COMMENTED OUT/ assign-portnames mark-indexed-ports coincident-ports /mark-directions (noop)/ match-ports-to-components mark-nc pinless /COMMENTED OUT sem-parts-have-some-ports/ sem-ports-have-sink-or-source /COMMENTED OUT sem-no-duplicate-kinds/ sem-speech-vs-comments assign-wire-numbers-to-edges self-input-pins self-output-pins input-pins output-pins emitter demux done FB RESET 
back-end collector gets :PARSE ... 
terminating - ready list is nil
3794587337
#+end_example
* build helloworld.graph.json and helloworld.graph.lisp (alist)
#+name: arrowgrams
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/build)
  (princ (get-universal-time))
#+end_src

#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::build
    (asdf:system-relative-pathname :arrowgrams "build_process/parts/diagram/helloworld.svg")
    (asdf:system-relative-pathname :arrowgrams "build_process/cl-build/helloworld.graph.json")
    (asdf:system-relative-pathname :arrowgrams "build_process/cl-build/helloworld.graph.lisp")
    )
  (princ (get-universal-time))
#+end_src

