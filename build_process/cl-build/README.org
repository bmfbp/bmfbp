* todo
** join builder to runner, build-graph-in-memory to run
** in -> out of top
** no metadata, null metadata
** initially set state for each code part
** write filter for rp that gives * and + operators
*** rp is an assembler for parsing

* usage
  cl-user> (ql:quickload :arrowgrams/rephrase-compiler)
  cl-user> (ab::make-esa-dsl)
  cl-user> (ql:quickload :arrowgrams/esa)
  cl-user> (ab::make-esa)
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::hwtest)
  cl-user> (ab::test-run)

;; if adding (break) or changes only to files in cl-build...
;; skip (ab::hwtest) which generates the graph - it's been captured and is part of test-run
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::test-run)

** see also
*** ~/quicklisp/local-projects/build_process/cl-build/run.lisp

* build from top

#+RESULTS: arrowgrams
#+begin_example
"type"
"name"
"type"
"function"
"type"
"boolean"
"type"
"node-class"
"situation"
"building"
"situation"
"building-aux"
"situation"
"loading"
"situation"
"initializing"
"situation"
"running"
"class"
"part-definition"
"part-name"
"part-kind"
"end"
"class"
"class"
"named-part-instance"
"instance-name"
"instance-node"
"end"
"class"
"class"
"part-pin"
"part-name"
"pin-name"
"end"
"class"
"class"
"source"
"part-name"
"pin-name"
"end"
"class"
"class"
"destination"
"part-name"
"pin-name"
"end"
"class"
"class"
"wire"
"index"
"map"
"sources"
"map"
"destinations"
"end"
"class"
"class"
"kind"
"kind-name"
"input-pins"
"self-class"
"output-pins"
"parts"
"wires"
"end"
"class"
"class"
"node"
"input-queue"
"output-queue"
"kind-field"
"container"
"name-in-container"
"children"
"busy-flag"
"end"
"class"
"class"
"dispatcher"
"map"
"all-parts"
"top-node"
"end"
"class"
"class"
"event"
"partpin"
"data"
"end"
"class"
"when"
"building"
"kind"
"method"
"install-input-pin"
#\(
"name"
#\)
"method"
"install-output-pin"
#\(
"name"
#\)
"script"
"add-input-pin"
#\(
"name"
#\)
"script"
"add-output-pin"
#\(
"name"
#\)
"script"
"add-part"
#\(
"name"
"kind"
"node-class"
#\)
"script"
"add-wire"
#\(
"wire"
#\)
"method"
"install-wire"
#\(
"wire"
#\)
"method"
"install-part"
#\(
"name"
"kind"
"node-class"
#\)
"method"
"parts"
#\>
#\>
"map"
"part-definition"
"end"
"when"
"when"
"building-aux"
"kind"
"method"
"install-class"
#\(
"node-class"
#\)
"method"
"ensure-part-not-declared"
#\(
"name"
#\)
"method"
"ensure-valid-input-pin"
#\(
"name"
#\)
"method"
"ensure-valid-output-pin"
#\(
"name"
#\)
"method"
"ensure-input-pin-not-declared"
#\(
"name"
#\)
"method"
"ensure-output-pin-not-declared"
#\(
"name"
#\)
"script"
"ensure-valid-source"
#\(
"source"
#\)
"script"
"ensure-valid-destination"
#\(
"destination"
#\)
"end"
"when"
"when"
"building"
"part-definition"
"method"
"ensure-kind-defined"
"end"
"when"
"script"
"kind"
"add-input-pin"
#\(
"name"
#\)
"self"
#\.
"ensure-input-pin-not-declared"
#\(
"name"
#\)
"self"
#\.
"install-input-pin"
#\(
"name"
#\)
"end"
"script"
"script"
"kind"
"add-output-pin"
#\(
"name"
#\)
"self"
#\.
"ensure-output-pin-not-declared"
#\(
"name"
#\)
"self"
#\.
"install-output-pin"
#\(
"name"
#\)
"end"
"script"
"script"
"kind"
"add-part"
#\(
"nm"
"k"
"nclass"
#\)
"self"
#\.
"ensure-part-not-declared"
#\(
"nm"
#\)
"self"
#\.
"install-part"
#\(
"nm"
"k"
"nclass"
#\)
"end"
"script"
"script"
"kind"
"add-wire"
#\(
"w"
#\)
"map"
"s"
#\=
"w"
#\.
"sources"
"in"
#\@
"self"
#\.
"ensure-valid-source"
#\(
"s"
#\)
"end"
"map"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
#\@
"self"
#\.
"ensure-valid-destination"
#\(
"dest"
#\)
"end"
"map"
"self"
#\.
"install-wire"
#\(
"w"
#\)
"end"
"script"
"script"
"kind"
"ensure-valid-source"
#\(
"s"
#\)
"if"
"s"
#\.
"refers-to-self"
#\?
"then"
"self"
#\.
"ensure-valid-input-pin"
#\(
"s"
#\.
"pin-name"
#\)
"else"
"let"
"p"
#\=
"self"
#\.
"kind-find-part"
#\(
"s"
#\.
"part-name"
#\)
"in"
"p"
#\.
"ensure-kind-defined"
"p"
#\.
"part-kind"
#\.
"ensure-valid-output-pin"
#\(
"s"
#\.
"pin-name"
#\)
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"kind"
"ensure-valid-destination"
#\(
"dest"
#\)
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"self"
#\.
"ensure-valid-output-pin"
#\(
"dest"
#\.
"pin-name"
#\)
"else"
"let"
"p"
#\=
"self"
#\.
"kind-find-part"
#\(
"dest"
#\.
"part-name"
#\)
"in"
"p"
#\.
"ensure-kind-defined"
"p"
#\.
"part-kind"
#\.
"ensure-valid-input-pin"
#\(
"dest"
#\.
"pin-name"
#\)
"end"
"let"
"end"
"if"
"end"
"script"
"when"
"building"
"source"
"method"
"refers-to-self"
#\?
#\>
#\>
"boolean"
"end"
"when"
"when"
"building"
"destination"
"method"
"refers-to-self"
#\?
#\>
#\>
"boolean"
"end"
"when"
"when"
"building"
"wire"
"method"
"install-source"
#\(
"name"
"name"
#\)
"method"
"install-destination"
#\(
"name"
"name"
#\)
"end"
"when"
"script"
"wire"
"add-source"
#\(
"part"
"pin"
#\)
"self"
#\.
"install-source"
#\(
"part"
"pin"
#\)
"end"
"script"
"script"
"wire"
"add-destination"
#\(
"part"
"pin"
#\)
"self"
#\.
"install-destination"
#\(
"part"
"pin"
#\)
"end"
"script"
"when"
"loading"
"kind"
"script"
"loader"
#\(
"name"
"node"
"dispatcher"
#\)
#\>
#\>
"node"
"end"
"when"
"when"
"loading"
"node"
"method"
"clear-input-queue"
"method"
"clear-output-queue"
"method"
"install-node"
#\(
"node"
#\)
"script"
"add-child"
#\(
"name"
"node"
#\)
"end"
"when"
"script"
"kind"
"loader"
#\(
"my-name"
"my-container"
"dispatchr"
#\)
#\>
#\>
"node"
"let"
"clss"
#\=
"self"
#\.
"self-class"
"in"
"create"
"inst"
#\=
#\*
"clss"
"in"
"inst"
#\.
"clear-input-queue"
"inst"
#\.
"clear-output-queue"
"set"
"inst"
#\.
"kind-field"
#\=
"self"
"set"
"inst"
#\.
"container"
#\=
"my-container"
"set"
"inst"
#\.
"name-in-container"
#\=
"my-name"
"map"
"part"
#\=
"self"
#\.
"parts"
"in"
"let"
"part-instance"
#\=
#\@
"part"
#\.
"part-kind"
#\.
"loader"
#\(
"part"
#\.
"part-name"
"inst"
"dispatchr"
#\)
"in"
#\@
"inst"
#\.
"add-child"
#\(
"part"
#\.
"part-name"
"part-instance"
#\)
"end"
"let"
"end"
"map"
"dispatchr"
#\.
"memo-node"
#\(
"inst"
#\)
#\>
#\>
"inst"
"end"
"create"
"end"
"let"
"end"
"script"
"when"
"loading"
"dispatcher"
"method"
"memo-node"
#\(
"node"
#\)
"method"
"set-top-node"
#\(
"node"
#\)
"end"
"when"
"script"
"node"
"add-child"
#\(
"nm"
"nd"
#\)
"self"
#\.
"install-child"
#\(
"nm"
"nd"
#\)
"end"
"script"
"when"
"initializing"
"dispatcher"
"script"
"initialize-all"
"end"
"when"
"script"
"dispatcher"
"initialize-all"
"map"
"part"
#\=
"self"
#\.
"all-parts"
"in"
#\@
"part"
#\.
"initialize"
"end"
"map"
"end"
"script"
"when"
"initializing"
"node"
"script"
"initialize"
"method"
"initially"
"end"
"when"
"script"
"node"
"initialize"
"self"
#\.
"initially"
"end"
"script"
"when"
"intializing"
"or"
"running"
"node"
"method"
"send"
#\(
"event"
#\)
"script"
"distribute-output-events"
"method"
"display-output-events-to-console-and-delete"
"method"
"get-output-events-and-delete"
#\>
#\>
"map"
"event"
"method"
"has-no-container"
#\?
#\>
#\>
"boolean"
"script"
"distribute-outputs-upwards"
"end"
"when"
"when"
"running"
"dispatcher"
"script"
"start"
"script"
"distribute-all-outputs"
"script"
"run"
"method"
"declare-finished"
"end"
"when"
"when"
"running"
"kind"
"method"
"find-wire-for-source"
#\(
"name"
"name"
#\)
#\>
#\>
"wire"
"method"
"find-wire-for-self-source"
#\(
"name"
#\)
#\>
#\>
"wire"
"end"
"when"
"when"
"running"
"node"
"script"
"busy"
#\?
"script"
"ready"
#\?
"method"
"has-inputs-or-outputs"
#\?
#\>
#\>
"boolean"
"method"
"children"
#\?
#\>
#\>
"boolean"
"method"
"flagged-as-busy"
#\?
#\>
#\>
"boolean"
"method"
"dequeue-input"
"method"
"input-queue"
#\?
"method"
"enqueue-input"
#\(
"event"
#\)
"method"
"enqueue-output"
#\(
"event"
#\)
"method"
"react"
#\(
"event"
#\)
"script"
"run-reaction"
#\(
"event"
#\)
"script"
"run-composite-reaction"
#\(
"event"
#\)
"method"
"node-find-child"
#\(
"name"
#\)
#\>
#\>
"named-part-instance"
"end"
"when"
"script"
"node"
"busy"
#\?
#\>
#\>
"boolean"
"if"
"self"
#\.
"flagged-as-busy"
#\?
"then"
#\>
#\>
"true"
"else"
"map"
"child-part-instance"
#\=
"self"
#\.
"children"
"in"
"let"
"child-node"
#\=
"child-part-instance"
#\.
"instance-node"
"in"
"if"
"child-node"
#\.
"has-inputs-or-outputs"
#\?
"then"
#\>
#\>
"true"
"else"
"if"
#\@
"child-node"
#\.
"busy"
#\?
"then"
#\>
#\>
"true"
"end"
"if"
"end"
"if"
"end"
"let"
"end"
"map"
"end"
"if"
#\>
#\>
"false"
"end"
"script"
"script"
"dispatcher"
"start"
#\@
"self"
#\.
"distribute-all-outputs"
#\@
"self"
#\.
"run"
"end"
"script"
"script"
"dispatcher"
"run"
"let"
"done"
#\=
"true"
"in"
"loop"
"set"
"done"
#\=
"true"
#\@
"self"
#\.
"distribute-all-outputs"
"map"
"part"
#\=
"self"
#\.
"all-parts"
"in"
"if"
#\@
"part"
#\.
"ready"
#\?
"then"
#\@
"part"
#\.
"invoke"
"set"
"done"
#\=
"false"
"exit-map"
"end"
"if"
"end"
"map"
"exit-when"
"done"
"end"
"loop"
"end"
"let"
"self"
#\.
"declare-finished"
"end"
"script"
"script"
"node"
"invoke"
"let"
"e"
#\=
"self"
#\.
"dequeue-input"
"in"
#\@
"self"
#\.
"run-reaction"
#\(
"e"
#\)
#\@
"self"
#\.
"distribute-output-events"
"end"
"let"
"end"
"script"
"script"
"node"
"ready"
#\?
#\>
#\>
"boolean"
"if"
"self"
#\.
"input-queue"
#\?
"then"
"if"
#\@
"self"
#\.
"busy"
#\?
"then"
#\>
#\>
"false"
"else"
#\>
#\>
"true"
"end"
"if"
"end"
"if"
#\>
#\>
"false"
"end"
"script"
"script"
"dispatcher"
"distribute-all-outputs"
"map"
"p"
#\=
"self"
#\.
"all-parts"
"in"
#\@
"p"
#\.
"distribute-output-events"
#\@
"p"
#\.
"distribute-outputs-upwards"
"end"
"map"
"end"
"script"
"script"
"node"
"distribute-outputs-upwards"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"else"
"let"
"parent"
#\=
"self"
#\.
"container"
"in"
"parent"
#\.
"distribute-output-events"
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"node"
"distribute-output-events"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"self"
#\.
"display-output-events-to-console-and-delete"
"else"
"let"
"parent-composite-node"
#\=
"self"
#\.
"container"
"in"
"map"
"output"
#\=
"self"
#\.
"get-output-events-and-delete"
"in"
"let"
"dest"
#\=
"output"
#\.
"partpin"
"in"
"let"
"w"
#\=
"parent-composite-node"
#\.
"kind-field"
#\.
"find-wire-for-source"
#\(
"output"
#\.
"partpin"
#\.
"part-name"
"output"
#\.
"partpin"
#\.
"pin-name"
#\)
"in"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"set"
"pp"
#\.
"part-name"
#\=
"parent-composite-node"
#\.
"name-in-container"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"output"
#\.
"data"
"parent-composite-node"
#\.
"send"
#\(
"new-event"
#\)
"end"
"create"
"end"
"create"
"else"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"output"
#\.
"data"
"let"
"child-part-instance"
#\=
"parent-composite-node"
#\.
"node-find-child"
#\(
"pp"
#\.
"part-name"
#\)
"in"
"child-part-instance"
#\.
"instance-node"
#\.
"enqueue-input"
#\(
"new-event"
#\)
"end"
"let"
"end"
"create"
"end"
"create"
"end"
"if"
"end"
"map"
"end"
"let"
"end"
"let"
"end"
"map"
"end"
"let"
"end"
"if"
"end"
"script"
"script"
"node"
"run-reaction"
#\(
"e"
#\)
"self"
#\.
"react"
#\(
"e"
#\)
"end"
"script"
"script"
"node"
"run-composite-reaction"
#\(
"e"
#\)
"let"
"w"
#\=
"true"
"in"
"if"
"self"
#\.
"has-no-container"
#\?
"then"
"set"
"w"
#\=
"self"
#\.
"kind-field"
#\.
"find-wire-for-self-source"
#\(
"e"
#\.
"partpin"
#\.
"pin-name"
#\)
"else"
"set"
"w"
#\=
"self"
#\.
"container"
#\.
"kind-field"
#\.
"find-wire-for-source"
#\(
"e"
#\.
"partpin"
#\.
"part-name"
"e"
#\.
"partpin"
#\.
"pin-name"
#\)
"end"
"if"
"map"
"dest"
#\=
"w"
#\.
"destinations"
"in"
"create"
"new-event"
#\=
"event"
"in"
"create"
"pp"
#\=
"part-pin"
"in"
"if"
"dest"
#\.
"refers-to-self"
#\?
"then"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"e"
#\.
"data"
"self"
#\.
"send"
#\(
"new-event"
#\)
"else"
"if"
"self"
#\.
"children"
#\?
"then"
"set"
"pp"
#\.
"part-name"
#\=
"dest"
#\.
"part-name"
"set"
"pp"
#\.
"pin-name"
#\=
"dest"
#\.
"pin-name"
"set"
"new-event"
#\.
"partpin"
#\=
"pp"
"set"
"new-event"
#\.
"data"
#\=
"e"
#\.
"data"
"let"
"child-part-instance"
#\=
"self"
#\.
"node-find-child"
#\(
"dest"
#\.
"part-name"
#\)
"in"
"child-part-instance"
#\.
"instance-node"
#\.
"enqueue-input"
#\(
"new-event"
#\)
"end"
"let"
"end"
"if"
"end"
"if"
"end"
"create"
"end"
"create"
"end"
"map"
"end"
"let"
"end"
"script"
:EOF
terminating - ready list is nil
To load "arrowgrams/build":
  Load 1 ASDF system:
    arrowgrams/build
; Loading "arrowgrams/build"
[package cl-ppcre]................................
..................................................
[package json]....................................
[package json-rpc]................................
[package sl]......................................
[package cl-holm-prolog]..........................
[package cl-peg]..................................
[package peg-grammar].............................
[package test-grammar]............................
[package arrowgrams/compiler].....................
..................................................
[package arrowgrams/compiler].....................
[package arrowgrams/compiler].....................
[package arrowgrams/compiler].....................
..................................................
[package arrowgrams/build]............
in compiler-event-passing
.........
#+end_example

#+name: arrowgrams
#+begin_src lisp :results output
  (uiop:run-program "rm -rf ~/.cache/common-lisp")
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src

#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::make-esa-dsl)
  (ql:quickload :arrowgrams/esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::make-esa)
  (ql:quickload :arrowgrams/build)
#+end_src
#+name: arrowgrams
#+results output
#+begin_src lisp :results output
  (arrowgrams/build::btest)
#+end_src


* build code snippets for esa builder and runner

#+name: arrowgrams
#+begin_src lisp
  (uiop:run-program "rm -rf ~/.cache/common-lisp")
#+end_src
#+name: arrowgrams
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::make-esa-dsl)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::make-esa)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ql:quickload :arrowgrams/build)
#+end_src
#+name: arrowgrams
#+begin_src lisp
  (ab::test-hw) ;; run this in the repl to see output
#+end_src

#+RESULTS: arrowgrams
: NIL
* test-run
#+name: arrowgrams
#+begin_src lisp
  (ab::test-run)
#+end_src

* graph capture - not needed, after graph has been captured
#+name: arrowgrams
#+header: :var message="4a. hello world graph built"
#+begin_src lisp :eval yes
  (format nil "~s ~s ~s" message (ab::hwtest) (get-universal-time))
#+end_src
* make sample.lisp
#+name: arrowgrams
#+header: :var message=".2a sample esa"
#+begin_src lisp
  (ab::make-sample)
  (format nil "~s ~s" message (get-universal-time))
#+end_src

#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src

* for building JS, click ^C^C on the grayed-out lisp lines, sequentially waiting for status line to change (many seconds), to generate js transpiler

#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ab::make-esa-dsl-js)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ql:quickload :arrowgrams/esa-js)
#+end_src
#+name: arrowgrams_js
#+begin_src lisp
  (ab::make-esa-js)
#+end_src

#+RESULTS: arrowgrams_js
| :ARROWGRAMS/ESA-JS |

* output from builder
** see cl-build/graph.lisp/*test-descriptors*
*** old stuff ...
#+NAME: output-from-builder
#+BEGIN_SRC js
[
{\"itemKind\":\"leaf\",\"name\":\"svg_input\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/svg_input.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"run\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/run.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"top_level_name\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/top_level_name.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"ide\",\"graph\":{\"name\":\"IDE\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"RUN\",\"kindName\":\"RUN\"},{\"partName\":\"SVG-INPUT\",\"kindName\":\"SVG-INPUT\"},{\"partName\":\"TOP-LEVEL-NAME\",\"kindName\":\"TOP-LEVEL-NAME\"},{\"partName\":\"BUILD-PROCESS\",\"kindName\":\"BUILD-PROCESS\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"SVG-INPUT\",\"pin\":\"SVG-CONTENT\"}],\"receivers\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"TOP-LEVEL-SVG\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"JAVASCRIPT-SOURCE-CODE\"}],\"receivers\":[{\"part\":\"RUN\",\"pin\":\"IN\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"TOP-LEVEL-NAME\",\"pin\":\"NAME\"}],\"receivers\":[{\"part\":\"BUILD-PROCESS\",\"pin\":\"TOP-LEVEL-NAME\"}]}]}},
{\"itemKind\":\"leaf\",\"name\":\"get_file_content_in_repo\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/get_file_content_in_repo.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"iterator\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/iterator.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"json_object_stacker\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/json_object_stacker.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"determine_kind_type\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/determine_kind_type.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"collector\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/collector.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"javascript_builder\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/javascript_builder.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"fetch_git_repo\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/fetch_git_repo.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"prepare_temp_directory\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/prepare_temp_directory.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"build_process\",\"graph\":{\"name\":\"BUILD_PROCESS\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"COLLECTOR\",\"kindName\":\"COLLECTOR\"},{\"partName\":\"GET-FILE-CONTENT-IN-REPO\",\"kindName\":\"GET-FILE-CONTENT-IN-REPO\"},{\"partName\":\"FETCH-GIT-REPO\",\"kindName\":\"FETCH-GIT-REPO\"},{\"partName\":\"GET-FILE-CONTENT-IN-REPO\",\"kindName\":\"GET-FILE-CONTENT-IN-REPO\"},{\"partName\":\"COMPILE-COMPOSITE\",\"kindName\":\"COMPILE-COMPOSITE\"},{\"partName\":\"PREPARE-TEMP-DIRECTORY\",\"kindName\":\"PREPARE-TEMP-DIRECTORY\"},{\"partName\":\"JAVASCRIPT-BUILDER\",\"kindName\":\"JAVASCRIPT-BUILDER\"},{\"partName\":\"ITERATOR\",\"kindName\":\"ITERATOR\"},{\"partName\":\"JSON-OBJECT-STACKER\",\"kindName\":\"JSON-OBJECT-STACKER\"},{\"partName\":\"DETERMINE-KINDTYPE\",\"kindName\":\"DETERMINE-KINDTYPE\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"PART-METADATA\"}],\"receivers\":[{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"GIT-REPO-METADATA\"},{\"part\":\"ITERATOR\",\"pin\":\"CONTINUE\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"PARTS-AS-JSON-OBJECTS\"}],\"receivers\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"PUSH-OBJECT\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"GRAPH-AS-JSON\"}],\"receivers\":[{\"part\":\"COLLECTOR\",\"pin\":\"COMPOSITE\"}]},{\"wireIndex\":3,\"sources\":[{\"part\":\"COLLECTOR\",\"pin\":\"INTERMEDIATE-CODE\"}],\"receivers\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"INTERMEDIATE-CODE\"}]},{\"wireIndex\":4,\"sources\":[{\"part\":\"ITERATOR\",\"pin\":\"GET-A-PART\"}],\"receivers\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"GET-A-PART\"}]},{\"wireIndex\":5,\"sources\":[{\"part\":\"JSON-OBJECT-STACKER\",\"pin\":\"NO-MORE\"}],\"receivers\":[{\"part\":\"ITERATOR\",\"pin\":\"DONE\"},{\"part\":\"COLLECTOR\",\"pin\":\"DONE\"}]},{\"wireIndex\":6,\"sources\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"PART-METADATA\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"GIT-REPO-METADATA\"}]},{\"wireIndex\":7,\"sources\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"LEAF-METADATA\"}],\"receivers\":[{\"part\":\"COLLECTOR\",\"pin\":\"LEAF\"}]},{\"wireIndex\":8,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"FILE-CONTENT\"}],\"receivers\":[{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"SVG\"}]},{\"wireIndex\":9,\"sources\":[{\"part\":\"SELF\",\"pin\":\"TOP-LEVEL-SVG\"}],\"receivers\":[{\"part\":\"ITERATOR\",\"pin\":\"START\"},{\"part\":\"COMPILE-COMPOSITE\",\"pin\":\"SVG\"}]},{\"wireIndex\":10,\"sources\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TOP-LEVEL-NAME\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"JAVASCRIPT-SOURCE-CODE\"}]},{\"wireIndex\":11,\"sources\":[{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"METADATA\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"GIT-REPO-METADATA\"}]},{\"wireIndex\":12,\"sources\":[{\"part\":\"PREPARE-TEMP-DIRECTORY\",\"pin\":\"DIRECTORY\"}],\"receivers\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"FETCH-GIT-REPO\",\"pin\":\"TEMP-DIRECTORY\"},{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TEMP-DIRECTORY\"}]},{\"wireIndex\":13,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"FILE-CONTENT\"}],\"receivers\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"FILE-CONTENT\"}]},{\"wireIndex\":14,\"sources\":[{\"part\":\"GET-FILE-CONTENT-IN-REPO\",\"pin\":\"METADATA\"}],\"receivers\":[{\"part\":\"DETERMINE-KINDTYPE\",\"pin\":\"PART-METADATA\"}]},{\"wireIndex\":15,\"sources\":[{\"part\":\"SELF\",\"pin\":\"TOP-LEVEL-NAME\"}],\"receivers\":[{\"part\":\"JAVASCRIPT-BUILDER\",\"pin\":\"TOP-LEVEL-NAME\"}]}]}},
{\"itemKind\":\"leaf\",\"name\":\"split_diagram\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/split_diagram.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"compile_one_diagram\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/compile_one_diagram.lisp\"},
{\"itemKind\":\"leaf\",\"name\":\"json_array_splitter\",\"fileName\":\"\\/Users\\/tarvydas\\/quicklisp\\/local-projects\\/bmfbp\\/build_process\\/lispparts\\/json_array_splitter.lisp\"},
{\"itemKind\":\"graph\",\"name\":\"compile_composite\",\"graph\":{\"name\":\"COMPILE_COMPOSITE\",\"inputs\":null,\"outputs\":null,\"parts\":[{\"partName\":\"SPLIT-DIAGRAM\",\"kindName\":\"SPLIT-DIAGRAM\"},{\"partName\":\"COMPILE-ONE-DIAGRAM\",\"kindName\":\"COMPILE-ONE-DIAGRAM\"},{\"partName\":\"JSON-ARRAY-SPLITTER\",\"kindName\":\"JSON-ARRAY-SPLITTER\"}],\"wiring\":[{\"wireIndex\":0,\"sources\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"DIAGRAM\"}],\"receivers\":[{\"part\":\"COMPILE-ONE-DIAGRAM\",\"pin\":\"DIAGRAM\"}]},{\"wireIndex\":1,\"sources\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"METADATA-AS-JSON-ARRAY\"}],\"receivers\":[{\"part\":\"JSON-ARRAY-SPLITTER\",\"pin\":\"JSON\"}]},{\"wireIndex\":2,\"sources\":[{\"part\":\"SELF\",\"pin\":\"SVG\"}],\"receivers\":[{\"part\":\"SPLIT-DIAGRAM\",\"pin\":\"SVG-CONTENT\"}]},{\"wireIndex\":3,\"sources\":[{\"part\":\"COMPILE-ONE-DIAGRAM\",\"pin\":\"GRAPH-AS-JSON\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"GRAPH-AS-JSON\"}]},{\"wireIndex\":4,\"sources\":[{\"part\":\"JSON-ARRAY-SPLITTER\",\"pin\":\"OBJECTS\"}],\"receivers\":[{\"part\":\"SELF\",\"pin\":\"PARTS-AS-JSON-OBJECTS\"}]}]}}
]
#+END_SRC

* notes
** bootstrap manifests are in ~/quicklisp/local-projects/bmfbp/build_process/lispparts
