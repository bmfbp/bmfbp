* todo
** join builder to runner, build-graph-in-memory to run
** in -> out of top
** no metadata, null metadata
** initially set state for each code part
** write filter for rp that gives * and + operators
*** rp is an assembler for parsing

* usage
  cl-user> (ql:quickload :arrowgrams/rephrase-compiler)
  cl-user> (ab::make-esa-dsl)
  cl-user> (ql:quickload :arrowgrams/esa)
  cl-user> (ab::make-esa)
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::hwtest)
  cl-user> (ab::test-run)

;; if adding (break) or changes only to files in cl-build...
;; skip (ab::hwtest) which generates the graph - it's been captured and is part of test-run
  cl-user> (ql:quickload :arrowgrams/build)
  cl-user> (ab::test-run)

** see also
*** ~/quicklisp/local-projects/build_process/cl-build/run.lisp

* build results
#+RESULTS: arrowgrams
#+begin_example
To load "arrowgrams/build":
  Load 1 ASDF system:
    arrowgrams/build
; Loading "arrowgrams/build"
[package loops]...................................
[package cl-event-passing]........................
[package cl-event-passing-user]...................
[package cl-event-passing-part]...................
[package cl-event-passing-event]..................
[package cl-event-passing-source].................
[package cl-event-passing-receiver]...............
[package cl-event-passing-schematic]..............
[package cl-event-passing-dispatch]...............
[package cl-event-passing-user-util]..............
[package cl-event-passing-user-wire]..............
[package cl-event-passing-pin]....................
[package alexandria.1.0.0]........................
[package arrowgrams/build]..............3794763984
#+end_example
* build helloworld.graph.json and helloworld.graph.lisp (alist)
#+name: arrowgrams
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/build)
  (princ (get-universal-time))
#+end_src

#+name: arrowgrams
#+begin_src lisp :results output
  (arrowgrams/build::build
    (asdf:system-relative-pathname :arrowgrams "build_process/parts/diagram/helloworld.svg")
    (asdf:system-relative-pathname :arrowgrams "build_process/cl-build/helloworld.graph.json")
    (asdf:system-relative-pathname :arrowgrams "build_process/cl-build/helloworld.graph.lisp")
    )
  (princ (get-universal-time))
#+end_src

