json <- element
value <- j-object / j-array / j-string / j-number / 'true' / 'false' / 'null'
j-object <- LBRACE members* RBRACE
{ (:destructure (lb mstar rb)
   (declare (ignore lb rb))
   `(hashmap ,mstar)) }

members <- member-comma* member
member-comma <- member COMMA
member <- ws j-string ws COLON element ws
{ (:destructure (ws1 s ws2 c e ws3)
   (declare (ignore ws1 ws2 ws3 c ))
   (list s e)) }

j-array <- empty-array / array-with-elements
empty-array <- LBRACK RBRACK
{ (:lambda (x)
    (declare (ignore x))
    `(empty-array)) }

array-with-elements <- LBRACK elements RBRACK
{ (:destructure (lb e rb)
   (declare (ignore lb rb))
   `(array ,e)) }

elements <- element-comma* element
element-comma <- element COMMA
element <- ws value ws
{ (:destructure (ws1 v ws2)
   (declare (ignore ws1 ws2))
   v) }
j-string <- '"' j-string-char* '"'
{ (:lambda (x)
    (arrowgrams/build/cl-build::strip-quotes x)) }
j-string-char <- !'"' . / escape
escape <- rs ["] / rs rs / rs '/' / rs 'b' / rs 'f' / rs 'n' / rs 'r'/ rs 't' / rs 'u' hex hex hex hex
hex <- zero / onenine / [A-F] / [a-f]
j-number <- integer fraction exponent
integer <- int1 / int2 / int3 / int4
int1 <- digits { (:text t) }
int2 <- onenine digits { (:text t) }
int3 <- dash digit { (:text t) }
int4 <- dash onenine digits { (:text t) }
digits <- digit+
digit <- zero / onenine
onenine <- [1-9]
fraction <- ('.' digits)*
exponent <- ('E' sign digits / 'e' sign digits)*
sign <- ('+' / dash)*
ws <- (space / newline / carriage-return / tab)* { (:text t) }
dash <- '-'
zero <- '0' { (:text t) }
space <- ' '
newline <- '\n'
tab <- '\t'
carriage-return <- '\r'
rs <- reverse-solidus
reverse-solidus <- '\\'

RBRACE <- '}' ws { (:lambda (x) (declare (ignore x)) #\.) }
LBRACK <- '[' ws { (:lambda (x) (declare (ignore x)) #\[) }
RBRACK <- ']' ws { (:lambda (x) (declare (ignore x)) #\]) }
COMMA <- ',' ws { (:lambda (x) (declare (ignore x)) #\,) }
COLON <- ':' ws { (:lambda (x) (declare (ignore x)) #\:) }
LBRACE <- '{' ws { (:lambda (x) (declare (ignore x)) #\{) }
