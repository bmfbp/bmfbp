* as of june 19 2020
* build helloworld and run it
#+name: runner
#+begin_src lisp :results output
  (uiop:run-program "~/quicklisp/local-projects/rm.bash")
  (ql:quickload :arrowgrams/runner)
#+end_src

#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "helloworld")
#+end_src

#+name: runner
#+begin_src lisp :results output
(arrowgrams/build::load-and-run-from-file
  (arrowgrams/build::json-graph-path "helloworld"))
#+end_src

* results
#+RESULTS: runner
#+begin_example
compiling "/home/tarvydas/quicklisp/local-projects/bmfbp/build_process/parts/diagram/helloworld.svg"
child-before-graphs in state :IDLE gets :GRAPH-NAME
v4 compiler drawio :SVG-FILENAME "/home/tarvydas/quicklisp/local-projects/bmfbp/build_process/parts/diagram/helloworld.svg"
front-end-main gets "/home/tarvydas/quicklisp/local-projects/bmfbp/build_process/parts/diagram/helloworld.svg"
ellipse-bounding-boxes rectangle-bounding-boxes text-bounding-boxes speechbubble-bounding-boxes 
assign-parents-to-ellipses find-comments find-metadata 
"WARNING FB: fact already exists (USED ID655)"
retract (:RECT :ID652)
add-kinds add-self-ports make-unknown-port-names /create-centers COMMENTED OUT/ /calculate-distances COMMENTED OUT/ assign-portnames mark-indexed-ports coincident-ports /mark-directions (noop)/ match-ports-to-components mark-nc pinless /COMMENTED OUT sem-parts-have-some-ports/ sem-ports-have-sink-or-source /COMMENTED OUT sem-no-duplicate-kinds/ sem-speech-vs-comments assign-wire-numbers-to-edges self-input-pins self-output-pins input-pins output-pins emitter 
writing fb to #P"/home/tarvydas/quicklisp/local-projects/bmfbp/build_process/fb.pro"
demux done FB RESET 
back-end collector gets :PARSE ... 
child-before-graphs in state :WAITING-FOR-GRAPH gets :GRAPH
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./hello.lisp\",
  \"kindType\": \"leaf\",
  \"p"
child-before-graphs in state :IDLE gets :CHILD
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./world.lisp\",
  \"kindType\": \"leaf\",
  \"p"
schematic-or-leaf gets :MANIFEST-AS-JSON-STRING "{
  \"entrypoint\": \"./string-join.lisp\",
  \"kindType\": \"leaf\""
child-before-graphs in state :IDLE gets :CHILD
child-before-graphs in state :IDLE gets :CHILD
terminating - ready list is nil
#+end_example

** verbose
#+name: runner
#+begin_src lisp :results output
    (arrowgrams/build::test-lar)
#+end_src







* deprecated >>>>

* status
** doesn't use ESRAP
** if you dyn bind arrowgrams/build::*verbose* to nil, it will print values, but not messages

* testing script(s)
#+name: runner
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/runner)
#+end_src

#+name: runner
#+begin_src lisp :results output
  (let ((arrowgrams/build::*verbose* nil))
    (arrowgrams/build::test-load-and-run))
#+end_src

* build hellohello.json + run it
#+name: runner
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/build)
  (ql:quickload :arrowgrams/runner)
#+end_src
#+name: runner
#+begin_src lisp :results output
  (let ((arrowgrams/build::*verbose* nil))
    (arrowgrams/build::arrowgrams-svg-to-json "hellohello")
    (cl-user::arrowgrams-run "hellohello"))
#+end_src

#+begin_src lisp :results output
  (let ((arrowgrams/build::*verbose* nil))
    (arrowgrams/build::arrowgrams-svg-to-json "hellohello")
    (let ((str (alexandria:read-file-into-string 
                   (asdf:system-relative-pathname :arrowgrams "build_process/parts/graph/hellohello.json"))))
      (with-input-from-string (f str)
        (let ((*standard-input* f))
           (arrowgrams/build::arrowgrams-run)))))
#+end_src

* results
#+RESULTS: runner
: To load "arrowgrams/runner":
:   Load 1 ASDF system:
:     arrowgrams/runner
: ; Loading "arrowgrams/runner"
: ............
: in compiler-event-passing
: ......................................
: [package arrowgrams/build]......

** verbose
#+name: runner
#+begin_src lisp :results output
    (arrowgrams/build::test-lar)
#+end_src

