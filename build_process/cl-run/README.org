* status
** in LW run (lw) then (lw4)
   creates ~/quicklisp/local-projects/bmfbp/parts/graph/ahelloworld.graph.json
   then loads and runs it in CL under LW
   uses local version of esrap
** sbcl
   M-x slime
   ^c^c on build progn below...
   error in esrap src/interface using LW esrap
   delete LW esrap, allow quicklisp to load stock version
   then, it build ahelloworld and loads and runs it

* build helloworld and run it
#+name: runner
#+begin_src lisp :results output
  (progn
    (uiop:run-program "~/quicklisp/local-projects/rm.bash")
    (ql:quickload :sl)
    (ql:quickload :arrowgrams/build)
    (ql:quickload :arrowgrams/runner))
#+end_src

build schematic...
#+name: runner
#+begin_src lisp :results output
    (arrowgrams/build::arrowgrams-to-json "ahelloworld"))
#+end_src

run graph...
#+name: runner
#+begin_src lisp :results output
    (cl-user::load-and-run-app-from-file  (arrowgrams/build::json-graph-path "ahelloworld"))
#+end_src

run graph old way...
print : "parts/cl-a-parts/cl/aHELLOparts/cl/aWORLD" in RESULTS

#+name: runner
#+begin_src lisp :results output
  (cl-user::old-load-and-run-from-file  (arrowgrams/build::json-graph-path "ahelloworld"))
#+end_src

* lispworks
  if needed {
    load ../esa/lw0 
    (lw0)
    load ../esa/lw0 
    (transpile)
  }
  load ../cl-run/lw2
  (lw2) 
    (cl-user::dispatcher-inject *dispatcher* "start" t))

* results
#+RESULTS: runner
: parts/cl-a-parts/cl/aHELLOparts/cl/aWORLD

