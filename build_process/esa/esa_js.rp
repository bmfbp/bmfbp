= esa-dsl
  @type-decls
  @situations
  @classes
  @whens-and-scripts
  EOF

- keyword-symbol
  [ ?SYMBOL
    [ ?SYMBOL/type ^ok
    | ?SYMBOL/class ^ok
    | ?SYMBOL/create ^ok
    | ?SYMBOL/end ^ok
    | ?SYMBOL/method ^ok
    | ?SYMBOL/script ^ok
    | ?SYMBOL/let ^ok
    | ?SYMBOL/set ^ok
    | ?SYMBOL/map ^ok
    | ?SYMBOL/in ^ok
    | ?SYMBOL/loop ^ok
    | ?SYMBOL/if ^ok
    | ?SYMBOL/then ^ok
    | ?SYMBOL/else ^ok
    | ?SYMBOL/when ^ok
    | ?SYMBOL/situation ^ok
    | ?SYMBOL/or ^ok
    | ?SYMBOL/true ^ok
    | ?SYMBOL/false ^ok
    | ?SYMBOL/exit-map ^ok
    | * ^fail
    ]
  | * ^fail
  ]

- non-keyword-symbol
  [ ?SYMBOL
    [ &keyword-symbol ^fail
    | * ^ok
    ]
  | * ^fail
  ]

= type-decls
  {[ ?SYMBOL/type @type-decl
   | * >
  ]}

= type-decl
  SYMBOL/type @esa-symbol

= situations
  {[ ?SYMBOL/situation @situation | * > ]}

= situation
  SYMBOL/situation SYMBOL

= classes
  {[ ?SYMBOL/class @class-def
   | * >
  ]}

= whens-and-scripts
  {[ ?SYMBOL/script @script-definition
   | ?SYMBOL/when @when-definition
   | * >
  ]}

= class-def
  SYMBOL/class
  @esa-symbol
       set-current-class
$      (emit p "~&function ~a () {}~%~a.prototype = {~%" (atext p) (atext p))
  @field-decl-begin @field-decl
  {[ &field-decl
   | * >
  ]}
$      (emit p "};~%")
  SYMBOL/end SYMBOL/class

= field-decl-begin
  [ ?SYMBOL/map @map-decl
  | &non-keyword-symbol @field-decl
  ]

- field-decl
  [ ?SYMBOL/map @map-decl ^ok
  | &non-keyword-symbol @esa-symbol
$     (emit p "~&  ~a: null~%" (atext p))
    ^ok
  | * ^fail
  ]

= when-definition
  SYMBOL/when
  @situation-ref {[ ?SYMBOL/or @or-situation | * > ]}
$      (clear-method-stream p)
  @class-ref
  {[ ?SYMBOL/script @script-decl
   | ?SYMBOL/method @method-decl
   | * >
  ]}
       emit-methods
  SYMBOL/end SYMBOL/when

= situation-ref
  @esa-symbol % should be checked to be a situation

= or-situation
  SYMBOL/or @situation-ref
  
= class-ref
  @esa-symbol  % should be checked to be a kind

;; TODO: I need access to the name of the class here. How do I reference that?
= method-decl
  SYMBOL/method @esa-symbol
$      (emit-to-method-stream p "~%(defgeneric ~a (self" (atext p))
  @generic-typed-formals
$      (emit-to-method-stream p ")") ;; close parameter list
  @return-type
$      (emit-to-method-stream p ")") ;; close generic

  
;; TODO: I need access to the name of the class here. How do I reference that?
= script-decl
  SYMBOL/script @esa-symbol
$      (emit-to-method-stream p "~%(defgeneric ~a #|script|# (" (atext p))
  @generic-typed-formals
$      (emit-to-method-stream p ")")
  @return-type
$      (emit-to-method-stream p ")") ;; close generic

;; TODO: It seems like this only appears within a field, which is within a
;; class. Under what circumstance would `map` appear within a `class` 
;; definition?
= map-decl
  SYMBOL/map 
  @esa-symbol
$     (emit p "~&(~a :accessor ~a :initform nil)" (atext p) (atext p))
  
= typed-formals
  [ ?'(' '(' type-list ')'
  | *
  ]

= type-list
  @esa-symbol
$     (emit-to-method-stream p ", ~a" (atext p))
  {[ &non-keyword-symbol @esa-symbol
$     (emit-to-method-stream p ", ~a" (atext p))
   | * >
  ]}
  
= generic-typed-formals
  [ ?'(' '(' generic-type-list ')'
  | *
  ]

= generic-type-list
  @esa-symbol
$     (emit-to-method-stream p ", ~a" (gensym))
  {[ &non-keyword-symbol @esa-symbol
$     (emit-to-method-stream p ", ~a" (gensym))
   | * >
  ]}
  
= return-type
  [ ?'>' '>' '>'
         [ ?SYMBOL/map SYMBOL/map @esa-symbol
$            (emit-to-method-stream p " /*returns map ~a*/ " (atext p))
         | * @esa-symbol
$            (emit-to-method-stream p " /*returns ~a*/ " (atext p))
]
  | *
  ]
  
;; TODO: I need access to the name of the class here. How do I reference that?
= script-definition
  SYMBOL/script
  @esa-symbol
  set-current-class
  @qualified-symbol
  set-current-method
$      (emit p "~%(defmethod ~a #|script|# ((self ~a)" (current-method p) (current-class p))
  @formals
$      (emit p ")")  
  @return-type
  @script-body
$      (emit p ")#|end script|#~%")
  SYMBOL/end SYMBOL/script

= formals
  {[ ?'(' '(' untyped-formals ')'
   | * >
  ]}

= untyped-formals
  {[ &non-keyword-symbol @esa-symbol 
$    (emit p ", ~a " (atext p))
   | * >
  ]}

= script-body
  {
$     (emit p "~%")
   [ ?SYMBOL/let @let-statement
   | ?SYMBOL/map @map-statement
   | ?SYMBOL/exit-map @exit-map-statement
   | ?SYMBOL/set @set-statement
   | ?SYMBOL/create @create-statement
   | ?SYMBOL/defproto @set-proto-statement
   | ?SYMBOL/if @if-statement
   | ?SYMBOL/loop @loop-statement
   | ?SYMBOL/exit-when @exit-when-statement
   | ?'>' @return-statement
   | ?'@' @esa-expr
   | &non-keyword-symbol @esa-expr
   | * >
  ]}

= let-statement
  SYMBOL/let
   @esa-symbol
$      (emit p "~&{~%  let ~a =" (atext p))
   '='
   [ ?SYMBOL/map SYMBOL/map | * ]
   @esa-expr
$      (emit p ";~%")
   SYMBOL/in 
   @script-body
$      (emit p "~&}~%")
   SYMBOL/end SYMBOL/let

= create-statement
  SYMBOL/create
   @esa-symbol
$      (emit p "~&{ let ~a = " (atext p))
   '=' 
   [ ?SYMBOL/map SYMBOL/map | * ]
   @class-ref
$      (emit p "new ~a();~%" (atext p))
   SYMBOL/in 
   @script-body
$      (emit p "~&}/*end create*/~%")   
   SYMBOL/end SYMBOL/create

= set-statement
  SYMBOL/set
$      (emit p "~%")
   @esa-expr
   '=' 
$      (emit p " = ")
   @esa-expr

;; TODO: I pulled from Github and proto is still in esa.rp. Is this needed?
= set-proto-statement
  SYMBOL/defproto
$      (emit p "(setf (proto ")
   @esa-expr
$      (emit p ") ")
   '=' 
   @esa-expr
$      (emit p ")")
  
= map-statement
  SYMBOL/map @esa-symbol
$      (emit p "~&(function () {~%  let ~a;~%" (atext p))
  '='
  @esa-expr
  SYMBOL/in @script-body
$      (emit p "~&})();/*end map*/~%")
  SYMBOL/end SYMBOL/map

= exit-map-statement
  SYMBOL/exit-map
$     (emit p "~&return;~%")

= loop-statement
  SYMBOL/loop
$     (emit p "~&while (true) {~%")
    @script-body
$     (emit p "~&}/*end loop*/~%")
  SYMBOL/end SYMBOL/loop
  
= exit-when-statement
  SYMBOL/exit-when
$     (emit p "~&if (")
    @esa-expr
$     (emit p ") return;~%")

= if-statement
  SYMBOL/if
$    (emit p "~&if (")
    @esa-expr
$    (emit p ") {~%")
  SYMBOL/then
    @script-body
$    (emit p "~&}~%")
  [ ?SYMBOL/else SYMBOL/else
$    (emit p "~&else {~%")
     @script-body
$    (emit p "~&}~%")
  | *
  ]
  SYMBOL/end SYMBOL/if

;; TODO: Are there no parameters passed to scripts?
= script-call
  '@' @qualified-symbol
$    (emit p "~&this.~a();~%" (atext p))

;; TODO: Are there no parameters passed to methods?
= method-call
  @qualified-symbol
$    (emit p "~&this.~a();~%" (atext p))

= return-statement
  '>' '>'
  [ ?SYMBOL/true SYMBOL/true
$                (emit p "~&return true;~%")
  | ?SYMBOL/false SYMBOL/false
$                (emit p "~&return false;~%")
  | * @esa-symbol
$                (emit p "~&return ~a;~%" (atext p))
  ]

= qualified-symbol
  @esa-symbol
  [ ?'.' @dotted-symbol
  | *
  ]

= qualifiers
  {[ ?'.' @dotted-symbol
   | * >
  ]}
  
= dotted-symbol
  '.' @esa-symbol

= esa-symbol
  [ &non-keyword-symbol
    clear-saved-text
    SYMBOL
    @esa-symbol-follow
  | *
  ]

= esa-symbol-follow
  save-text
  {[ ?'/' '/' combine-text SYMBOL combine-text
   | ?'-' '-' combine-text SYMBOL combine-text
   | ?'?' '?' combine-text >
   | ?CHARACTER/' CHARACTER/' combine-text >
   | * >
  ]}

= esa-expr
  string-stack-open
  [ ?'@' '@' | * ]
  [ ?SYMBOL/true SYMBOL/true emit-true
  | ?SYMBOL/false SYMBOL/false emit-false
  | *
    @esa-symbol
    push-string
    {[ ?'.' @dotted-symbol push-string
     | * >
    ]}
    [ string-stack-has-only-one-item
      emit-string-pop
    | *
      emit-lpar-inc-count
      emit-string-pop
    ]
    {[ string-stack-empty
       >
     | string-stack-has-only-one-item
       emit-string-pop
       >
     | *
       emit-lpar-inc-count
       emit-string-pop
    ]}
    emit-rpars-count-less-1
    @actuals
    emit-rpars
    string-stack-close
   ]

= actuals
 [ ?'(' '('
$           (emit p " ")
  set-lpar-count-to-1
         {[ &non-keyword-symbol @esa-expr
$          (emit p " ")
          | * > ]}
	 ')'
 | *  emit-rpars-count-less-1
 ]

