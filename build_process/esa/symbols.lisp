(in-package :rephrase)

(defclass symbols (e/part:code)
  ((buffer :accessor buffer)
   (start-position :accessor start-position)
   (start-line :accessor start-line)
   (nline :accessor nline)
   (nposition :accessor nposition)
   (state :accessor state)))

; (:code symbols (:token) (:pull :out :error))

(defmethod get-ordered-buffer ((self symbols)) (coerce (reverse (buffer self)) 'string))

(defmethod e/part:first-time ((self symbols))
  (setf (state self) :idle)
  (setf (buffer self) nil)
  (setf (start-position self) nil)
  (setf (nline self) 0))

(defmethod e/part:react ((self symbols) (e e/event:event))
  ;(format *standard-output* "~&symbols gets ~S ~S~%" (@pin self e) (@data self e))
  (labels ((push-char-into-buffer () (push (token-text (@data self e)) (buffer self)))
           (pull () (@send self :pull :symbols))
           (forward-token (&key (pulled-p nil))
             (let ((tok (@data self e)))
               (let ((new-token (make-token :kind (token-kind tok)
                                            :text (token-text tok)
                                            :line (token-line tok)
                                            :position (token-position tok)
                                            :pulled-p (or pulled-p (token-pulled-p tok)))))
                 (@send self :out new-token))))
           (start-char-p () 
             (when (eq :character (token-kind (@data self e)))
               (let ((c (token-text (@data self e))))
                 (or (and (char>= c #\A) (char<= c #\Z))
                     (and (char>= c #\a) (char<= c #\z))
		     (char= c #\<)))))
           (follow-char-p ()
             (when (eq :character (token-kind (@data self e)))
               (let ((c (token-text (@data self e))))
                 (let ((result
                        (or (and (char>= c #\A) (char<= c #\Z))
                            (and (char>= c #\a) (char<= c #\z))
                            (and (char>= c #\0) (char<= c #\9))
                            (char= c #\-)
			    (char= c #\>))))
                   result))))
           (record ()
             (setf (nposition self) (token-position (@data self e)))
             (setf (nline self) (token-line (@data self e))))
           (action () (e/event::sym e))
           (next-state (x) (setf (state self) x))
           (eof-p () (eq :eof (token-kind (@data self e))))
           (clear-buffer ()
             (setf (buffer self) nil)
             (setf (start-position self) (token-position (@data self e))))
           (release-buffer ()
             (@send self :out (make-token :kind :symbol :text (get-ordered-buffer self) :position (start-position self) :line (start-line self) :pulled-p t)))
           (release-and-clear-buffer ()
             (release-buffer)
             (clear-buffer))
         )

    ;(format *standard-output* "~&symbols in state ~S gets ~S ~S~%" (state self) (token-kind (@data self e)) (token-text (@data self e)))
    (ecase (state self)
      (:idle
       (ecase (action)
         (:token
          (record)
          (cond ((eof-p)
                 (forward-token)
                 (next-state :done))
		((start-char-p)
                 (setf (start-position self) (nposition self))
                 (setf (start-line self) (nline self))
                 (push-char-into-buffer)
                 (pull)
                 (next-state :collecting-symbol))
		(t (forward-token))))))
      (:collecting-symbol
       (ecase (action)
         (:token
          (record)
          (cond ((eof-p)
                 (release-and-clear-buffer)
                 (forward-token)
                 (next-state :done))
		((follow-char-p)
                 (push-char-into-buffer)
                 (pull))
		(t
                 (release-and-clear-buffer)
                 (forward-token)
                 (next-state :idle))))))
      (:done
       (@send self :error (format nil "symbols finished, but received ~S" e))))))

(defmethod e/part:busy-p ((self symbols))
  (call-next-method))
