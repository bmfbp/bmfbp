* overview
** esa stands for Encapsulated Software Assets
** we build a "kernel" that runs software assets as Components connected by wires that send events to one another
** the DI (Design Intent, aka Architecture) for ESA is captured in esa.dsl
** esa.dsl is transpiled into esa.lisp (which is used by ../cl_build)
* transpiler details
** see ../esa-transpiler/README.org for details.
* build
  to build cl-user-esa.lisp & esa.js
  1) create the transpiler (../esa-transpiler/README.org)
  2) ^C^C both of the blocks below
  result is ./esa.lisp & ./cl-user-esa.lisp & ./esa.js
#+name: esa
#+begin_src lisp :results output
  (progn
    (uiop:run-program "~/quicklisp/local-projects/rm.bash") 
    (ql:quickload :arrowgrams/esa-transpiler)
    (load (asdf:system-relative-pathname :arrowgrams "build_process/esa/package.lisp"))
    (load (asdf:system-relative-pathname :arrowgrams "build_process/esa/path.lisp")))
#+end_src

#+name: esa
#+begin_src lisp :results output
  (let ()
    (stack-dsl:initialize-types (arrowgrams/esa-transpiler:path "exprtypes.json"))
    (let ((result 
           (arrowgrams/esa-transpiler::transpile-esa-to-string 
             (arrowgrams/esa:path "esa.dsl")
            :tracing-accept t)))
	  (with-open-file (f (arrowgrams/esa:path "esa.lisp") :direction :output :if-exists :supersede :if-does-not-exist :create)
	    (write-string "(in-package :arrowgrams/build)" f)
	    (write-string "
" f)
	    (write-string result f))
          (with-open-file (f (arrowgrams/esa:path "cl-user-esa.lisp") :direction :output :if-exists :supersede :if-does-not-exist :create)
	    (write-string "(in-package :cl-user)" f)
	    (write-string "
" f)
	    (write-string result f))
	    
	    (let ((js-result 
              (arrowgrams/esa-transpiler::transpile-esa-to-js-string 
                (arrowgrams/esa:path "esa.dsl")
                :tracing-accept nil)))
	    (with-open-file (f (arrowgrams/esa:path "esa.js") :direction :output :if-exists :supersede :if-does-not-exist :create)
	    (write-string "// esa.js" f)
	    (write-string "
" f)
	    (write-string js-result f)))

	    ))
#+end_src


#+RESULTS: esa
#+begin_example
To load "arrowgrams/esa-transpiler":
  Load 1 ASDF system:
    arrowgrams/esa-transpiler
; Loading "arrowgrams/esa-transpiler"
[package loops]...................................
[package alexandria.1.0.0]........................
[package json]....................................
[package json-rpc]................................
[package scanner].................................
[package parsing-assembler].......................
[package stack-dsl]...............................
[package cl-ppcre]................................
..................................................
[package cl-event-passing]........................
[package cl-event-passing-user]...................
[package cl-event-passing-part]...................
[package cl-event-passing-event]..................
[package cl-event-passing-source].................
[package cl-event-passing-receiver]...............
[package cl-event-passing-schematic]..............
[package cl-event-passing-dispatch]...............
[package cl-event-passing-user-util]..............
[package cl-event-passing-user-wire]..............
[package cl-event-passing-pin]....................
[package arrowgrams/esa-transpiler]...............
............................
#+end_example
