* overview
** esa stands for Encapsulate Software Assets
** we build a "kernel" that runs software assets as Components connected by wires that send events to one another
** the DI (Design Intent, aka Architecture) for ESA is captured in esa.dsl
** esa.dsl is transpiled into esa.lisp (which is used by ../cl_build)
* transpiler details
** see ../esa-transpiler/README.org for details.
* build
#+name: esa
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/esa-transpiler)
  (load (asdf:system-relative-pathname :arrowgrams "build_process/esa/package.lisp"))
  (load (asdf:system-relative-pathname :arrowgrams "build_process/esa/path.lisp"))
#+end_src

#+name: esa
#+begin_src lisp :results output
  (let ()
    (stack-dsl:initialize-types (arrowgrams/esa-transpiler:path "exprtypes.json"))
    (let ((result 
           (arrowgrams/esa-transpiler::transpile-esa-to-string 
             (arrowgrams/esa:path "esa.dsl")
            :tracing-accept nil)))
	  (with-open-file (f "esa.lisp" :direction :output :if-exists :supersede :if-does-not-exist :create)
	    (write-string result f))))
#+end_src

#+RESULTS: esa
: To load "arrowgrams/esa-transpiler":
:   Load 1 ASDF system:
:     arrowgrams/esa-transpiler
: ; Loading "arrowgrams/esa-transpiler"
: ...
