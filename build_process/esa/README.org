* usage
** cl-user> (ql:quickload :arrowgrams/esa)
** cl-user> (etest)
* (etest1): :arrowgrams/esa inputs esa.rp outputs esa-dsl.lisp
* (etest2): :arrowgrams/esa uses esa-dsl.lisp, inputs esa-dsl.lisp outputs ../cl-build/esa.lisp
* v2 emitter
** remove all $ code
** see if it still emits .lisp
** then try to emit .js
* scripts
#+name: esa
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/rephrase-compiler)
#+end_src

#+name: esa
#+begin_src lisp :results output
  (ab::make-esa-dsl)
#+end_src

#+name: esa
#+begin_src lisp :results output
  (ql:quickload :arrowgrams/esa)
#+end_src

#+name: esa
#+begin_src lisp :results output
  (ab::make-esa)
#+end_src


#+RESULTS: esa
#+begin_example
#\=
"esa-dsl"
"   (emit p \"(in-package :arrowgrams/build)\")"
#\@
"type-decls"
#\@
"situations"
#\@
"classes"
#\@
"whens-and-scripts"
"EOF"
#\-
"keyword-symbol"
#\[
#\?
"SYMBOL"
#\[
#\?
"SYMBOL"
#\/
"type"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"class"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"create"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"end"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"method"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"script"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"let"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"set"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"map"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"in"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"loop"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"if"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"then"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"else"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"when"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"situation"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"or"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"true"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"false"
#\^
"ok"
#\|
#\?
"SYMBOL"
#\/
"exit-map"
#\^
"ok"
#\|
#\*
#\^
"fail"
#\]
#\|
#\*
#\^
"fail"
#\]
#\-
"non-keyword-symbol"
#\[
#\?
"SYMBOL"
#\[
#\&
"keyword-symbol"
#\^
"fail"
#\|
#\*
#\^
"ok"
#\]
#\|
#\*
#\^
"fail"
#\]
#\=
"type-decls"
#\{
#\[
#\?
"SYMBOL"
#\/
"type"
#\@
"type-decl"
#\|
#\*
#\>
#\]
#\}
#\=
"type-decl"
"SYMBOL"
#\/
"type"
#\@
"esa-symbol"
#\=
"situations"
#\{
#\[
#\?
"SYMBOL"
#\/
"situation"
#\@
"situation"
#\|
#\*
#\>
#\]
#\}
#\=
"situation"
"SYMBOL"
#\/
"situation"
"SYMBOL"
#\=
"classes"
#\{
#\[
#\?
"SYMBOL"
#\/
"class"
#\@
"class-def"
#\|
#\*
#\>
#\]
#\}
#\=
"whens-and-scripts"
#\{
#\[
#\?
"SYMBOL"
#\/
"script"
#\@
"script-definition"
#\|
#\?
"SYMBOL"
#\/
"when"
#\@
"when-definition"
#\|
#\*
#\>
#\]
#\}
#\=
"class-def"
"SYMBOL"
#\/
"class"
#\@
"esa-symbol"
"set-current-class"
"open-class-descriptor"
#\@
"field-decl-begin"
#\@
"field-decl"
#\{
#\[
#\&
"field-decl"
#\|
#\*
#\>
#\]
#\}
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"class"
#\-
"field-decl-begin"
#\[
#\?
"SYMBOL"
#\/
"map"
#\@
"map-decl"
#\|
#\&
"non-keyword-symbol"
#\@
"field-decl"
#\|
#\*
#\^
"fail"
#\]
#\=
"field-decl"
#\[
#\?
"SYMBOL"
#\/
"map"
"SYMBOL"
#\/
"map"
#\@
"esa-symbol"
"create-method-descriptor"
"set-current-method-as-map"
#\|
#\&
"non-keyword-symbol"
#\@
"esa-symbol"
"create-method-descriptor"
#\]
#\=
"when-definition"
"SYMBOL"
#\/
"when"
#\@
"situation-ref"
#\{
#\[
#\?
"SYMBOL"
#\/
"or"
#\@
"or-situation"
#\|
#\*
#\>
#\]
#\}
"open-method-descriptor"
#\@
"class-ref"
#\{
#\[
#\?
"SYMBOL"
#\/
"script"
#\@
"script-decl"
#\|
#\?
"SYMBOL"
#\/
"method"
#\@
"method-decl"
#\|
#\*
#\>
#\]
#\}
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"when"
#\=
"situation-ref"
#\@
"esa-symbol"
#\=
"or-situation"
"SYMBOL"
#\/
"or"
#\@
"situation-ref"
#\=
"class-ref"
#\@
"esa-symbol"
#\=
"method-decl"
"SYMBOL"
#\/
"method"
#\@
"esa-symbol"
"open-method-descriptor-for-current-class"
#\@
"generic-typed-formals"
#\@
"return-type"
"close-method-descriptor"
#\=
"script-decl"
"SYMBOL"
#\/
"script"
#\@
"esa-symbol"
"open-method-descriptor-for-current-class"
#\@
"generic-typed-formals"
#\@
"optional-return-type"
"close-method-descriptor"
#\=
"generic-typed-formals"
#\[
#\?
#\'
#\(
#\'
#\'
#\(
#\'
"generic-type-list"
#\'
#\)
#\'
#\|
#\*
#\]
#\=
"generic-type-list"
#\@
"esa-symbol"
"add-formal-parameter-to-method"
#\{
#\[
#\&
"non-keyword-symbol"
#\@
"esa-symbol"
"add-formal-parameter-to-method"
#\|
#\*
#\>
#\]
#\}
#\=
"optional-return-type"
#\[
#\?
#\'
#\>
#\'
#\'
#\>
#\'
#\'
#\>
#\'
#\[
#\?
"SYMBOL"
#\/
"map"
"SYMBOL"
#\/
"map"
#\@
"esa-symbol"
"add-return-type-to-current-method"
"set-return-type-as-map"
#\|
#\*
#\@
"esa-symbol"
"add-return-type-to-current-method"
#\]
#\|
#\*
#\]
#\=
"script-definition"
"SYMBOL"
#\/
"script"
#\@
"esa-symbol"
"current-class-push"
#\@
"qualified-symbol"
"method-open"
#\@
"formals"
#\@
"return-type"
#\@
"script-body"
"method-attach-to-class"
"method-close"
"current-class-pop"
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"script"
#\=
"formals"
#\{
#\[
#\?
#\'
#\(
#\'
#\'
#\(
#\'
"untyped-formals"
#\'
#\)
#\'
#\|
#\*
#\>
#\]
#\}
#\=
"untyped-formals"
#\{
#\[
#\&
"non-keyword-symbol"
#\@
"esa-symbol"
"    (emit p \" ~a \" (atext p))"
#\|
#\*
#\>
#\]
#\}
#\=
"script-body"
#\{
"     (emit p \"~%\")"
#\[
#\?
"SYMBOL"
#\/
"let"
#\@
"let-statement"
#\|
#\?
"SYMBOL"
#\/
"map"
#\@
"map-statement"
#\|
#\?
"SYMBOL"
#\/
"exit-map"
#\@
"exit-map-statement"
#\|
#\?
"SYMBOL"
#\/
"set"
#\@
"set-statement"
#\|
#\?
"SYMBOL"
#\/
"create"
#\@
"create-statement"
#\|
#\?
"SYMBOL"
#\/
"if"
#\@
"if-statement"
#\|
#\?
"SYMBOL"
#\/
"loop"
#\@
"loop-statement"
#\|
#\?
"SYMBOL"
#\/
"exit-when"
#\@
"exit-when-statement"
#\|
#\?
#\'
#\>
#\'
#\@
"return-statement"
#\|
#\?
#\'
#\@
#\'
#\@
"esa-expr"
#\|
#\&
"non-keyword-symbol"
#\@
"esa-expr"
#\|
#\*
#\>
#\]
#\}
#\=
"let-statement"
"SYMBOL"
#\/
"let"
#\@
"esa-symbol"
"      (emit-code p \"~&let ~a =\" (atext p))"
#\'
#\=
#\'
#\[
#\?
"SYMBOL"
#\/
"map"
"SYMBOL"
#\/
"map"
#\|
#\*
#\]
#\@
"esa-expr"
"      (emit-code p \"; /* let */ ~%\")"
"SYMBOL"
#\/
"in"
#\@
"script-body"
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"let"
#\=
"create-statement"
"SYMBOL"
#\/
"create"
#\@
"esa-symbol"
"      (emit-code p \"~&let ~a = \" (atext p))"
#\'
#\=
#\'
#\[
#\?
"SYMBOL"
#\/
"map"
"SYMBOL"
#\/
"map"
#\|
#\*
#\]
#\[
#\?
#\'
#\*
#\'
#\'
#\*
#\'
#\@
"class-ref"
"      (emit-code p \"new *~a(); /* create* */ ~%\" (atext p))"
#\|
#\*
#\@
"class-ref"
"      (emit-code p \"new ~a(); /* create */ ~%\" (atext p))"
#\]
"SYMBOL"
#\/
"in"
#\@
"script-body"
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"create"
#\=
"set-statement"
"SYMBOL"
#\/
"set"
#\@
"esa-expr"
#\'
#\=
#\'
"      (emit-code p \" = \")"
#\@
"esa-expr"
"      (emit-code p \" ; /* set */~% \")"
#\=
"map-statement"
"SYMBOL"
#\/
"map"
#\@
"esa-symbol"
"      (emit-code p \"~&for ~a in \" (atext p))"
#\'
#\=
#\'
#\@
"esa-expr"
"      (emit-code p \") {~%\")"
"SYMBOL"
#\/
"in"
#\@
"script-body"
"      (emit-code p \"} /* end map */ ~%\")"
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"map"
#\=
"exit-map-statement"
"SYMBOL"
#\/
"exit-map"
"     (emit-code p \"~&return; /* exit map */ ~%\")"
#\=
"loop-statement"
"SYMBOL"
#\/
"loop"
"     (emit-code p \"~&while (true) {~%\")"
#\@
"script-body"
"     (emit-code p \"~&} /*end loop*/ ~%\")"
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"loop"
#\=
"exit-when-statement"
"SYMBOL"
#\/
"exit-when"
"     (emit-code p \"~&if (\")"
#\@
"esa-expr"
"     (emit-code p \") return; /* exit-when */ ~%\")"
#\=
"if-statement"
"SYMBOL"
#\/
"if"
"    (emit-code p \"~&if (\")"
#\@
"esa-expr"
"    (emit-code p \") {~%\")"
"SYMBOL"
#\/
"then"
#\@
"script-body"
"    (emit-code p \"~&}  /* end if */ ~%\")"
#\[
#\?
"SYMBOL"
#\/
"else"
"SYMBOL"
#\/
"else"
"    (emit-code p \"~&else {~%\")"
#\@
"script-body"
"    (emit-code p \"~&} /* end else */ ~%\")"
#\|
#\*
#\]
"SYMBOL"
#\/
"end"
"SYMBOL"
#\/
"if"
#\=
"script-call"
#\'
#\@
#\'
#\@
"qualified-symbol"
"    (emit-code p \"~&this.~a(); /* call script */ ~%\" (atext p))"
#\=
"method-call"
#\@
"qualified-symbol"
"    (emit-code p \"~&this.~a(); /* call method */ ~%\" (atext p))"
#\=
"return-statement"
#\'
#\>
#\'
#\'
#\>
#\'
#\[
#\?
"SYMBOL"
#\/
"true"
"SYMBOL"
#\/
"true"
"                (emit-code p \"~&return true; /* return true */ ~%\")"
#\|
#\?
"SYMBOL"
#\/
"false"
"SYMBOL"
#\/
"false"
"                (emit-code p \"~&return false; /* return false */ ~%\")"
#\|
#\*
#\@
"esa-symbol"
"                (emit-code p \"~&return ~a; /* return value */ ~%\" (atext p))"
#\]
#\=
"qualified-symbol"
#\@
"esa-symbol"
#\[
#\?
#\'
#\.
#\'
#\@
"dotted-symbol"
#\|
#\*
#\]
#\=
"qualifiers"
#\{
#\[
#\?
#\'
#\.
#\'
#\@
"dotted-symbol"
#\|
#\*
#\>
#\]
#\}
#\=
"dotted-symbol"
#\'
#\.
#\'
"emit-code-dot"
#\@
"esa-symbol"
"emit-code-symbol"
#\=
"esa-symbol"
#\[
#\&
"non-keyword-symbol"
"clear-saved-text"
"SYMBOL"
#\@
"esa-symbol-follow"
#\|
#\*
#\]
#\=
"esa-symbol-follow"
"save-text"
#\{
#\[
#\?
#\'
#\/
#\'
#\'
#\/
#\'
"emit-code-slash"
"SYMBOL"
"emit-code-symbol"
#\|
#\?
#\'
#\-
#\'
#\'
#\-
#\'
"emit-code-dash"
"SYMBOL"
"emit-code-symbol"
#\|
#\?
#\'
#\?
#\'
#\'
#\?
#\'
"emit-code-question"
#\>
#\|
#\?
"CHARACTER"
#\/
#\'
"CHARACTER"
#\/
#\'
"emit-code-primed"
#\>
#\|
#\*
#\>
#\]
#\}
#\=
"esa-expr"
#\[
#\?
#\'
#\@
#\'
#\'
#\@
#\'
#\|
#\*
#\]
#\[
#\?
"SYMBOL"
#\/
"true"
"SYMBOL"
#\/
"true"
"emit-code-true"
#\|
#\?
"SYMBOL"
#\/
"false"
"SYMBOL"
#\/
"false"
"emit-code-false"
#\|
#\*
#\@
"esa-symbol"
"emit-code-symbol"
#\{
#\[
#\?
#\'
#\.
#\'
#\@
"dotted-symbol"
#\|
#\*
#\>
#\]
#\}
#\@
"actuals"
#\]
#\=
"actuals"
#\[
#\?
#\'
#\(
#\'
#\'
#\(
#\'
"emit-code-lpar"
#\{
#\[
#\&
"non-keyword-symbol"
"emit-code-comma"
#\@
"esa-expr"
#\|
#\*
#\>
#\]
#\}
#\'
#\)
#\'
"emit-code-rpar"
#\|
#\*
#\]
:EOF
terminating - ready list is nil
#+end_example


