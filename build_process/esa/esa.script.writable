use "esa.dsl"

script main(tree-def dispatcher)
  %% build graph (definition) for tree
  let tree = @tree-def.loader in
    @tree.initializer
    @dispatcher.distribute-all-outputs
    @dispatcher.run
  end let
end script

%%  loader

script definition/node.loader >> instance
  let self-instance = self.create-loadtime in
    map child-def = self.parts in
      let child-instance = @child-def.loader in
        self-instance.add-child(child-instance)
      end let
    end map
    >> self-instance
end script

script loadtime/node.initializer
  map child = self.parts in
    @child.initializer
  end map    
  self.initially
end script

script loadtime/dispatcher.distribute-all-outputs
  map node = self.all-nodes in
    map output-event = node.output-events in
      let wire = output-event.find-wire in
        @wire.distribute-event(output-event)
      end let
    end map
  end map
end script

script runtime/dispatcher.run
  loop
    let node = self.get-node in
      if @node.ready? then
        node.invoke
        @node.dispatch-outputs
      end if
    end let
  end loop
end script

script runtime/node.ready? >> true/false
  if self.has-input? then
    if @self.busy? then
      >> false
    else
      >> true
  end if
end script

script runtime/node.busy? >> true/false
  if self.busy-self then
    >> true
  else
    map child = self.children in
      if @child.busy? then
        >> true
      end if
    end map
  end if
end script

script runtime/node.dispatch-outputs
  map output-event = self.output-events in
    let wire = output-event.find-wire in
      @wire.distribute-event(output-event)
    end let
  end map
end script



