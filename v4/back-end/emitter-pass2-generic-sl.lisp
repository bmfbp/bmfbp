(in-package :arrowgrams/compiler)

#+nil
(eval-when (:compile-toplevel)

  (defparameter *generic-emitter-pass2-rules*
    "
= <schematic>
' generic ' nl
  <top-name> 
  <kind>
  <metadata>
  <top-level-inputs>
  <top-level-outputs>
  <react>
  <first-time>
  :integer
  <parts>

= <top-name>
  :string

= <metadata>
  :string

= <kind>
  :string

= <react>
  :string

= <first-time>
  :string

= <top-level-inputs>
  :inputs
  <top-level-list-of-strings>
  :end

= <top-level-outputs>
  :outputs
  <top-level-list-of-strings>
  :end

= <top-level-list-of-strings>
  [ ?string :string <top-level-list-of-strings>
  | ! ]



= <inmap>
  :inmap
    <mapping>
  :end

= <mapping>
  [ ?string :string :integer <mapping>
  | ! ]

= <inputs>
  :inputs
  <list-of-strings>
  :end

= <outmap>
  :outmap
    <mapping>
  :end

= <outputs>
  :outputs
  <list-of-strings>
  :end

= <list-of-strings>
  [ ?string :string <list-of-strings>
  | ! ]

= <parts>
  :string
  :string
  <incount>
  <inmap>
  :inputs <multiple-pins-with-indices> :end
  <outcount>
  <outmap>
  :outputs <multiple-pins-with-indices> :end
  [ ?string <parts>
  | ! ]

= <incount>
  :integer
= <outcount>
  :integer
= <multiple-pins-with-indices>
  [ ?string
    <single-pin-with-indices>
    <multiple-pins-with-indices>
  | ?symbol
    :symbol <symbol-must-be-nil>
  | ! ]

= <single-pin-with-indices>
    :string
      [ ?integer <wire-indices>
      | ! ]
    :end

= <wire-indices>
  [ ?integer :integer <wire-indices>
  | ! ]

"
    )

#+nil  (defmacro xxx () (sl:parse *generic-emitter-pass2-rules* "-EMITTER-PASS2-GENERIC")))

#+nil (xxx)

#+nil (sl:parse *generic-emitter-pass2-rules* "-EMITTER-PASS2-GENERIC")

(PROGN
 (DEFMETHOD SCHEMATIC-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'SCHEMATIC-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (OUTPUT P " generic ")
     (CALL-EXTERNAL P #'NL DEPTH CURRENT-METHOD)
     (CALL-RULE P #'TOP-NAME-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'KIND-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'METADATA-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'TOP-LEVEL-INPUTS-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (CALL-RULE P #'TOP-LEVEL-OUTPUTS-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (CALL-RULE P #'REACT-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'FIRST-TIME-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :INTEGER)
     (CALL-RULE P #'PARTS-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)))
 (DEFMETHOD TOP-NAME-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'TOP-NAME-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)))
 (DEFMETHOD METADATA-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'METADATA-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)))
 (DEFMETHOD KIND-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'KIND-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)))
 (DEFMETHOD REACT-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'REACT-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)))
 (DEFMETHOD FIRST-TIME-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'FIRST-TIME-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)))
 (DEFMETHOD TOP-LEVEL-INPUTS-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'TOP-LEVEL-INPUTS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :INPUTS)
     (CALL-RULE P #'TOP-LEVEL-LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD TOP-LEVEL-OUTPUTS-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'TOP-LEVEL-OUTPUTS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :OUTPUTS)
     (CALL-RULE P #'TOP-LEVEL-LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD TOP-LEVEL-LIST-OF-STRINGS-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'TOP-LEVEL-LIST-OF-STRINGS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (COND
      ((LOOK-AHEAD P :STRING) (MUST-SEE P :STRING)
       (CALL-RULE P #'TOP-LEVEL-LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH
                  CURRENT-METHOD))
      (T))))
 (DEFMETHOD INMAP-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'INMAP-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :INMAP)
     (CALL-RULE P #'MAPPING-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD MAPPING-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'MAPPING-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (COND
      ((LOOK-AHEAD P :STRING) (MUST-SEE P :STRING) (MUST-SEE P :INTEGER)
       (CALL-RULE P #'MAPPING-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD))
      (T))))
 (DEFMETHOD INPUTS-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'INPUTS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :INPUTS)
     (CALL-RULE P #'LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD OUTMAP-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'OUTMAP-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :OUTMAP)
     (CALL-RULE P #'MAPPING-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD OUTPUTS-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'OUTPUTS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :OUTPUTS)
     (CALL-RULE P #'LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :END)))
 (DEFMETHOD LIST-OF-STRINGS-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'LIST-OF-STRINGS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (COND
      ((LOOK-AHEAD P :STRING) (MUST-SEE P :STRING)
       (CALL-RULE P #'LIST-OF-STRINGS-EMITTER-PASS2-GENERIC DEPTH
                  CURRENT-METHOD))
      (T))))
 (DEFMETHOD PARTS-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'PARTS-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)
     (MUST-SEE P :STRING)
     (CALL-RULE P #'INCOUNT-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'INMAP-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :INPUTS)
     (CALL-RULE P #'MULTIPLE-PINS-WITH-INDICES-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (MUST-SEE P :END)
     (CALL-RULE P #'OUTCOUNT-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (CALL-RULE P #'OUTMAP-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD)
     (MUST-SEE P :OUTPUTS)
     (CALL-RULE P #'MULTIPLE-PINS-WITH-INDICES-EMITTER-PASS2-GENERIC DEPTH
                CURRENT-METHOD)
     (MUST-SEE P :END)
     (COND
      ((LOOK-AHEAD P :STRING)
       (CALL-RULE P #'PARTS-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD))
      (T))))
 (DEFMETHOD INCOUNT-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'INCOUNT-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :INTEGER)))
 (DEFMETHOD OUTCOUNT-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'OUTCOUNT-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :INTEGER)))
 (DEFMETHOD MULTIPLE-PINS-WITH-INDICES-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'MULTIPLE-PINS-WITH-INDICES-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (COND
      ((LOOK-AHEAD P :STRING)
       (CALL-RULE P #'SINGLE-PIN-WITH-INDICES-EMITTER-PASS2-GENERIC DEPTH
                  CURRENT-METHOD)
       (CALL-RULE P #'MULTIPLE-PINS-WITH-INDICES-EMITTER-PASS2-GENERIC DEPTH
                  CURRENT-METHOD))
      ((LOOK-AHEAD P :SYMBOL) (MUST-SEE P :SYMBOL)
       (CALL-RULE P #'SYMBOL-MUST-BE-NIL-EMITTER-PASS2-GENERIC DEPTH
                  CURRENT-METHOD))
      (T))))
 (DEFMETHOD SINGLE-PIN-WITH-INDICES-EMITTER-PASS2-GENERIC
            ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'SINGLE-PIN-WITH-INDICES-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (MUST-SEE P :STRING)
     (COND
      ((LOOK-AHEAD P :INTEGER)
       (CALL-RULE P #'WIRE-INDICES-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD))
      (T))
     (MUST-SEE P :END)))
 (DEFMETHOD WIRE-INDICES-EMITTER-PASS2-GENERIC ((P PARSER) &OPTIONAL (DEPTH 0))
   (LET ((CURRENT-METHOD 'WIRE-INDICES-EMITTER-PASS2-GENERIC))
     (IN-RULE P DEPTH CURRENT-METHOD)
     (COND
      ((LOOK-AHEAD P :INTEGER) (MUST-SEE P :INTEGER)
       (CALL-RULE P #'WIRE-INDICES-EMITTER-PASS2-GENERIC DEPTH CURRENT-METHOD))
      (T)))))
