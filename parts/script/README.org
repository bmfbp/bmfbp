* first (for Aquamacs)
(org-babel-do-load-languages 'org-babel-load-languages '((lisp . t)))
M-x slime
to eval block below, use ^C^C
* load Arrowgrams
#+name: builder (added 2020 12 16)
#+begin_src lisp :results output
  (progn
    (uiop:run-program "~/quicklisp/local-projects/rm.bash")
    (ql:quickload :arrowgrams/build))
#+end_src

#+RESULTS: builder
#+begin_example
To load "arrowgrams/build":
  Load 1 ASDF system:
    arrowgrams/build
; Loading "arrowgrams/build"
[package cl-ppcre]................................
..................................................
[package json]....................................
[package json-rpc]................................
[package loops]...................................
[package cl-holm-prolog]..........................
[package cl-event-passing]........................
[package cl-event-passing-user]...................
[package cl-event-passing-part]...................
[package cl-event-passing-event]..................
[package cl-event-passing-source].................
[package cl-event-passing-receiver]...............
[package cl-event-passing-schematic]..............
[package cl-event-passing-dispatch]...............
[package cl-event-passing-user-util]..............
[package cl-event-passing-user-wire]..............
[package cl-event-passing-pin]....................
[package alexandria.1.0.0]........................
[package arrowgrams/compiler].....................
..................................................
..................................................
[package scanner].................................
[package parsing-assembler].......................
[package stack-dsl]...............................
[package arrowgrams/esa-transpiler]...............
..................................................
[package arrowgrams/build].....................
#+end_example

#+name: runner
#+begin_src lisp :results output
  (progn
    (uiop:run-program "~/quicklisp/local-projects/rm.bash")
    (ql:quickload :arrowgrams/build)
    (ql:quickload :arrowgrams/runner))
#+end_src

* ahelloworld
build graph...
#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "ahelloworld")
#+end_src

* run ahelloworld graph...
#+name: runner
#+begin_src lisp :results output
  (let ((disp (arrowgrams/build::load-and-run-from-file  (arrowgrams/build::json-graph-path "ahelloworld"))))
    (format *standard-output* "~&first run:~%")
    (cl-user::dispatcher-inject disp "start" t)
    (format *standard-output* "~&second run:~%")
    (cl-user::dispatcher-inject disp "start" t)
    (format *standard-output* "~&third run:~%")
    (cl-user::dispatcher-inject disp "start" t))
#+end_src

#+RESULTS: runner
: file-writer: #<CL-EVENT-PASSING-EVENT:EVENT {1004633993}>
: file-writer: #<CL-EVENT-PASSING-EVENT:EVENT {1004634633}>
: file-writer: #<CL-EVENT-PASSING-EVENT:EVENT {100465E133}>
: file-writer: #<CL-EVENT-PASSING-EVENT:EVENT {100465E0B3}>



* (ignore for now) tokenizer test
#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "tokenizer-tester")
#+end_src

#+name: runner
#+begin_src lisp :results output
  (let ((dispatcher (arrowgrams/build::load-and-run-from-file  (arrowgrams/build::json-graph-path "tokenizer-tester"))))
    (let ((fname (namestring (asdf:system-relative-pathname :arrowgrams "test.txt"))))
      (format *standard-output* "~&injecting filename: ~s~%" fname)
      (cl-user::dispatcher-inject dispatcher "filename" fname)
      (format *standard-output* "~&injecting first request:~%")
      (cl-user::dispatcher-inject dispatcher "request" t)))
#+end_src

* (ignore - fooling with generation of esa.lisp)
  see bmfbp/build_process/esa/README.org

