* load Arrowgrams
#+name: runner
#+begin_src lisp :results output
  (progn
    (uiop:run-program "~/quicklisp/local-projects/rm.bash")
    (ql:quickload :arrowgrams/build)
    (ql:quickload :arrowgrams/runner))
#+end_src

* ahelloworld
build graph...
#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "ahelloworld")
#+end_src

* jhelloworld
build graph...
#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "jshelloworld")
#+end_src

* run ahelloworld graph...
#+name: runner
#+begin_src lisp :results output
  (let ((disp (arrowgrams/build::load-and-run-from-file  (arrowgrams/build::json-graph-path "ahelloworld"))))
    (format *standard-output* "~&first run:~%")
    (cl-user::dispatcher-inject disp "start" t)
    (format *standard-output* "~&second run:~%")
    (cl-user::dispatcher-inject disp "start" t)
    (format *standard-output* "~&third run:~%")
    (cl-user::dispatcher-inject disp "start" t))
#+end_src

#+RESULTS: runner
: first run:
: "parts/cl-a-parts/cl/aHELLOparts/cl/aWORLD"
: second run:
: "parts/cl-a-parts/cl/aHELLOparts/cl/aWORLD"
: third run:
: "parts/cl-a-parts/cl/aHELLOparts/cl/aWORLD"



* (ignore for now) tokenizer test
#+name: runner
#+begin_src lisp :results output
  (arrowgrams/build::arrowgrams-to-json "tokenizer-tester")
#+end_src

#+name: runner
#+begin_src lisp :results output
  (let ((dispatcher (arrowgrams/build::load-and-run-from-file  (arrowgrams/build::json-graph-path "tokenizer-tester"))))
    (let ((fname (namestring (asdf:system-relative-pathname :arrowgrams "test.txt"))))
      (format *standard-output* "~&injecting filename: ~s~%" fname)
      (cl-user::dispatcher-inject dispatcher "filename" fname)
      (format *standard-output* "~&injecting first request:~%")
      (cl-user::dispatcher-inject dispatcher "request" t)))
#+end_src
