To edit and run this example, the yEd editor is needed:

http://www.yworks.com/en/products_yed_about.html

and, the various programs ("components") need to be on your PATH.

The components that make up the vsh self-compiler are: scan,
check-input, calc-bounds, mark-directions, match-ports-to-components,
assign-pipe-numbers-to-inputs, assign-pipe-numbers-to-outputs,
assign-fds and emit-grash.

The vsh compiler emits a ".gsh" file, which can be executed by grash.

To run a .gsh vile, use

$ grash <.vsh file> <.graphml file to be compiled>

For example, to self-compile vsh and check that the result is essentially the same:

$ rm self.*
$ cp vsh.graphml self.graphml
$ grash vsh.gsh self.graphml
$ diff vsh.gsh self.gsh
1c1
< #name vsh.gsh
---
> #name self.gsh
(i.e. only the originating filenames differ).

The nine components listed above were created using SBCL and
"buildapp" and quicklisp:

www.sbcl.org

http://www.xach.com/lisp/buildapp/

http://www.quicklisp.org/

The "scan" component uses the "xmls" library (provided via quicklisp).

The grash interpreter was built with gcc.



VSH Notation
------------

All figures in a vsh script are represented by "out of the box" shapes
supplied with yEd.  Diagrams must be saved in graphml format (the
default for yEd). 

"Components" are represented by yEd's "Modern Components >> Bevel Node
with Shadow".  The "text" fied of these figures represent the
component names, i.e. the command or script in "sh".

"Ports" are represented by yEd's "Shape Nodes >> Ellipse".  The text
field of these figures represent the pipe to be used - "in" is stdin,
"out" is stdout and "err" is stderr.[1]  A port must be placed so that
it overlap (intersect) the edge of exactly one component.

"Flows" ("wires") are represented by yEd edges, extruded from one port
and terminating on another.


GRASH Notation
--------------

Grash is a simple interpreter of fork/exec "assembly" code.  At it's
simplest, it is the same as a pipe in "sh".  Grash can interpret more
interesting combinations of pipes than simple linear chains.

The "assembler" commands are:

comments: # as very first character in the line

empty line : ignored

pipes N : creates N pipes starting at index 0

push N : push N as an arg to the next command (dup)

dup N : dup2(pipes[TOS][TOS-1],N), pop TOS, pop TOS

exec <args> : splits the args and calls execvp, after closing all pipes

exec1st <args> : splits the args, appends args from the command line
                 and calls execvp, after closing all pipes

fork : forks a new process
       parent ignores all subsequent commands until krof is seen

krof : signifies end of forked child section
       parent resumes processing commands
       child (if not exec'ed) terminates




TESTING Self Compilation
------------------------
$ cd cl-vsh
$ rm self.*
$ cp vsh.graphml self.graphml
$ grash vsh.gsh self.graphml
$ diff vsh.gsh self.gsh

Only the #name lines should differ.



[1] Future versions of vsh will provide named pipes, sockets, etc.