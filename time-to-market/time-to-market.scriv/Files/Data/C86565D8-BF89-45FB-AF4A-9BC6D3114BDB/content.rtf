{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Ports and wires are like a 
\f1\i plugboard
\f0\i0  used in old-fashioned telephone exchanges, electronics and some musical synthesizers.\
\
Ports are like mini-APIs.  The only question to be asked is \'93can I plug this wire into this Component?\'94.\
\
There are 
\f1\i input
\f0\i0  and 
\f1\i output
\f0\i0  ports.  \
\
APIs tend to come in one, asymmetrical option - 
\f1\i input apis
\f0\i0 .  And, APIs are much more complicated, with the user needing to know the type of every parameter.  \
\
Arrowgrams breaks 
\f1\i types
\f0\i0  into two flavors. (1) Ports, and (2) the 
\f1\i type
\f0\i0  of the {\field{\*\fldinst{HYPERLINK "scrivcmt://90DCF2F5-4026-43DB-B7BF-DED5D59767A0"}}{\fldrslt data}} that flows on the wires into and out of the ports.  It turns out that 
\f1\i types
\f0\i0  become less important in Arrowgrams}